apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pipeline.fullname" . }}
  labels:
    app: {{ include "pipeline.name" . }}
    chart: {{ include "pipeline.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    {{- if .Values.deploymentLabels }}
{{ toYaml .Values.deploymentLabels | indent 4 }}
    {{- end }}
  annotations:
{{ toYaml .Values.deploymentAnnotations | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.strategy }}
  strategy:
{{ toYaml .Values.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "pipeline.name" . }}
      release: "{{ .Release.Name }}"
  template:
    metadata:
      name: {{ include "pipeline.fullname" . }}
      labels:
        app: {{ include "pipeline.name" . }}
        release: "{{ .Release.Name }}"
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | quote }}
      {{- if .Values.metrics.enabled  }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: {{ .Values.metrics.port | quote }}
      {{- end }}

    spec:
      hostAliases:
        {{- toYaml .Values.hostAliases | nindent 8 }}
      initContainers:
      {{- if .Values.mysql.enabled  }}
      - name: check-db-service
        image: busybox
        command: ['sh', '-c', 'until nslookup {{ .Release.Name }}-pipeline-db; do echo waiting for {{ .Release.Name }}-pipeline-db; sleep 1; done;']
      - name: check-db-port
        image: busybox
        command: ['sh', '-c', 'echo STATUS nc -w 2 {{ .Release.Name }}-pipeline-db 3306']
      {{- end }}

      containers:
      - name: pipeline
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: PIPELINE_CONFIG_DIR
          value: /config
        # Kubernetes environment variables
        - name: KUBERNETES_RELEASE_NAME
          value: {{ .Release.Name | quote }}
        - name: KUBERNETES_NAMESPACE
          value: {{ .Release.Namespace | quote }}
        # Database related section
        - name: PIPELINE_DATABASE_HOST
          value: {{ include "pipeline.database.host" . }}
        - name: PIPELINE_DATABASE_PORT
          value: {{ include "pipeline.database.port" . | quote }}
        - name: PIPELINE_DATABASE_TLS
          value: {{ include "pipeline.database.tls" . | quote }}
        - name: PIPELINE_DATABASE_DBNAME
          value: {{ include "pipeline.database.name" . }}
        - name: PIPELINE_DATABASE_USER
          value: {{ include "pipeline.database.username" . }}
        - name : PIPELINE_DATABASE_DIALECT
          value: {{ include "pipeline.database.driver" . }}
        - name: PIPELINE_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "pipeline.database.secretName" .}}
              key: {{ include "pipeline.database.secretKey" .}}

        # Authentication configuration
        - name: PIPELINE_AUTH_CLIENTID
          valueFrom:
            secretKeyRef:
              name: {{ include "pipeline.fullname" . }}
              key: githubClientId
        - name: PIPELINE_AUTH_CLIENTSECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "pipeline.fullname" . }}
              key: githubClientSecret
        - name: PIPELINE_AUTH_TOKENSIGNINGKEY
          valueFrom:
            secretKeyRef:
              name: {{ include "pipeline.fullname" . }}
              key: tokenSigningKey
        - name: PIPELINE_GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ include "pipeline.fullname" . }}
              key: githubToken
        # Vault configuration
        - name: VAULT_ADDR
          value: {{ .Values.vault.serviceAddress }}
        {{- if .Values.vault.tlsSecret }}
        - name: VAULT_CACERT
          value: /vault/tls/ca.crt
        {{ else }}
        - name: VAULT_SKIP_VERIFY
          value: "true"
        {{- end }}

        # Pipeline service and TLS
        - name: PIPELINE_PIPELINE_BINDADDR
          value: ":{{ .Values.service.internalPort }}"
        {{- if .Values.service.tls }}
        - name: PIPELINE_PIPELINE_CERTFILE
          value: /tls/server.crt
        - name: PIPELINE_PIPELINE_KEYFILE
          value: /tls/server.key
        - name: PIPELINECTL_API_URL
          value: https://127.0.0.1:{{ .Values.service.internalPort }}
        - name: PIPELINECTL_API_VERIFY
          value: "false"
        {{ end }}
        # Anchore configuration
        {{- if .Values.configuration.anchore.enabled }}
        - name: PIPELINE_ANCHORE_ADMINPASS
          valueFrom:
            secretKeyRef:
              name: {{ .Values.configuration.anchore.secretName }}
              key: {{ .Values.configuration.anchore.secretKey }}
        {{ end }}
        # Additional environment variables
        {{ range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{ end }}

        ports:
        {{- if .Values.configuration.metrics.enabled }}
        - containerPort: {{ .Values.configuration.metrics.port }}
        {{- end }}
        - containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.configuration.pipelineBasepath }}/api
            port: {{ .Values.service.internalPort }}
          {{- if .Values.service.tls }}
            scheme: HTTPS
          {{- end }}
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: {{ .Values.configuration.pipelineBasepath }}/api
            port: {{ .Values.service.internalPort }}
          {{- if .Values.service.tls }}
            scheme: HTTPS
          {{- end }}
          initialDelaySeconds: 10
        resources:
{{ toYaml .Values.resources | indent 12 }}

        volumeMounts:
        - name: config-volume
          mountPath: /config

        - mountPath: /statestore
          name: statestore

      {{- if .Values.vault.tlsSecret }}
        - name: vault-tls
          mountPath: /vault/tls
       {{ end }}
      {{- if .Values.service.tls  }}
        - name: pipeline-tls
          mountPath: /tls
      {{ end }}
      {{- if eq .Values.configuration.cert.source "file" }}
        - name: sign-ca
          mountPath: {{ .Values.configuration.cert.path }}
      {{ end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ include "pipeline.fullname" . }}

      - name: statestore
        {{- if .Values.statestore.persistence.enabled }}
        persistentVolumeClaim:
           claimName: {{ default (printf "%s-statestore" (include "pipeline.fullname" .)) .Values.statestore.persistence.existingClaim }}
        {{- else }}
        hostPath:
          path: /opt/pipeline/statestore/
        {{- end }}
      {{- if .Values.vault.tlsSecret }}
      - name: vault-tls
        secret:
          secretName: {{ .Release.Name }}-vault-tls
      {{ end }}
      {{- if .Values.service.tls  }}
      - name: pipeline-tls
        secret:
          secretName: {{ include "pipeline.fullname" . }}-tls
      {{ end }}
      {{- if eq .Values.configuration.cert.source "file" }}
      - name: sign-ca
        secret:
          secretName: {{ include "pipeline.fullname" . }}-sign-ca
      {{ end }}
      serviceAccountName: pipeline
