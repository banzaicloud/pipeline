version: 2.1

executors:
    go:
        docker:
            -
                image: circleci/golang:1.12-stretch
                environment:
                    GOFLAG: -mod=readonly
                    GOCACHE: "/tmp/go/cache"

    go_test:
        docker:
            -
                image: circleci/golang:1.12-stretch
                environment:
                    GOFLAG: -mod=readonly
                    GOCACHE: "/tmp/go/cache"

            -
                image: vault:1.1.0
                environment:
                    SKIP_SETCAP: true
                    VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf

commands:
    restore_build_dep_cache:
        description: Restore build cache
        steps:
            -
                restore_cache:
                    name: Restore build dependencies
                    keys:
                        - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

    restore_go_module_cache:
        description: Restore Go module cache
        steps:
            -
                restore_cache:
                    name: Restore Go module cache
                    keys:
                        - gomod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                        - gomod-v1-{{ .Branch }}
                        - gomod-v1-master
                        - gomod-v1

    restore_build_cache:
        description: Restore Go build cache
        parameters:
            cache_name:
                type: string
        steps:
            -
                restore_cache:
                    name: Restore Go build cache
                    keys:
                        - << parameters.cache_name >>-build-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}
                        - << parameters.cache_name >>-build-cache-v1-{{ .Branch }}
                        - << parameters.cache_name >>-build-cache-v1-master
                        - << parameters.cache_name >>-build-cache-v1

    save_build_cache:
        description: Save Go build cache
        parameters:
            cache_name:
                type: string
        steps:
            -
                save_cache:
                    name: Save Go build cache
                    key: << parameters.cache_name >>-build-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
                    paths:
                        - /tmp/go/cache

jobs:
    dependencies:
        executor: go

        steps:
            - checkout
            - restore_build_dep_cache
            - restore_go_module_cache

            -
                run:
                    name: Download build dependencies
                    command: make -j bin/golangci-lint bin/gotestsum bin/licensei bin/migrate

            -
                run:
                    name: Download Go module cache
                    command: go mod download

            -
                save_cache:
                    name: Save Go module cache
                    key: gomod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                    paths:
                        - /go/pkg/mod

            -
                save_cache:
                    name: Save build dependencies
                    key: build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
                    paths:
                        - bin/

    static-checks:
        resource_class: large
        executor: go

        steps:
            - checkout
            - restore_build_dep_cache
            - restore_go_module_cache

            -
                restore_cache:
                    name: Restore license cache
                    keys:
                        - licensei-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                        - licensei-v1-{{ .Branch }}
                        - licensei-v1-master
                        - licensei-v1

            -
                run:
                    name: Download license information for dependencies
                    command: make license-cache

            -
                save_cache:
                    name: Save license cache
                    key: licensei-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                    paths:
                        - .licensei.cache

            -
                run:
                    name: Check dependency licenses
                    command: make license-check

            -
                run:
                    name: Check generated OpenAPI files
                    command: sha256sum -c client/SHA256SUMS > /dev/null || { echo "Please generate client code using make generate-client"; exit 1; }

            -
                run:
                    name: Run linter
                    command: make lint

    build:
        resource_class: large
        executor: go

        steps:
            - checkout
            - restore_go_module_cache
            -
                restore_build_cache:
                    cache_name: build

            -
                run:
                    name: Build
                    command: make build

            -
                save_build_cache:
                    cache_name: build

            -
                store_artifacts:
                    path: build/

    unit-tests:
        resource_class: large
        executor: go_test

        steps:
            - checkout
            - restore_build_dep_cache
            - restore_go_module_cache
            -
                restore_build_cache:
                    cache_name: unit-test

            -
                run:
                    name: Run tests
                    command: |
                        make config/config.toml
                        PIPELINE_CONFIG_DIR=$PWD/config GOARGS="-p=2" make test
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                save_build_cache:
                    cache_name: unit-test

            -
                store_test_results:
                    path: build/test_results/

    integration-tests:
        resource_class: large
        executor: go_test

        steps:
            - checkout
            - restore_build_dep_cache
            - restore_go_module_cache
            -
                restore_build_cache:
                    cache_name: integration-test

            -
                run:
                    name: Run integration tests
                    command: |
                        make config/config.toml
                        PIPELINE_CONFIG_DIR=$PWD/config make GOARGS="-p=2" test-integration
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                save_build_cache:
                    cache_name: integration-test

            -
                store_test_results:
                    path: build/test_results/

    schema-tests:
        docker:
            -
                image: circleci/golang:1.12-stretch
                environment:
                    GOFLAG: -mod=readonly
                    GOCACHE: "/tmp/go/cache"
            -
                image: mysql:5.7
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                environment:
                    MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            -
                image: postgres:9.6

        steps:
            - checkout
            - restore_build_dep_cache
            - restore_go_module_cache

            -
                run:
                    name: Install dependencies
                    command: |
                        sudo apt-get update
                        sudo apt-get install -y mysql-client mysql-utilities postgresql-client
                        make config/config.toml

            -
                run:
                    name: Create MySQL databases
                    command: |
                        mysql -h 127.0.0.1 -u root -e "CREATE DATABASE pipeline_migrations;"
                        mysql -h 127.0.0.1 -u root -e 'CREATE DATABASE pipeline_automigrate; USE pipeline_automigrate; CREATE TABLE `schema_migrations` (`version` bigint(20) NOT NULL, `dirty` tinyint(1) NOT NULL, PRIMARY KEY (`version`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;'

            -
                run:
                    name: Test MySQL database migrations
                    command: |
                        make bin/migrate
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test MySQL database auto migrations
                    command: go run -tags automigrate ./cmd/pipeline/automigrate.go ./cmd/pipeline/migrate.go
                    environment:
                        PIPELINE_DATABASE_HOST: 127.0.0.1
                        PIPELINE_DATABASE_USER: root
                        PIPELINE_DATABASE_PASSWORD: ""
                        PIPELINE_DATABASE_ROLE: ""
                        PIPELINE_DATABASE_DBNAME: pipeline_automigrate

            -
                run:
                    name: Test MySQL database schema diff
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                run:
                    name: Test MySQL database migrations are reversible
                    command: |
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" down
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test MySQL database schema diff again
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                run:
                    name: Create PostgreSQL databases
                    command: |
                        psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE pipeline_migrations;"
                        psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE pipeline_automigrate;"
                        psql -h 127.0.0.1 -U postgres -d pipeline_automigrate -c 'CREATE TABLE schema_migrations (version bigint NOT NULL, dirty BOOLEAN NOT NULL, PRIMARY KEY (version));'

            -
                run:
                    name: Test PostgreSQL database migrations
                    command: |
                        make bin/migrate
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" up

            -
                run:
                    name: Test PostgreSQL database auto migrations
                    command: go run -tags automigrate ./cmd/pipeline/automigrate.go ./cmd/pipeline/migrate.go
                    environment:
                        PIPELINE_DATABASE_DIALECT: postgres
                        PIPELINE_DATABASE_HOST: 127.0.0.1
                        PIPELINE_DATABASE_PORT: 5432
                        PIPELINE_DATABASE_TLS: disable
                        PIPELINE_DATABASE_USER: postgres
                        PIPELINE_DATABASE_PASSWORD: postgres
                        PIPELINE_DATABASE_ROLE: ""
                        PIPELINE_DATABASE_DBNAME: pipeline_automigrate

            -
                run:
                    name: Test PostgreSQL database schema diff
                    command: |
                        pg_dump -s -h localhost -U postgres -d pipeline_migrations > pipeline_migrations.txt
                        pg_dump -s -h localhost -U postgres -d pipeline_automigrate > pipeline_automigrate.txt
                        diff -U 10 pipeline_migrations.txt pipeline_automigrate.txt

            -
                run:
                    name: Test PostgreSQL database migrations are reversible
                    command: |
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" down
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" up

            -
                run:
                    name: Test PostgreSQL database schema diff again
                    command: |
                        pg_dump -s -h localhost -U postgres -d pipeline_migrations > pipeline_migrations.txt
                        pg_dump -s -h localhost -U postgres -d pipeline_automigrate > pipeline_automigrate.txt
                        diff -U 10 pipeline_migrations.txt pipeline_automigrate.txt

workflows:
    version: 2
    ci:
        jobs:
            - dependencies
            - static-checks:
                  requires:
                      - dependencies
            - build:
                  requires:
                      - dependencies
            - unit-tests:
                  requires:
                      - dependencies
            - integration-tests:
                  requires:
                      - dependencies
            - schema-tests:
                  requires:
                      - dependencies
