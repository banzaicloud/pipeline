version: 2.1

orbs:
  docker: circleci/docker@0.5.13
  helm: banzaicloud/helm@0.0.5

helm-repositories: &helm_repositories
    - run: helm repo add rimusz https://charts.rimusz.net

executors:
    vm:
        machine:
            resource_class: large
            image: ubuntu-1604:201903-01
        environment:
            GOPATH: /home/circleci/go
            GO_VERSION: '1.14.2'
            VAULT_VERSION: '1.3.2'
            KIND_VERSION: 'v0.7.0'
            HELM_VERSION: 'v2.16.3'

jobs:
    build:
        resource_class: large
        docker:
            -
                image: banzaicloud/golang:1.14
                environment:
                    GOFLAG: -mod=readonly
                    GOCACHE: "/tmp/go/cache"
            -
                image: mysql:5.7.27
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                environment:
                    MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            -
                image: postgres:9.6
                environment:
                    POSTGRES_HOST_AUTH_METHOD: "trust"

            -
                image: vault:1.3.2
                environment:
                    SKIP_SETCAP: true
                    VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf

        steps:
            - checkout

            -
                restore_cache:
                    name: Restore build dependencies
                    keys:
                        - build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

            -
                run:
                    name: Install build dependencies
                    command: |
                      apt-get update
                      apt-get install -y mysql-client mysql-utilities postgresql-client

            -
                restore_cache:
                    name: Restore license cache
                    keys:
                        - licensei-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                        - licensei-v1-{{ .Branch }}
                        - licensei-v1-master
                        - licensei-v1

            -
                run:
                    name: Download license information for dependencies
                    command: make license-cache

            -
                save_cache:
                    name: Save license cache
                    key: licensei-v1-{{ .Branch }}-{{ checksum "go.sum" }}
                    paths:
                        - .licensei.cache

            -
                run:
                    name: Check dependency licenses
                    command: make license-check

            -
                restore_cache:
                    name: Restore Go build cache
                    keys:
                        - build-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}
                        - build-cache-v1-{{ .Branch }}
                        - build-cache-v1-master
                    paths:
                        - /tmp/go/cache
            -
                run:
                    name: Build
                    command: make build

            -
                run:
                    name: Run linter
                    command: make lint

            -
                run:
                    name: Run tests
                    command: |
                        make config/config.yaml
                        PIPELINE_CONFIG_DIR=$PWD/config GOARGS="-p=2" make test
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                run:
                    name: Create MySQL databases
                    command: |
                        mysql -h 127.0.0.1 -u root -e "CREATE DATABASE pipeline_migrations;"
                        mysql -h 127.0.0.1 -u root -e 'CREATE DATABASE pipeline_automigrate; USE pipeline_automigrate; CREATE TABLE `schema_migrations` (`version` bigint(20) NOT NULL, `dirty` tinyint(1) NOT NULL, PRIMARY KEY (`version`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;'

            -
                run:
                    name: Test MySQL database migrations
                    command: |
                        make bin/migrate
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test MySQL database auto migrations
                    command: go run -tags automigrate ./cmd/pipeline/automigrate.go ./cmd/pipeline/config.go ./cmd/pipeline/migrate.go ./cmd/pipeline/vars.go
                    environment:
                        PIPELINE_DATABASE_HOST: 127.0.0.1
                        PIPELINE_DATABASE_USER: root
                        PIPELINE_DATABASE_PASSWORD: ""
                        PIPELINE_DATABASE_ROLE: ""
                        PIPELINE_DATABASE_NAME: pipeline_automigrate
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                run:
                    name: Test MySQL database schema diff
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                run:
                    name: Test MySQL database migrations are reversible
                    command: |
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" down -all
                        bin/migrate -source "file://database/migrations/mysql" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test MySQL database schema diff again
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                run:
                    name: Create PostgreSQL databases
                    command: |
                        psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE pipeline_migrations;"
                        psql -h 127.0.0.1 -U postgres -c "CREATE DATABASE pipeline_automigrate;"
                        psql -h 127.0.0.1 -U postgres -d pipeline_automigrate -c 'CREATE TABLE schema_migrations (version bigint NOT NULL, dirty BOOLEAN NOT NULL, PRIMARY KEY (version));'

            -
                run:
                    name: Test PostgreSQL database migrations
                    command: |
                        make bin/migrate
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" up

            -
                run:
                    name: Test PostgreSQL database auto migrations
                    command: go run -tags automigrate ./cmd/pipeline/automigrate.go ./cmd/pipeline/config.go ./cmd/pipeline/migrate.go ./cmd/pipeline/vars.go
                    environment:
                        PIPELINE_DATABASE_DIALECT: postgres
                        PIPELINE_DATABASE_HOST: 127.0.0.1
                        PIPELINE_DATABASE_PORT: 5432
                        PIPELINE_DATABASE_TLS: disable
                        PIPELINE_DATABASE_USER: postgres
                        PIPELINE_DATABASE_PASSWORD: postgres
                        PIPELINE_DATABASE_ROLE: ""
                        PIPELINE_DATABASE_NAME: pipeline_automigrate
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                run:
                    name: Install migra for PostgreSQL database diffs
                    command: |
                        apt-get install -y python-pip
                        pip install migra[pg]

            -
                run:
                    name: Test PostgreSQL database schema diff
                    command: migra postgresql://postgres:postgres@localhost/pipeline_migrations postgresql://postgres:postgres@localhost/pipeline_automigrate --unsafe

            -
                run:
                    name: Test PostgreSQL database migrations are reversible
                    command: |
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" down -all
                        bin/migrate -source "file://database/migrations/postgres" -database "postgres://postgres:@127.0.0.1:5432/pipeline_migrations?sslmode=disable" up

            -
                run:
                    name: Test PostgreSQL database schema diff again
                    command: migra postgresql://postgres:postgres@localhost/pipeline_migrations postgresql://postgres:postgres@localhost/pipeline_automigrate --unsafe
            -
                save_cache:
                    name: Save Go build cache
                    key: build-cache-v1-{{ .Branch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
                    paths:
                      - /tmp/go/cache

            -
                save_cache:
                    name: Save build dependencies
                    key: build-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
                    paths:
                        - bin/

            -
                store_test_results:
                    path: build/test_results/

            -
                store_artifacts:
                    path: build/

    docker-release:
        executor:
            name: docker/machine
            dlc: true
        parameters:
            tag:
               default: $CIRCLE_SHA1
               description: 'Image tag'
               type: string
            extra_build_args:
               default: ''
               description: >
                   Extra flags to pass to docker build. For examples
               type: string
            image:
                description: Name of image to build
                type: string
            registry:
                default: docker.io
                description: |
                    Name of registry to use, defaults to docker.io
                type: string
        steps:
            -
                checkout
            -
                docker/check
            -
                docker/build:
                    extra_build_args: <<parameters.extra_build_args>>
                    registry: <<parameters.registry>>
                    image: <<parameters.image>>
                    tag: $CIRCLE_SHA1
            -
                run:
                    name: Tag release
                    command: |
                        docker tag <<parameters.image>>:$CIRCLE_SHA1 <<parameters.registry>>/<<parameters.image>>:<<parameters.tag>>
            -
                docker/push:
                    registry: <<parameters.registry>>
                    image: <<parameters.image>>
                    tag: <<parameters.tag>>
            -
                run:
                    name: Check version
                    command: |
                      if ! echo "${CIRCLE_TAG}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
                        echo 'Unstable version. Skipping further steps.'
                        circleci step halt
                      fi
            -
                run:
                    name: Tag latest
                    command: |
                      docker tag <<parameters.image>>:$CIRCLE_SHA1 <<parameters.registry>>/<<parameters.image>>:latest
            -
                docker/push:
                    registry: <<parameters.registry>>
                    image: <<parameters.image>>
                    tag: latest

    integration-test-k8s-1-17-4:
        executor: vm
        steps:
            - integration:
                k8s_version: v1.17.4

commands:
    integration:
        parameters:
            k8s_version:
                description: kubernetes version
                type: string
                default: ""
        steps:
            -   checkout
            -   restore_cache:
                    name: Restore build dependencies
                    keys:
                        - integration-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
            -   run:
                    name: Setup golang
                    command: |
                        sudo rm -rf /usr/local/go
                        curl -sSL "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -xz -C /usr/local/
                        mkdir -p /home/circleci/go/bin
            -   run:
                    name: Setup kind and create cluster
                    command: |
                        curl -Lo ./kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-linux-amd64
                        chmod +x ./kind
                        ./kind create cluster --kubeconfig build/kubeconfig
            -   run:
                    name: Setup kubectl
                    command: |
                        curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/<< parameters.k8s_version >>/bin/linux/amd64/kubectl
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
            -   run:
                    name: Setup helm
                    command: |
                        bash <(curl -L https://git.io/get_helm.sh) -v ${HELM_VERSION}
                        kubectl create serviceaccount tiller --namespace kube-system
                        kubectl create clusterrolebinding --clusterrole cluster-admin --serviceaccount=kube-system:tiller tiller
                        helm init --service-account tiller
                    environment:
                        KUBECONFIG: build/kubeconfig
            -   run:
                    name: Start Vault
                    command: |
                        docker run --name vault -p 127.0.0.1:8200:8200 -d -e VAULT_DEV_ROOT_TOKEN_ID=227e1cce-6bf7-30bb-2d2a-acc854318caf -e SKIP_SETCAP=true vault:${VAULT_VERSION} server -dev
            -   run:
                    name: Run integration tests
                    command: |
                        make config/config.yaml
                        KUBECONFIG=$PWD/build/kubeconfig PIPELINE_CONFIG_DIR=$PWD/config make GOARGS="-p=1" test-integration
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf
            -   save_cache:
                    name: Save build dependencies
                    key: integration-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
                    paths:
                        - bin/

workflows:
    ci:
        jobs:
            -
                build
            -
                integration-test-k8s-1-17-4
            -
                docker/publish:
                    name: Build docker image
                    executor:
                        name: docker/machine
                        dlc: true
                    deploy: false
                    image: banzaicloud/pipeline
                    tag: ${CIRCLE_BRANCH//\//_}
                    filters:
                        branches:
                            ignore: master
            -
                docker/publish:
                    name: Publish master docker image
                    executor:
                        name: docker/machine
                        dlc: true
                    context: dockerhub
                    deploy: true
                    image: banzaicloud/pipeline
                    tag: master
                    requires:
                      - build
                    filters:
                        branches:
                            only: master
            -
                docker-release:
                    name: Publish tagged & latest docker image
                    context: dockerhub
                    image: banzaicloud/pipeline
                    tag: ${CIRCLE_TAG//\//_}
                    filters:
                        tags:
                            only: /^[0-9]+\.[0-9]+\.[0-9]+(?:-(?:dev|rc)\.[0-9]+)?$/
                        branches:
                            ignore: /.*/

    helm-chart:
        jobs:
            -   helm/lint-chart:
                    add-extra-repositories: *helm_repositories
                    filters:
                        tags:
                            ignore: /.*/

            -   helm/publish-chart:
                    context: helm
                    add-extra-repositories: *helm_repositories
                    filters:
                        branches:
                            ignore: /.*/
                        tags:
                            only: /chart\/pipeline\/\d+.\d+.\d+/
