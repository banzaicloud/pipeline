{
  "info": {
    "_postman_id": "55fe0969-6ebf-4d24-9d31-f5a0d10c446f",
    "name": "End2End TEST Organizations copy",
    "description": "Collection for K8S Cluster CRUD operations through the Banzai Cloud Pipeline API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Clusters",
      "description": null,
      "item": [
        {
          "name": "Cluster Create AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "63677652-1d0c-4409-8aa3-b35f3331b6b2",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"secret_id\": \"{{secret_id}}\",\n  \"nodeInstanceType\": \"m4.xlarge\",\n  \"properties\": {\n        \"amazon\": {\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n\t                \"image\": \"ami-16bfeb6f\"\t\n            \t}\n            },\n            \"master\": {\n                \"instanceType\": \"m4.xlarge\",\n                \"image\": \"ami-16bfeb6f\"\n            }\n        }\n    }\n}\n\n"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Amazon Web Services"
          },
          "response": []
        },
        {
          "name": "Cluster Create AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ecdbacca-9637-48f1-baf4-b93f26c4819f",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"azcluster{{username}}{{$randomInt}}\",\n  \"location\": \"westeurope\",\n  \"cloud\": \"azure\",\n  \"secret_id\": \"{{secret_id}}\",\n  \"nodeInstanceType\": \"Standard_B2ms\",\n  \"properties\": {\n        \"azure\": {\n        \t\"resourceGroup\": \"{{az-resource-group}}\",\n        \t\"kubernetesVersion\": \"1.9.2\",\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"count\": 1,\n                \t\"nodeInstanceType\": \"Standard_B2ms\"\n            \t},\n            \t\"pool2\": {\n            \t\t\"count\": 1,\n                \t\"nodeInstanceType\": \"Standard_B2ms\"\n            \t}\n        \t}\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Azure Container Service"
          },
          "response": []
        },
        {
          "name": "Cluster Create GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86b45d04-946a-457b-b1d5-c3f6ec81fcc9",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"nodeInstanceType\": \"n1-standard-1\",\n    \"secret_id\": \"{{secret_id}}\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9\"\n            },\n            \"nodeVersion\":\"1.9\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"count\": 1,\n                    \"nodeInstanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Google Kubernetes Engine"
          },
          "response": []
        },
        {
          "name": "Cluster Create Dummy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08eb5646-ddb5-4066-88e6-c3557ec52e45",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\":\"dummy-cluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"dummyLocation\",\n    \"nodeInstanceType\": \"dummyInstanceType\",\n    \"secret_id\": \"{{secret_id}}\",\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n            \n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Google Kubernetes Engine"
          },
          "response": []
        },
        {
          "name": "Cluster Create Kubernetes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe99d227-5aab-4b02-a1a6-79cfd1fc8701",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"kubernetes-{{username}}-{{$randomInt}}\",\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"cloud\": \"kubernetes\",\n\t\"properties\": {\n\t\t\"kubernetes\": {\n\t\t\t\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Google Kubernetes Engine"
          },
          "response": []
        },
        {
          "name": "Cluster Create with profile AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe99d227-5aab-4b02-a1a6-79cfd1fc8701",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"cloud\": \"amazon\",\n\t\"profile_name\": \"default\",\n\t\"properties\": {\n\t\t\"amazon\": {\n           \n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Amazon Web Services"
          },
          "response": []
        },
        {
          "name": "Cluster Create with profile AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe99d227-5aab-4b02-a1a6-79cfd1fc8701",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\":\"azcluster{{username}}{{$randomInt}}\",\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"cloud\": \"azure\",\n\t\"profile_name\": \"default\",\n\t\"properties\": {\n\t\t\"azure\": {\n            \"resourceGroup\": \"{{az-resource-group}}\"\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Azure Container Service"
          },
          "response": []
        },
        {
          "name": "Cluster Create with profile GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fe99d227-5aab-4b02-a1a6-79cfd1fc8701",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"cloud\": \"google\",\n\t\"profile_name\": \"default\",\n\t\"properties\": {\n\t\t\"google\": {\n           \n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Creates a K8S cluster in the Google Kubernetes Engine"
          },
          "response": []
        },
        {
          "name": "Cluster List",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "}",
                  "else if (responseCode.code === 404) {",
                  "    tests[\"Cluster Node Found!\"] = false",
                  "    postman.setNextRequest(null);",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "    ",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "type": "text",
                  "value": "zeppelin-k8s-charts"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters"
              ]
            },
            "description": "Get the cluster details"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cluster",
      "description": null,
      "item": [
        {
          "name": "Cluster Update AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bb0bfcd1-a1c2-4cc0-b03e-61e4bb31fcee",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n\t                \"image\": \"ami-16bfeb6f\"\t\n            \t}\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Update an AWS cluster"
          },
          "response": []
        },
        {
          "name": "Cluster Update AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1d33fe5d-239f-4bb8-968c-46ab44390e6d",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Update an AKS cluster"
          },
          "response": []
        },
        {
          "name": "Cluster Update GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37265830-f9a7-4967-bca4-cdbe793e27be",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"cloud\": \"google\",\n  \"properties\": {\n    \"google\": {\n       \"master\": {\n            \"version\": \"1.9.4-gke.1\"\n      },\n      \"nodePools\": {\n        \"pool1\": {\n            \"count\" : 2,\n            \"nodeInstanceType\": \"n1-standard-2\"\n        }\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Update an AKS cluster"
          },
          "response": []
        },
        {
          "name": "Cluster Update Dummy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "37265830-f9a7-4967-bca4-cdbe793e27be",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n        \t\"node\": {\n            \t\"count\": 2\n        \t}\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Update an AKS cluster"
          },
          "response": []
        },
        {
          "name": "Helm init",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4f7e7713-c0c0-4d42-8d1e-aad3a7bdffde",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    ",
                  "    console.log(dataJSON)",
                  "    tests[\"Valid status\"] = dataJSON.status == 201;",
                  "    tests[\"Valid message\"] = dataJSON.message == \"helm initialising\";",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"namespace\": \"kube-system\",\n  \"service_account\": \"tiller\",\n  \"tiller_image\": \"gcr.io/kubernetes-helm/tiller:v2.7.2\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/helminit",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "helminit"
              ]
            },
            "description": "Initialize helm in the cluster"
          },
          "response": []
        },
        {
          "name": "Cluster Delete  FakeID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3b611314-d6e9-4e5e-ae48-1494996f0bb2",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 404) {",
                  "    tests[\"Response Code 404\"] = responseCode.code == 404;",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    ",
                  "    console.log(dataJSON)",
                  "    tests[\"Valid Message\"] = dataJSON.message == \"Cluster not found\";",
                  "    tests[\"Valid Error\"] = dataJSON.error == \"record not found\";",
                  "    tests[\"Valid code\"] = dataJSON.code == \"404\";",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/31231231241231231231321",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "31231231241231231231321"
              ]
            },
            "description": "Delete a K8S cluster from the cloud, cleans up resources"
          },
          "response": []
        },
        {
          "name": "Cluster Delete ",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 202) {",
                  "    tests[\"Response Code 202\"] = responseCode.code == 202;",
                  "    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(155679)",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}",
                  " "
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Delete a K8S cluster from the cloud, cleans up resources"
          },
          "response": []
        },
        {
          "name": "Get cluster status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2918cae2-a5f9-47c2-979b-bfaf1152fdaf",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    tests[\"Valid id\"] = dataJSON.id == environment.cluster_id;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "}",
                  "else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Get cluster details"
          },
          "response": []
        },
        {
          "name": "Fetch cluster Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2918cae2-a5f9-47c2-979b-bfaf1152fdaf",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"cluster_id\", dataJSON.id);",
                  "    tests[\"Cluster ID: \" + dataJSON.id] = true;",
                  "",
                  "    tests[\"Valid id\"] = dataJSON.id == environment.cluster_id;",
                  "",
                  "    postman.setNextRequest(\"Cluster Status\");",
                  "}",
                  "else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/details",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "details"
              ]
            },
            "description": "Get cluster details"
          },
          "response": []
        },
        {
          "name": "Get cluster nodes",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9e432b4f-2978-46e4-bb33-ce37204dffae",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/nodes",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "nodes"
              ]
            },
            "description": "Get cluster details"
          },
          "response": []
        },
        {
          "name": "Cluster Config",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "}",
                  "else if (responseCode.code === 404) {",
                  "    tests[\"Cluster Node Found!\"] = false",
                  "    postman.setNextRequest(null);",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "    ",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "type": "text",
                  "value": "zeppelin-k8s-charts"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/config",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "config"
              ]
            },
            "description": "Get the cluster configuration file"
          },
          "response": []
        },
        {
          "name": "Cluster Public Endpoints",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "type": "text",
                  "value": "zeppelin-k8s-charts"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/endpoints",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "endpoints"
              ]
            },
            "description": "List cluster public endpoints"
          },
          "response": []
        },
        {
          "name": "Cluster API endpoints",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "type": "text",
                  "value": "zeppelin-k8s-charts"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/apiendpoint",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "apiendpoint"
              ]
            },
            "description": "List cluster public endpoints"
          },
          "response": []
        },
        {
          "name": "Update monitoring",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "type": "text",
                  "value": "zeppelin-k8s-charts"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/monitoring",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "monitoring"
              ]
            },
            "description": "List cluster public endpoints"
          },
          "response": []
        },
        {
          "name": "Cluster Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "90935d8f-b035-4e4b-aabe-bb1018ae4944",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "     postman.setNextRequest(\"Cluster Info\");",
                  "",
                  "} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
                  "    console.log(\"Waiting...\" );",
                  "    postman.setNextRequest(\"Delay Response 1\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "    ",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}"
              ]
            },
            "description": "Get cluster status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Catalog",
      "description": null,
      "item": [
        {
          "name": "Catalog List",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/catalogs",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "catalogs"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Catalog Details",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/catalogs/zeppelin",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "catalogs",
                "zeppelin"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Deployments",
      "description": null,
      "item": [
        {
          "name": "Deployment Create",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "",
                  "    pm.environment.set(\"deployment_name\", dataJSON.release_name);",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"banzaicloud-stable/drone\",\n\t\"values\": {\n\t\t\"server\": {\n\t\t\t\"persistentVolume\": {\n\t\t\t\t\"enabled\": false\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments"
              ]
            },
            "description": "Create a helm deployment"
          },
          "response": []
        },
        {
          "name": "Deployment Create Fake APP",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 404) {",
                  "    tests[\"Response Code 404\"] = responseCode.code == 404;",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    ",
                  "    console.log(dataJSON)",
                  "    tests[\"Valid Message\"] = /^Error loading chart: stat \\/opt\\/helm\\/.*.no such file or directory$/.test(dataJSON.message);",
                  "    tests[\"Valid code\"] = dataJSON.status == \"404\";",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"pokol_app\"}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments"
              ]
            },
            "description": "Create a helm deployment"
          },
          "response": []
        },
        {
          "name": "List Deployment",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c45ecb31-d574-4ddf-aaa5-ae2d554e0832",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\": \"banzaicloud-stable/drone\"}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments"
              ]
            },
            "description": "List helm deployment"
          },
          "response": []
        },
        {
          "name": "Deployment Init Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
                  "    console.log(\"Waiting...\" );",
                  "    postman.setNextRequest(\"Delay Response 2\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "    ",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments"
              ]
            },
            "description": "Get deployment status"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Deployment",
      "description": null,
      "item": [
        {
          "name": "Deployment app Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
                  "    console.log(\"Waiting...\" );",
                  "    postman.setNextRequest(\"Delay Response 3\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "    ",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments",
                "{{deployment_name}}"
              ]
            },
            "description": "Get deployment app status"
          },
          "response": []
        },
        {
          "name": "Deployment Upgrade",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5938dc81-a51b-4ecf-969b-b147bf96ce59",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 501) {",
                  "    tests[\"Response Code 501\"] = responseCode.code == 501;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments",
                "{{deployment_name}}"
              ]
            },
            "description": "Upgrades an existing deployment"
          },
          "response": []
        },
        {
          "name": "Deployment Delete ",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04be7a1d-e73b-435f-8f58-a43bfd7b77ff",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "    ",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    console.log(dataJSON)",
                  "    tests[\"Valid status\"] = dataJSON.status == 200;",
                  "    tests[\"Valid message\"] = dataJSON.message == \"Deployment deleted!\";",
                  "    tests[\"Valid name\"] = dataJSON.name == environment.deployment_name;",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}",
                  " "
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments",
                "{{deployment_name}}"
              ]
            },
            "description": "Delete Deployment\n"
          },
          "response": []
        },
        {
          "name": "Deployment Delete  FakeAPP",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a593fab0-d03e-4681-a36a-f5053cde21fb",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 400) {",
                  "    tests[\"Response Code 400\"] = responseCode.code == 400;",
                  "    ",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    console.log(dataJSON)",
                  "    tests[\"Valid code\"] = dataJSON.code == 400;",
                  "    tests[\"Valid message\"] = dataJSON.message == \"Error deleting deployment\";",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/pokollll-appp",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "clusters",
                "{{cluster_id}}",
                "deployments",
                "pokollll-appp"
              ]
            },
            "description": "Delete Deployment\n"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profiles",
      "description": null,
      "item": [
        {
          "name": "Create Profile AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"eu-west-1\",\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"master\": {\n\t\t\t\t\"instanceType\": \"m4.xlarge\",\n\t\t\t\t\"image\": \"ami-16bfeb6f\"\n\t\t\t},\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"instanceType\": \"m4.xlarge\",\n\t\t\t\t\t\"spotPrice\": \"0.2\",\n\t\t\t\t\t\"minCount\": 1,\n\t\t\t\t\t\"maxCount\": 2,\n\t\t\t\t\t\"image\": \"ami-16bfeb6f\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Create an Amazon Web Services profile"
          },
          "response": []
        },
        {
          "name": "Create Profile AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 1,\n\t\t\t\t\t\"nodeInstanceType\": \"Standard_D2_v2\"\n\t\t\t\t},\n\t\t\t\t\"pool2\": {\n\t\t\t\t\t\"count\": 2,\n\t\t\t\t\t\"nodeInstanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Create an Azure Container Service profile"
          },
          "response": []
        },
        {
          "name": "Create Profile GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{profile_name}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9.4-gke.1\"\n            },\n            \"nodeVersion\":\"1.9.4-gke.1\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"count\": 1,\n                    \"nodeInstanceType\": \"n1-standard-2\"\n                },\n                \"pool2\": {\n                    \"count\": 2,\n                    \"nodeInstanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Create a Google Kubernetes Engine profile"
          },
          "response": []
        },
        {
          "name": "Update Profile AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{profile_name}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"nodeInstanceType\": \"m4.xlarge\",\n  \"properties\": {\n    \"amazon\": {\n      \"master\": {\n        \"instanceType\": \"m4.xlarge\",\n        \"image\": \"ami-16bfeb6f\"\n      },\n      \"node\": {\n        \"spotPrice\": \"0.2\",\n        \"minCount\": 2,\n        \"maxCount\": 4,\n        \"image\": \"ami-16bfeb6f\"\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Update an existing Amazon Web Services profile"
          },
          "response": []
        },
        {
          "name": "Update Profile AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2,\n\t\t\t\t\t\"nodeInstanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Update an existing Azure Container Service profile"
          },
          "response": []
        },
        {
          "name": "Update Profile GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6795b382-1ed8-42ca-8aa9-ffebb2f585dd",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{profile_name}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9.4-gke.1\"\n            },\n            \"nodeVersion\":\"1.9.4-gke.1\",\n            \"nodePools\": {\n                \"pool2\": {\n                    \"count\": 2,\n                    \"nodeInstanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster"
              ]
            },
            "description": "Update an existing Google Kubernetes Engine profile"
          },
          "response": []
        },
        {
          "name": "List profiles",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3bbc178d-32ee-487c-8c4a-e6b0970ad765",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster/{{cloud_type}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster",
                "{{cloud_type}}"
              ]
            },
            "description": "List the stored cluster profiles in pipeline"
          },
          "response": []
        },
        {
          "name": "Delete profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "588d0d18-2f62-4c19-a28d-2d77a92dfe01",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "    postman.setNextRequest(\"List profiles\");",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster/{{cloud_type}}/{{profile_name}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "profiles",
                "cluster",
                "{{cloud_type}}",
                "{{profile_name}}"
              ]
            },
            "description": "Delete an existing cluster profile"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Secrets",
      "description": null,
      "item": [
        {
          "name": "List secret",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "List secret with filters",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets?type={{secret_type}}&tag={{tag}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "{{secret_type}}"
                },
                {
                  "key": "tag",
                  "value": "{{tag}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "List allowed secret types and required keys",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/allowed/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "allowed",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret AWS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3679fad9-1b76-4af5-9243-c373e7702416",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My amazon secret\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AWS_ACCESS_KEY_ID}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AWS_SECRET_ACCESS_KEY}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret AKS",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c055c023-08ab-444a-a90e-3aa60c6713f7",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My azure secret\",\n\t\"type\": \"azure\",\n\t\"values\": {\n\t\t\"AZURE_CLIENT_ID\": \"{{AZURE_CLIENT_ID}}\",\n\t\t\"AZURE_CLIENT_SECRET\": \"{{AZURE_CLIENT_SECRET}}\",\n\t\t\"AZURE_TENANT_ID\": \"{{AZURE_TENANT_ID}}\",\n\t\t\"AZURE_SUBSCRIPTION_ID\": \"{{AZURE_SUBSCRIPTION_ID}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret GKE",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e33bbef3-47de-4134-b439-9e7d7caf6af1",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My google secret\",\n\t\"type\": \"google\",\n\t\"values\": {\n\t\t\"type\": \"{{gke_type}}\",\n\t\t\"project_id\": \"{{gke-projectId}}\",\n\t\t\"private_key_id\": \"{{private_key_id}}\",\n\t\t\"private_key\": \"{{private_key}}\",\n\t\t\"client_email\": \"{{client_email}}\",\n\t\t\"client_id\": \"{{client_id}}\",\n\t\t\"auth_uri\": \"{{auth_uri}}\",\n\t\t\"token_uri\": \"{{token_uri}}\",\n\t\t\"auth_provider_x509_cert_url\": \"{{auth_provider_x509_cert_url}}\",\n\t\t\"client_x509_cert_url\": \"{{client_x509_cert_url}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret SSH",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f44f599f-cdfc-47cc-a21d-89e768b40b75",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My ssh secret\",\n\t\"type\": \"ssh\",\n\t\"values\": {\n\t\t\"identifier\": \"\",\n\t\t\"private_key_data\": \"\",\n\t\t\"public_key_data\": \"\",\n\t\t\"public_key_fingerprint\": \"\",\n\t\t\"user\": \"\"\n\t}\n}\n"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret KUBERNETES",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "efde9636-a9d8-474f-9bad-29904bc8dd82",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My kubernetes secret\",\n\t\"type\": \"kubernetes\",\n\t\"values\": {\n\t\t\"K8Sconfig\": \"{{K8Sconfig}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add secret Generic",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff12d199-301b-4295-9a35-e45d138966ba",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 201) {",
                  "    tests[\"Response Code 201\"] = responseCode.code == 201;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My generic secret, which is Docker in this example\",\n\t\"type\": \"generic\",\n\t\"values\": {\n\t\t\"DOCKER_USERNAME\": \"{{DockerUsername}}\",\n\t\t\"DOCKER_PASSWORD\": \"{{DockerPassword}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete secret",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f67f8eb9-7691-4bd3-90ce-5d91bbef9b48",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 204) {",
                  "    tests[\"Response Code 204\"] = responseCode.code == 204;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets",
                "{{secret_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update secret",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e1ceffc9-d5dd-4e05-a224-2511b893134c",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"secret_id\", dataJSON.secret_id);",
                  "    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"My amazon secret\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AWS_ACCESS_KEY_ID}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AWS_SECRET_ACCESS_KEY}}\"\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "secrets",
                "{{secret_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Organization",
      "description": null,
      "item": [
        {
          "name": "List organizations",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc286fb5-ff2e-4a71-880f-9dac2ba84484",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc286fb5-ff2e-4a71-880f-9dac2ba84484",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a093e930-5f6c-486c-a0cd-4355bb5f61de",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "",
                  "    pm.environment.set(\"timestampHeader\", new Date());",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    pm.environment.set(\"orgId\", dataJSON.id);",
                  "    tests[\"Org ID: \" + dataJSON.id] = true;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"{{organization_name}}\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete organization",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3ec8fcd0-b28c-4772-a4b4-9c280eb223b0",
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code === 204) {",
                  "    tests[\"Response Code 204\"] = responseCode.code == 204;",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    console.warn(responseBody);",
                  "    postman.setNextRequest(null);",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Auth",
      "description": null,
      "item": [
        {
          "name": "Generate token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9482b21b-a4e5-4135-9f66-a5c76a3f8d0a",
                "type": "text/javascript",
                "exec": [
                  "",
                  "if (responseCode.code === 200) {",
                  "    tests[\"Response Code 200\"] = responseCode.code == 200;",
                  "    var dataJSON = JSON.parse(responseBody);",
                  "    ",
                  "    pm.environment.set(\"token\", dataJSON.token);",
                  "",
                  "} else {",
                  "    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
                  "    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
                  "    postman.setNextRequest(null);",
                  "",
                  "}",
                  " ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/tokens",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "tokens"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User",
      "description": null,
      "item": [
        {
          "name": "Get users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/users",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "ObjectStore",
      "description": "",
      "item": [
        {
          "name": "CheckBucket",
          "request": {
            "method": "HEAD",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}/?cloudType={{cloudType}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets",
                "{{bucketName}}",
                ""
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "{{cloudType}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "ListBuckets Amazon",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=amazon&location={{am-location}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "amazon"
                },
                {
                  "key": "location",
                  "value": "{{am-location}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateBuckets Amazon",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateBuckets Azure",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"location\": \"\",\n\t\t\t\"storageAccount\": \"\",\n\t\t\t\"resourceGroup\": \"\"\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "CreateBuckets Google",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"google\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ]
            }
          },
          "response": []
        },
        {
          "name": "ListBuckets Azure",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=azure",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "azure"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "ListBuckets Google",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=google",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets"
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "google"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteBucket Google",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}/?cloudType=google",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets",
                "{{bucketName}}",
                ""
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "google"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteBucket Amazon",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}?cloudType=amazon",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets",
                "{{bucketName}}"
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "amazon"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "DeleteContainer Azure",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "secretId",
                "value": "{{secret_id}}"
              }
            ],
            "body": {},
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}?cloudType=azure&storageAccount={{az-storageAccount}}&resourceGroup={{az-resource-group}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "buckets",
                "{{bucketName}}"
              ],
              "query": [
                {
                  "key": "cloudType",
                  "value": "azure"
                },
                {
                  "key": "storageAccount",
                  "value": "{{az-storageAccount}}"
                },
                {
                  "key": "resourceGroup",
                  "value": "{{az-resource-group}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cloud info",
      "description": null,
      "item": [
        {
          "name": "Amazon",
          "description": null,
          "item": [
            {
              "name": "Get AWS cloud config",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "amazon"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AWS cloud config Locations",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"location\"]\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "amazon"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AWS cloud config Images",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"image\"],\n\t\t\"image\": {\n\t\t\t\"tags\": [\"0.3.0\"],\n\t\t\t\"location\": \"eu-west-1\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "amazon"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AWS cloud config NodeInstanceType",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [ \"instanceType\" ],\n\t\t\"instanceType\": {\n\t\t\t\"location\": \"eu-west-1\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "amazon"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AWS cloud config ALL field",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\n\t\t\t\"location\",\n\t\t\t\"image\",\n\t\t\t\"instanceType\"\n\t\t],\n\t\t\"image\": {\n\t\t\t\"tags\": [ \"0.3.0\" ],\n\t\t\t\"location\": \"eu-west-1\"\n\t\t},\n\t\t\"instanceType\": {\n\t\t\t\"location\": \"eu-west-1\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "amazon"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Azure",
          "description": null,
          "item": [
            {
              "name": "Get AKS cloud config",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "azure"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AKS cloud config Locations",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"location\"]\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "azure"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AKS cloud config NodeInsatnceTypes",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"instanceType\"],\n\t\t\"instanceType\":{\n\t\t\t\"location\": \"eastus\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "azure"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AKS cloud config Kubernetes version",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"k8sVersion\"],\n\t\t\"k8sVersion\":{\n\t\t\t\"location\": \"eastus\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "azure"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get AKS cloud config ALL field",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\n\t\t\t\"location\",\n\t\t\t\"instanceType\",\n\t\t\t\"k8sVersion\"\n\t\t],\n\t\t\"instanceType\":{\n\t\t\t\"location\": \"eastus\"\n\t\t},\n\t\t\"k8sVersion\": {\n\t\t\t\"location\": \"eastus\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "azure"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Google",
          "description": null,
          "item": [
            {
              "name": "Get GKE cloud config",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "google"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get GKE cloud config Locations",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"location\"]\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "google"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get GKE cloud config NodeInsatnceTypes",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"instanceType\"],\n\t\t\"instanceType\":{\n\t\t\t\"location\": \"asia-east1-a\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "google"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get GKE cloud config Kubernetes version",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"k8sVersion\"],\n\t\t\"k8sVersion\": {\n\t\t\t\"location\": \"us-central1-a\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "google"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get GKE cloud config ALL field",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\n\t\t\t\"location\",\n\t\t\t\"instanceType\",\n\t\t\t\"k8sVersion\"\n\t\t],\n\t\t\"instanceType\":{\n\t\t\t\"location\": \"asia-east1-a\"\n\t\t},\n\t\t\"k8sVersion\": {\n\t\t\t\"location\": \"us-central1-a\"\n\t\t}\n\t}\n}"
                },
                "url": {
                  "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "orgs",
                    "{{orgId}}",
                    "cloudinfo",
                    "google"
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Get supported clusters types",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"project_id\": \"colin-pipeline\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "cloudinfo"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get supported filter keys",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"project_id\": \"colin-pipeline\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/filters",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "cloudinfo",
                "filters"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Helm",
      "description": null,
      "item": [
        {
          "name": "Chart List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/charts",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "charts"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Chart Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/chart/{{repoName}}/{{chartName}}/{{chartVersion}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "chart",
                "{{repoName}}",
                "{{chartName}}",
                "{{chartVersion}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Repository List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "repos",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Repository Add",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "repos",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Repository Delete",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "repos",
                "{{repoName}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Repository Modify",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"cache\": \"statestore/colin014/helm/repository/cache/banzaicloud-stable-index.yaml\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\",\n\t\"username\": \"\",\n\t\"password\": \"\",\n\t\"certFile\": \"\",\n\t\"keyFile\": \"\",\n\t\"caFile\": \"\"\n}"
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "repos",
                "{{repoName}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Repository Update",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}/update",
              "host": [
                "{{url}}"
              ],
              "path": [
                "api",
                "v1",
                "orgs",
                "{{orgId}}",
                "helm",
                "repos",
                "{{repoName}}",
                "update"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Get API Endpoints",
      "request": {
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": ""
        },
        "url": {
          "raw": "{{url}}/api",
          "host": [
            "{{url}}"
          ],
          "path": [
            "api"
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "844556e1-147c-408f-b994-fd3b011a6c78",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "55d10152-fb2d-44b5-bc60-84727e00e928",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}
