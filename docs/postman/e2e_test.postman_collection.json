{
	"info": {
		"_postman_id": "6cac68a9-4904-4823-8789-04c4a7dd3fc9",
		"name": "End2End TEST Organizations",
		"description": "Collection for K8S Cluster CRUD operations through the Banzai Cloud Pipeline API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clusters",
			"item": [
				{
					"name": "Cluster Create ACSK",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec1e0fec-7aaa-47c4-8291-994bca7959f2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"alibabacluster-{{username}}-{{$randomInt}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"alibaba\",\n  \"secretId\": \"{{secretIdAlibaba}}\",\n  \"properties\": {\n        \"acsk\": {\n        \t\"regionId\": \"eu-central-1\",\n        \t\"zoneId\": \"eu-central-1a\",\n        \t\"masterInstanceType\": \"ecs.sn1ne.large\",\n        \t\"masterSystemDiskCategory\": \"cloud_efficiency\",\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"count\": 1,\n            \t\t\"image\": \"centos_7\",\n            \t\t\"instanceType\": \"ecs.sn1ne.large\",\n\t\t        \t\"systemDiskCategory\": \"cloud_efficiency\"\n            \t}\n            }\n        }\n    }\n}\n\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create EC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bc38499-b525-420a-afa8-90a014bd61c6",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"secretId\": \"{{secretIdAmazon}}\",\n  \"properties\": {\n        \"ec2\": {\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t                \"image\": \"ami-4d485ca7\"\t\n            \t}\n            },\n            \"master\": {\n                \"instanceType\": \"m4.xlarge\",\n                \"image\": \"ami-4d485ca7\"\n            }\n        }\n    }\n}\n\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create EKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e282e6c-9721-4751-b517-5c1dba9586c9",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"ekscluster-{{username}}-{{$randomInt}}\",\n  \"location\": \"us-west-2\",\n  \"cloud\": \"amazon\",\n  \"secretId\": \"{{secretIdAmazon}}\",\n  \"properties\": {\n        \"eks\": {\n\t\t\t\"version\":\"1.10\",\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"instanceType\": \"t2.medium\",\n\t            \t\"spotPrice\": \"0.2\",\n            \t\t\"autoscaling\": false,\n\t                \"minCount\": 1,\n\t                \"maxCount\": 1,\n            \t\t\"count\": 1,\n\t                \"image\": \"ami-0ea01e1d1dea65b5c\"\n            \t}\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eec597ba-2e63-4bb4-9290-0cc7c3893405",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"azcluster{{username}}{{$randomInt}}\",\n  \"location\": \"westeurope\",\n  \"cloud\": \"azure\",\n  \"secretId\": \"{{secretIdAzure}}\",\n  \"properties\": {\n        \"aks\": {\n        \t\"resourceGroup\": \"{{azResourceGroup}}\",\n        \t\"kubernetesVersion\": \"1.9.2\",\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                \t\"instanceType\": \"Standard_B2ms\"\n            \t},\n            \t\"pool2\": {\n            \t    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                \t\"instanceType\": \"Standard_B2ms\"\n            \t}\n        \t}\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Azure Container Service"
					},
					"response": []
				},
				{
					"name": "Cluster Create GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5232f70c-d178-436d-a992-b604d49c96f7",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"secretId\": \"{{secretIdGoogle}}\",\n    \"properties\": {\n        \"gke\": {\n            \"master\":{\n                \"version\":\"1.9\"\n            },\n            \"nodeVersion\":\"1.9\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n                    \"count\": 1,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "493fc410-642b-4a67-9918-15cba99924cf",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"okecluster-demo-{{$randomInt}}\",\n    \"location\": \"eu-frankfurt-1\",\n    \"cloud\": \"oracle\",\n    \"secretId\": \"{{secretIdOracle}}\",\n    \"properties\": {\n        \"oke\": {\n            \"version\":\"v1.9.7\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"count\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"general\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "133037c8-8f18-472a-9a41-b2e1f8d1ed0c",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"dummy-cluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"dummyLocation\",\n    \"instanceType\": \"dummyInstanceType\",\n    \"secretId\": \"{{secretIdDummy}}\",\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n            \n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create Kubernetes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ec41902-76cc-4855-a6bb-493efd481883",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"kubernetes-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdKubernetes}}\",\n\t\"cloud\": \"kubernetes\",\n\t\"properties\": {\n\t\t\"kubernetes\": {\n\t\t\t\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile EC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "280244b4-3d02-4c10-ad0a-b5c78395faa9",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdAmazon}}\",\n\t\"cloud\": \"amazon\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"ec2\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile EKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea0c7219-12a2-43e5-bc84-979f74bce0f9",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"ekscluster-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdAmazon}}\",\n\t\"cloud\": \"amazon\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"eks\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5253a61-08cb-4fe1-acbe-d6622a685dfe",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"azcluster{{username}}{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdAzure}}\",\n\t\"cloud\": \"azure\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"aks\": {\n            \"resourceGroup\": \"{{azResourceGroup}}\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Azure Container Service"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a546ae-1702-4c0e-adbb-aba4962a525b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdGoogle}}\",\n\t\"cloud\": \"google\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"gke\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96ce4b50-df4b-488b-abec-e2e8ac247241",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"okecluster-{{$randomInt}}\",\n\t\"secretId\": \"{{secretIdOracle}}\",\n\t\"cloud\": \"oracle\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"oke\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Update ACSK",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud\": \"alibaba\",\n  \"properties\": {\n        \"alibaba\": {\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"count\": 2\n            \t}\n            }\n        }\n    }\n}\n\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AWS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"aks\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update EC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"ec2\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n\t                \"image\": \"ami-4d485ca7\"\t\n            \t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AWS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update EKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"eks\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n            \t\t\"autoscaling\": true, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 3\n            \t},\n            \t\"newpool1\": {\n            \t\t\"autoscaling\": true, \n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n\t                \"image\": \"ami-0ea01e1d1dea65b5c\"\t\n            \t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AWS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud\": \"google\",\n  \"properties\": {\n    \"gke\": {\n       \"master\": {\n            \"version\": \"1.10\"\n      },\n      \"nodePools\": {\n        \"pool1\": {\n            \"autoscaling\": false, \n\t        \"minCount\": 1,\n\t        \"maxCount\": 2,\n            \"count\" : 2,\n            \"instanceType\": \"n1-standard-2\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cloud\": \"oracle\",\n    \"properties\": {\n        \"oke\": {\n            \"version\":\"v1.9.7\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"count\": 3,\n                \t\"labels\": {\n                \t\t\"type\": \"compute\"\n                \t}\n                },\n                \"pool2\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"count\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"compute\"\n                \t}\n                }\n            }\n        }\n    }\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n        \t\"node\": {\n            \t\"count\": 2\n        \t}\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Helm init",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 201;",
									"    tests[\"Valid message\"] = dataJSON.message == \"helm initialising\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"namespace\": \"kube-system\",\n  \"service_account\": \"tiller\",\n  \"tiller_image\": \"gcr.io/kubernetes-helm/tiller:v2.7.2\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/helminit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"helminit"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Initialize helm in the cluster"
					},
					"response": []
				},
				{
					"name": "Install secrets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 201;",
									"    tests[\"Valid message\"] = dataJSON.message == \"helm initialising\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"namespace\": \"default\",\n  \"query\": {\n    \"tag\": \"\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"secrets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Initialize helm in the cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Delete  FakeID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 404) {",
									"    tests[\"Response Code 404\"] = responseCode.code == 404;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid Message\"] = dataJSON.message == \"Cluster not found\";",
									"    tests[\"Valid Error\"] = dataJSON.error == \"record not found\";",
									"    tests[\"Valid code\"] = dataJSON.code == \"404\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/31231231241231231231321",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								"31231231241231231231321"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Delete a K8S cluster from the cloud, cleans up resources"
					},
					"response": []
				},
				{
					"name": "Cluster Delete ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(155679)",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" "
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Delete a K8S cluster from the cloud, cleans up resources"
					},
					"response": []
				},
				{
					"name": "Get cluster status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45a59709-e59d-4448-a5c2-b7b9fda53c6d",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Valid id\"] = dataJSON.id == environment.clusterId;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"}",
									"else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Fetch cluster Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"}",
									"else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/details",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"details"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Fetch cluster pod details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ebb239a-0b70-43c7-ad0e-f64f0fa13132",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"clusterId\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Valid id\"] = dataJSON.id == environment.clusterId;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"}",
									"else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/pods",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"pods"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Get cluster nodes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"nodes"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Cluster List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Get the cluster details"
					},
					"response": []
				},
				{
					"name": "Cluster Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/config",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"config"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get the cluster configuration file"
					},
					"response": []
				},
				{
					"name": "Cluster Public Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/endpoints",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"endpoints"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Cluster API endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/apiendpoint",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"apiendpoint"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Update monitoring",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/monitoring",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"monitoring"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Re-run cluster posthooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"InstallLogging\": {\n    \t\"bucketName\": \"\",\n    \t\"region\": \"\",\n    \t\"secretId\": \"\",\n       \t\"tls\": {\n       \t\t\"tlsEnabled\": true,\n            \"genTlsSecretName\": \"loggingSecret\",\n            \"namespace\": \"default\",\n            \"tlsHost\": \"fluent\"\n       \t}\n    }\t\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/posthooks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"posthooks"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get the cluster configuration file"
					},
					"response": []
				},
				{
					"name": "Get cluster applications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/application",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"application"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster applications"
					},
					"response": []
				},
				{
					"name": "Cluster Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"     postman.setNextRequest(\"Cluster Info\");",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 1\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get cluster status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "Catalog List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/catalogs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"catalogs"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Catalog Details",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/catalogs/:chartName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"catalogs",
								":chartName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "chartName",
									"value": "zeppelin",
									"description": "Chart name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deployments",
			"item": [
				{
					"name": "Deployment Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cec26eef-9547-46b5-9589-cc474849de06",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"",
									"    pm.environment.set(\"deploymentName\", dataJSON.releaseName);",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable/drone\",\n\t\"values\": {\n\t\t\"server\": {\n\t\t\t\"persistentVolume\": {\n\t\t\t\t\"enabled\": false\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Create a helm deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Create Fake APP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 404) {",
									"    tests[\"Response Code 404\"] = responseCode.code == 404;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid Message\"] = /^Error loading chart: stat \\/opt\\/helm\\/.*.no such file or directory$/.test(dataJSON.message);",
									"    tests[\"Valid code\"] = dataJSON.status == \"404\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"pokol_app\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Create a helm deployment"
					},
					"response": []
				},
				{
					"name": "List Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"banzaicloud-stable/drone\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "List helm deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Init Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 2\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Get deployment status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Deployment",
			"item": [
				{
					"name": "Deployment app Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 3\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments/:deploymentName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments",
								":deploymentName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								},
								{
									"key": "deploymentName",
									"value": "{{deploymentName}}",
									"description": "Deployment name"
								}
							]
						},
						"description": "Get deployment app status"
					},
					"response": []
				},
				{
					"name": "Deployment Upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 501) {",
									"    tests[\"Response Code 501\"] = responseCode.code == 501;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments/:deploymentName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments",
								":deploymentName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								},
								{
									"key": "deploymentName",
									"value": "{{deploymentName}}",
									"description": "Deployment name"
								}
							]
						},
						"description": "Upgrades an existing deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Delete ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48669766-e2df-48b2-982c-7480fa70ef88",
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    ",
									"    var dataJSON = JSON.parse(responseBody);",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 200;",
									"    tests[\"Valid message\"] = dataJSON.message == \"Deployment deleted!\";",
									"    tests[\"Valid name\"] = dataJSON.name == environment.deploymentName;",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" "
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments/:deploymentName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments",
								":deploymentName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								},
								{
									"key": "deploymentName",
									"value": "{{deploymentName}}",
									"description": "Deployment name"
								}
							]
						},
						"description": "Delete Deployment\n"
					},
					"response": []
				},
				{
					"name": "Deployment Delete  FakeAPP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 400) {",
									"    tests[\"Response Code 400\"] = responseCode.code == 400;",
									"    ",
									"    var dataJSON = JSON.parse(responseBody);",
									"    console.log(dataJSON)",
									"    tests[\"Valid code\"] = dataJSON.code == 400;",
									"    tests[\"Valid message\"] = dataJSON.message == \"Error deleting deployment\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments/pokollll-appp",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments",
								"pokollll-appp"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								}
							]
						},
						"description": "Delete Deployment\n"
					},
					"response": []
				},
				{
					"name": "Deployment Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/clusters/:clusterId/deployments/:deploymentName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"clusters",
								":clusterId",
								"deployments",
								":deploymentName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "clusterId",
									"value": "{{clusterId}}",
									"description": "Cluster identifier"
								},
								{
									"key": "deploymentName",
									"value": "{{deploymentName}}",
									"description": "Deployment name"
								}
							]
						},
						"description": "Get Deployment details\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Create Profile EC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profileName}}\",\n\t\"location\": \"eu-west-1\",\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"ec2\": {\n\t\t\t\"master\": {\n\t\t\t\t\"instanceType\": \"m4.xlarge\",\n\t\t\t\t\"image\": \"ami-4d485ca7\"\n\t\t\t},\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"instanceType\": \"m4.xlarge\",\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t\t\t\t\t\"image\": \"ami-4d485ca7\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Create an Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Create Profile EKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profileName}}\",\n\t\"location\": \"us-west-2\",\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"eks\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"instanceType\": \"m4.xlarge\",\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t\t\t\t\t\"image\": \"ami-0ea01e1d1dea65b5c\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Create an Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Create Profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profileName}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"aks\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t},\n\t\t\t\t\"pool2\": {\n\t\t\t\t\t\"autoscaling\": false, \n\t                \"minCount\": 2,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 2,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Create an Azure Container Service profile"
					},
					"response": []
				},
				{
					"name": "Create Profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profileName}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"gke\": {\n            \"master\":{\n                \"version\":\"1.10\"\n            },\n            \"nodeVersion\":\"1.10\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                    \"instanceType\": \"n1-standard-2\"\n                },\n                \"pool2\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 2,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 2,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Create a Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Create Profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profileName}}\",\n    \"cloud\": \"oracle\",\n    \"location\": \"eu-frankfurt-1\",\n    \"properties\": {\n        \"oke\": {\n            \"version\":\"v1.9.7\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"count\": 3,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"small-compute\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Create a Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Update Profile EC2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{profileName}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"instanceType\": \"m4.xlarge\",\n  \"properties\": {\n    \"ec2\": {\n      \"master\": {\n        \"instanceType\": \"m4.xlarge\",\n        \"image\": \"ami-4d485ca7\"\n      },\n      \"node\": {\n        \"spotPrice\": \"0.2\",\n        \"minCount\": 2,\n        \"maxCount\": 4,\n        \"image\": \"ami-4d485ca7\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization Identifier"
								}
							]
						},
						"description": "Update an existing Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Update Profile EKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{profileName}}\",\n  \"location\": \"us-west-2\",\n  \"cloud\": \"amazon\",\n  \"instanceType\": \"m4.xlarge\",\n  \"properties\": {\n    \"eks\": {\n      \"node\": {\n        \"spotPrice\": \"0.2\",\n        \"minCount\": 2,\n        \"maxCount\": 4,\n        \"image\": \"ami-0ea01e1d1dea65b5c\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Update an existing Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Update Profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profileName}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"aks\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Update an existing Azure Container Service profile"
					},
					"response": []
				},
				{
					"name": "Update Profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profileName}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"gke\": {\n            \"master\":{\n                \"version\":\"1.10\"\n            },\n            \"nodeVersion\":\"1.10\",\n            \"nodePools\": {\n                \"pool2\": {\n                    \"count\": 2,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Update an existing Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Update Profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profileName}}\",\n    \"cloud\": \"oracle\",\n    \"location\": \"eu-frankfurt-1\",\n    \"properties\": {\n        \"oke\": {\n            \"version\":\"v1.9.7\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"count\": 2,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"small-compute\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						},
						"description": "Update an existing Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "List profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster/:distributionType",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster",
								":distributionType"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "distributionType",
									"value": "{{distributionType}}",
									"description": "Profile's distribution type"
								}
							]
						},
						"description": "List the stored cluster profiles in pipeline"
					},
					"response": []
				},
				{
					"name": "Delete profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    postman.setNextRequest(\"List profiles\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/profiles/cluster/:distributionType/:profileName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"profiles",
								"cluster",
								":distributionType",
								":profileName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "distributionType",
									"value": "{{distributionType}}",
									"description": "Profile's distribution type"
								},
								{
									"key": "profileName",
									"value": "{{profileName}}",
									"description": "Profile's name"
								}
							]
						},
						"description": "Delete an existing cluster profile"
					},
					"response": []
				}
			]
		},
		{
			"name": "Secrets",
			"item": [
				{
					"name": "Alibaba",
					"item": [
						{
							"name": "Add secret Alibaba",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "758c2ef0-cdc6-48d9-8dd5-566c984e5b6a",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAlibaba\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-alibaba-secret-{{$randomInt}}\",\n\t\"type\": \"alibaba\",\n\t\"values\": {\n\t\t\"ALIBABA_ACCESS_KEY_ID\": \"{{AlibabaAccessKeyId}}\",\n\t\t\"ALIBABA_ACCESS_KEY_SECRET\": \"{{AlibabaAccessKeySecret}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Alibaba",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7954c6e-e811-417f-b9e2-eaca0ffce6b5",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAlibaba\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-alibaba-secret-{{$randomInt}}\",\n\t\"type\": \"alibaba\",\n\t\"values\": {\n\t\t\"ALIBABA_ACCESS_KEY_ID\": \"{{AlibabaAccessKeyId}}\",\n\t\t\"ALIBABA_ACCESS_KEY_SECRET\": \"{{AlibabaAccessKeySecret}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAlibaba",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAlibaba"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAlibaba",
											"value": "{{secretIdAlibaba}}",
											"description": "Secret identifier to Alibaba"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Alibaba",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAlibaba",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAlibaba"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAlibaba",
											"value": "{{secretIdAlibaba}}",
											"description": "Secret identifier to Alibaba"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate secret Alibaba",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAlibaba/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAlibaba",
										"validate"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAlibaba",
											"value": "{{secretIdAlibaba}}",
											"description": "Secret identifier to Alibaba"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Alibaba",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAlibaba",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAlibaba"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAlibaba",
											"value": "{{secretIdAlibaba}}",
											"description": "Secret identifier to Alibaba"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Amazon",
					"item": [
						{
							"name": "Add secret Amazon",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8038499-7141-4481-a069-f143b3278ce7",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAmazon\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-amazon-secret-{{$randomInt}}\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AwsAccessKeyId}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AwsSecretAccessKey}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Amazon",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ceca44e-7ae2-436b-bfa8-8ce82720960f",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAmazon\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-amazon-secret-{{$randomInt}}\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AwsAccessKeyId}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AwsSecretAccessKey}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAmazon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAmazon"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAmazon",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier to EC2 and EKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Amazon",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAmazon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAmazon"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAmazon",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier to EC2 and EKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate secret Amazon",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAmazon/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAmazon",
										"validate"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAmazon",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier to EC2 and EKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Amazon",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAmazon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAmazon"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAmazon",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier to EC2 and EKS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Azure",
					"item": [
						{
							"name": "Add secret Azure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff48f571-d053-4776-b424-99ff9aa93cae",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAzure\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-azure-secret-{{$randomInt}}\",\n\t\"type\": \"azure\",\n\t\"values\": {\n\t\t\"AZURE_CLIENT_ID\": \"{{AzureClientId}}\",\n\t\t\"AZURE_CLIENT_SECRET\": \"{{AzureClientSecret}}\",\n\t\t\"AZURE_TENANT_ID\": \"{{AzureTenantId}}\",\n\t\t\"AZURE_SUBSCRIPTION_ID\": \"{{AzureSubscriptionId}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Azure",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "544955ee-57a2-4f57-9bbf-b66ec9ecc937",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdAzure\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-azure-secret-{{$randomInt}}\",\n\t\"type\": \"azure\",\n\t\"values\": {\n\t\t\"AZURE_CLIENT_ID\": \"{{AzureClientId}}\",\n\t\t\"AZURE_CLIENT_SECRET\": \"{{AzureClientSecret}}\",\n\t\t\"AZURE_TENANT_ID\": \"{{AzureTenantId}}\",\n\t\t\"AZURE_SUBSCRIPTION_ID\": \"{{AzureSubscriptionId}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAzure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAzure"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAzure",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier to AKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Azure",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAzure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAzure"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAzure",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier to AKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate secret Azure",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAzure/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAzure",
										"validate"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAzure",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier to AKS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Azure",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdAzure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdAzure"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdAzure",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier to AKS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Google",
					"item": [
						{
							"name": "Add secret Google",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93563df6-0e89-4844-b1af-c3fc00c54d00",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdGoogle\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-google-secret-{{$randomInt}}\",\n\t\"type\": \"google\",\n\t\"values\": {\n\t\t\"type\": \"{{googleType}}\",\n\t\t\"project_id\": \"{{googleProjectId}}\",\n\t\t\"private_key_id\": \"{{googlePrivateKeyId}}\",\n\t\t\"private_key\": \"{{googlePrivateKey}}\",\n\t\t\"client_email\": \"{{googleClientEmail}}\",\n\t\t\"client_id\": \"{{googleClientId}}\",\n\t\t\"auth_uri\": \"{{googleAuthUri}}\",\n\t\t\"token_uri\": \"{{googleTokenUri}}\",\n\t\t\"auth_provider_x509_cert_url\": \"{{googleAuthProviderX509CertUrl}}\",\n\t\t\"client_x509_cert_url\": \"{{googleClientX509CertUrl}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Google",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "145d663b-3497-4b6d-bc7e-9b74a8e52e89",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdGoogle\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-google-secret-{{$randomInt}}\",\n\t\"type\": \"google\",\n\t\"values\": {\n\t\t\"type\": \"{{googleType}}\",\n\t\t\"project_id\": \"{{googleProjectId}}\",\n\t\t\"private_key_id\": \"{{googlePrivateKeyId}}\",\n\t\t\"private_key\": \"{{googlePrivateKey}}\",\n\t\t\"client_email\": \"{{googleClientEmail}}\",\n\t\t\"client_id\": \"{{googleClientId}}\",\n\t\t\"auth_uri\": \"{{googleAuthUri}}\",\n\t\t\"token_uri\": \"{{googleTokenUri}}\",\n\t\t\"auth_provider_x509_cert_url\": \"{{googleAuthProviderX509CertUrl}}\",\n\t\t\"client_x509_cert_url\": \"{{googleClientX509CertUrl}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGoogle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGoogle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGoogle",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier to GKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Google",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGoogle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGoogle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGoogle",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier to GKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate secret Google",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGoogle/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGoogle",
										"validate"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGoogle",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier to GKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Google",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGoogle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGoogle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGoogle",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier to GKE"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Oracle",
					"item": [
						{
							"name": "Add secret Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94ae9819-7f2d-41a0-99f7-575a3cafe154",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdOracle\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-oci-secret-{{$randomInt}}\",\n\t\"type\": \"oracle\",\n\t\"version\": 1,\n\t\"values\": {\n\t\t\"user_ocid\": \"{{oracleUserOcid}}\",\n\t\t\"api_key_fingerprint\": \"{{oracleApiKeyFingerprint}}\",\n\t\t\"api_key\": \"{{oracleApiKey}}\",\n\t\t\"region\": \"{{oracleRegion}}\",\n\t\t\"compartment_ocid\": \"{{oracleCompartmentOcid}}\",\n\t\t\"tenancy_ocid\": \"{{oracleTenancyOcid}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Google",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c007d41-46be-455b-b772-c873cf1877fa",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdOracle\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-oci-secret-{{$randomInt}}\",\n\t\"type\": \"oracle\",\n\t\"values\": {\n\t\t\"user_ocid\": \"{{oracleUserOcid}}\",\n\t\t\"api_key_fingerprint\": \"{{oracleApiKeyFingerprint}}\",\n\t\t\"api_key\": \"{{oracleApiKey}}\",\n\t\t\"region\": \"{{oracleRegion}}\",\n\t\t\"compartment_ocid\": \"{{oracleCompartmentOcid}}\",\n\t\t\"tenancy_ocid\": \"{{oracleTenancyOcid}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdOracle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdOracle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdOracle",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier to OKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Oracle",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdOracle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdOracle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdOracle",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier to OKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate secret Oracle",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdOracle/validate",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdOracle",
										"validate"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdOracle",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier to OKE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdOracle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdOracle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdOracle",
											"value": "{{secretIdOracle}}",
											"description": "Secret idetntifier to OKE"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Kubernetes",
					"item": [
						{
							"name": "Add secret Kubernetes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b16fbe4-a3e2-4fef-b590-ea30a7193575",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdKubernetes\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-kubernetes-secret-{{$randomInt}}\",\n\t\"type\": \"kubernetes\",\n\t\"values\": {\n\t\t\"K8Sconfig\": \"{{K8Sconfig}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22e6717c-a297-4229-9df5-85953ba2141f",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdKubernetes\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \t\"name\": \"my-tls-secret-{{$randomInt}}\",\n\t\"type\": \"tls\",\n\t\"values\": {\n\t\t\"hosts\": \"localhost\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdKubernetes",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdKubernetes"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdKubernetes",
											"value": "{{secretIdKubernetes}}",
											"description": "Secret identifier to Kubernetes"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Kubernetes",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdKubernetes",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdKubernetes"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdKubernetes",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Kubernetes",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdKubernetes",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdKubernetes"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdKubernetes",
											"value": "{{secretIdKubernetes}}",
											"description": "Secret identifier to Kubernetes"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "TLS",
					"item": [
						{
							"name": "Add secret TLS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c2c2479-6325-463e-a157-d3e264590ce9",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdTLS\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-tls-secret-{{$randomInt}}\",\n\t\"type\": \"tls\",\n\t\"values\": {\n\t\t\"hosts\": \"localhost\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret TLS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57ba72a3-3614-4853-a228-6ce1f2078617",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdTLS\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \t\"name\": \"my-tls-secret-{{$randomInt}}\",\n\t\"type\": \"tls\",\n\t\"values\": {\n\t\t\"hosts\": \"localhost\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdTLS",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdTLS"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdTLS",
											"value": "{{secretIdTLS}}",
											"description": "Secret identifier to TLS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret TLS",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdTLS",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdTLS"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdTLS",
											"value": "{{secretIdTLS}}",
											"description": "Secret identifier to TLS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret TLS",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdTLS",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdTLS"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdTLS",
											"value": "{{secretIdTLS}}",
											"description": "Secret identifier to TLS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Password",
					"item": [
						{
							"name": "Add secret Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54896135-96fa-4ebe-b872-ab3ebb7068b8",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdPassword\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-password-secret-{{$randomInt}}\",\n\t\"type\": \"password\",\n\t\"values\": {\n\t\t\"username\": \"root\",\n\t\t\"password\": \"randAlpha,16\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8cb2b0a-3fdf-40e0-b364-13506a2c040d",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdPassword\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-password-secret-{{$randomInt}}\",\n\t\"type\": \"password\",\n\t\"values\": {\n\t\t\"username\": \"root\",\n\t\t\"password\": \"randAlpha,16\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdPassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdPassword"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdPassword",
											"value": "{{secretIdPassword}}",
											"description": "Secret identifier to Password"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Password",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdPassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdPassword"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdPassword",
											"value": "{{secretIdPassword}}",
											"description": "Secret identifier to Password"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdPassword",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdPassword"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdPassword",
											"value": "{{secretIdPassword}}",
											"description": "Secret identifier to Password"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Generic",
					"item": [
						{
							"name": "Add secret Generic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "412dae10-a46f-4cd7-ae70-d13549e1a196",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdGeneric\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-generic-secret-which-is-Docker-in-this-example-{{$randomInt}}\",\n\t\"type\": \"generic\",\n\t\"values\": {\n\t\t\"DOCKER_USERNAME\": \"{{DockerUsername}}\",\n\t\t\"DOCKER_PASSWORD\": \"{{DockerPassword}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update secret Generic",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c8d97eb-4f8d-4a3a-9e8f-bf9313751e1f",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 200) {",
											"    tests[\"Response Code 200\"] = responseCode.code == 200;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdGeneric\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-generic-secret-which-is-Docker-in-this-example-{{$randomInt}}\",\n\t\"type\": \"generic\",\n\t\"values\": {\n\t\t\"DOCKER_USERNAME\": \"{{DockerUsername}}\",\n\t\t\"DOCKER_PASSWORD\": \"{{DockerPassword}}\"\n\t},\n\t\"version\": 1\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGeneric",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGeneric"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGeneric",
											"value": "{{secretIdGeneric}}",
											"description": "Secret identifier to Generic"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret Generic",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGeneric",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGeneric"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGeneric",
											"value": "{{secretIdGeneric}}",
											"description": "Secret identifier to Generic"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret Generic",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdGeneric",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdGeneric"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdGeneric",
											"value": "{{secretIdGeneric}}",
											"description": "Secret identifier to Generic"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SSH",
					"item": [
						{
							"name": "Add secret SSH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cb61d25-1bb3-42b7-85ff-c3555b409fd2",
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 201) {",
											"    tests[\"Response Code 201\"] = responseCode.code == 201;",
											"",
											"    pm.environment.set(\"timestampHeader\", new Date());",
											"    var dataJSON = JSON.parse(responseBody);",
											"    pm.environment.set(\"secretIdSSH\", dataJSON.id);",
											"    tests[\"Secret ID: \" + dataJSON.id] = true;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"my-ssh-secret-{{$randomInt}}\",\n\t\"type\": \"ssh\",\n\t\"values\": {\n\t\t\"identifier\": \"\",\n\t\t\"private_key_data\": \"\",\n\t\t\"public_key_data\": \"\",\n\t\t\"public_key_fingerprint\": \"\",\n\t\t\"user\": \"\"\n\t}\n}\n"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get secret SSH",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdSSH",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdSSH"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdSSH",
											"value": "{{secretIdSSH}}",
											"description": "Secret identifier to SSH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete secret SSH",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (responseCode.code === 204) {",
											"    tests[\"Response Code 204\"] = responseCode.code == 204;",
											"} else {",
											"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
											"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
											"    console.warn(responseBody);",
											"    postman.setNextRequest(null);",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/secrets/:secretIdSSH",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"secrets",
										":secretIdSSH"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										},
										{
											"key": "secretIdSSH",
											"value": "{{secretIdSSH}}",
											"description": "Secret identifier to SSH"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "List secret",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"secrets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List secret with filters",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/secrets?type={{secretType}}&tag={{tag}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"secrets"
							],
							"query": [
								{
									"key": "type",
									"value": "{{secretType}}",
									"description": "Cloud type"
								},
								{
									"key": "tag",
									"value": "{{tag}}",
									"description": "Secret's tag"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List allowed secret types and required keys",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/allowed/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"allowed",
								"secrets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "List organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"orgId\", dataJSON.id);",
									"    tests[\"Org ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{organizationName}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 204) {",
									"    tests[\"Response Code 204\"] = responseCode.code == 204;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    pm.environment.set(\"token\", dataJSON.token);",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get users",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"users"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add users to organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/users/:userId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "userId",
									"value": "{{userId}}",
									"description": "User identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ObjectStore",
			"item": [
				{
					"name": "CheckBucket",
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdGoogle}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets/:bucketName/?cloudType={{cloudType}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets",
								":bucketName",
								""
							],
							"query": [
								{
									"key": "cloudType",
									"value": "{{cloudType}}",
									"description": "Bucket's cloud type"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "bucketName",
									"value": "{{bucketName}}",
									"description": "Bucket name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Amazon",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAmazon}}",
								"description": "Secret identifier"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secretId\": \"{{secretIdAmazon}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Azure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAzure}}",
								"description": "Secert identifier"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secretId\": \"{{secretIdAzure}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"location\": \"\",\n\t\t\t\"storageAccount\": \"\",\n\t\t\t\"resourceGroup\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Google",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdGoogle}}",
								"description": "Secret identifier"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secretId\": \"{{secretIdGoogle}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"google\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Oracle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdOracle}}",
								"description": "Secret identifier"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secretId\": \"{{secretIdOracle}}\",\n\t\"name\": \"bbb\",\n\t\"properties\": {\n\t\t\"oracle\": {\n\t\t\t\"location\": \"eu-frankfurt-1\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Amazon",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAmazon}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets?cloudType=amazon&location={{amLocation}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "amazon",
									"description": "Bucket's cloud: Amazon"
								},
								{
									"key": "location",
									"value": "{{amLocation}}",
									"description": "Location of the buckets"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Azure",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAzure}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets?cloudType=azure",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "azure",
									"description": "Bucket's cloud: Azure"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Google",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdGoogle}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets?cloudType=google",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "google",
									"description": "Bucket's cloud: Google"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Oracle",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdOracle}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets?cloudType=oracle",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "oracle",
									"description": "Bucket's cloud: Oracle"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Amazon",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAmazon}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets/:bucketName?cloudType=amazon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets",
								":bucketName"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "amazon",
									"description": "Bucket's cloud: Amazon"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "bucketName",
									"value": "{{bucketName}}",
									"description": "Bucket's name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteContainer Azure",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAzure}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets/:bucketName?cloudType=azure&storageAccount={{azStorageAccount}}&resourceGroup={{azResourceGroup}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets",
								":bucketName"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "azure",
									"description": "Bucket's cloud: Azure"
								},
								{
									"key": "storageAccount",
									"value": "{{azStorageAccount}}",
									"description": "Storage account name"
								},
								{
									"key": "resourceGroup",
									"value": "{{azResourceGroup}}",
									"description": "Resource group name"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "bucketName",
									"value": "{{bucketName}}",
									"description": "Bucket's name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Google",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdGoogle}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets/:bucketName/?cloudType=google",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets",
								":bucketName",
								""
							],
							"query": [
								{
									"key": "cloudType",
									"value": "google",
									"description": "Bucket's cloud: Google"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "bucketName",
									"value": "{{bucketName}}",
									"description": "Bucket's name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Oracle",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdOracle}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/buckets/:bucketName?cloudType=oracle&location=eu-frankfurt-1",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"buckets",
								":bucketName"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "oracle",
									"description": "Bucket's cloud: Oracle"
								},
								{
									"key": "location",
									"value": "eu-frankfurt-1",
									"description": "Location of the buckets"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "bucketName",
									"value": "{{bucketName}}",
									"description": "Bucket name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Helm",
			"item": [
				{
					"name": "Chart List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/charts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"charts"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Chart Details",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/chart/:repoName/:chartName?version={{chartVersion}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"chart",
								":repoName",
								":chartName"
							],
							"query": [
								{
									"key": "version",
									"value": "{{chartVersion}}",
									"description": "Chart version"
								}
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "repoName",
									"value": "{{repoName}}",
									"description": "Repository name"
								},
								{
									"key": "chartName",
									"value": "{{chartName}}",
									"description": "Chart name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/repos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"repos",
								""
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/repos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"repos",
								""
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/repos/:repoName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"repos",
								":repoName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "repoName",
									"value": "{{repoName}}",
									"description": "Repository name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Modify",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"cache\": \"statestore/colin014/helm/repository/cache/banzaicloud-stable-index.yaml\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\",\n\t\"username\": \"\",\n\t\"password\": \"\",\n\t\"certFile\": \"\",\n\t\"keyFile\": \"\",\n\t\"caFile\": \"\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/repos/:repoName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"repos",
								":repoName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "repoName",
									"value": "{{repoName}}",
									"description": "Repository name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/helm/repos/:repoName/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"helm",
								"repos",
								":repoName",
								"update"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "repoName",
									"value": "{{repoName}}",
									"description": "Repository name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cloud info",
			"item": [
				{
					"name": "Amazon",
					"item": [
						{
							"name": "Get Amazon cloud config",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/amazon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"amazon"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Amazon cloud config Locations",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/amazon?fields=location",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Amazon cloud config Images",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/amazon?fields=image&tags=0.3.0&location=eu-west-1&secret_id={{secretIdAmazon}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "image",
											"description": "Filter for"
										},
										{
											"key": "tags",
											"value": "0.3.0",
											"description": "Image tags"
										},
										{
											"key": "location",
											"value": "eu-west-1",
											"description": "Image location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Amazon cloud config InstanceType",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/amazon?fields=instanceType&location=eu-west-1&secret_id={{secretIdAmazon}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eu-west-1",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Amazon cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/amazon?fields=location&fields=image&fields=instanceType&tags=0.3.0&location=eu-west-1&secret_id={{secretIdAmazon}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "image",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "tags",
											"value": "0.3.0",
											"description": "Image tags"
										},
										{
											"key": "location",
											"value": "eu-west-1",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAmazon}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Azure",
					"item": [
						{
							"name": "Get Azure cloud config",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/azure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"azure"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Azure cloud config Locations",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/azure?fields=location&secret_id={{secretIdAzure}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Azure cloud config NodeInsatnceTypes",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/azure?fields=instanceType&location=eastus&secret_id={{secretIdAzure}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eastus",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Azure cloud config Kubernetes version",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/azure?fields=k8sVersion&location=eastus&secret_id={{secretIdAzure}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eastus",
											"description": "K8S version location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Azure cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/azure?fields=location&fields=instanceType&fields=k8sVersion&location=eastus&secret_id={{secretIdAzure}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eastus",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdAzure}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Google",
					"item": [
						{
							"name": "Get Google cloud config",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/google",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"google"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Google cloud config Locations",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/google?fields=location&secret_id={{secretIdGoogle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filters for"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Google cloud config InsatnceTypes",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/google?fields=instanceType&location=asia-east1-a&secret_id={{secretIdGoogle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "asia-east1-a",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Google cloud config Kubernetes version",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/google?fields=k8sVersion&location=us-central1-a&secret_id={{secretIdGoogle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "us-central1-a",
											"description": "K8S version location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Google cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/google?fields=location&fields=instanceType&fields=k8sVersion&location=us-central1-a&secret_id={{secretIdGoogle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "us-central1-a",
											"description": "K8S version location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdGoogle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Oracle",
					"item": [
						{
							"name": "Get Oracle cloud config",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Oracle cloud config Locations",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle?fields=location&secret_id={{secretIdOracle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Oracle cloud config Images",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle?fields=image&location=eu-frankfurt-1&secret_id={{secretIdOracle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"query": [
										{
											"key": "fields",
											"value": "image",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eu-frankfurt-1",
											"description": "Image location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Oracle cloud config InstanceType",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle?fields=instanceType&location=eu-frankfurt-1&secret_id={{secretIdOracle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eu-frankfurt-1",
											"description": "Instance type location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Oracle cloud config Kubernetes version",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle?fields=k8sVersion&location=eu-frankfurt-1&secret_id={{secretIdOracle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"query": [
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "eu-frankfurt-1",
											"description": "K8S version location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Oracle cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo/oracle?fields=location&fields=instanceType&fields=k8sVersion&fields=image&location=us-ashburn-1&secret_id={{secretIdOracle}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										":orgId",
										"cloudinfo",
										"oracle"
									],
									"query": [
										{
											"key": "fields",
											"value": "location",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "instanceType",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "k8sVersion",
											"description": "Filter for"
										},
										{
											"key": "fields",
											"value": "image",
											"description": "Filter for"
										},
										{
											"key": "location",
											"value": "us-ashburn-1",
											"description": "K8S version location"
										},
										{
											"key": "secret_id",
											"value": "{{secretIdOracle}}",
											"description": "Secret identifier"
										}
									],
									"variable": [
										{
											"key": "orgId",
											"value": "{{orgId}}",
											"description": "Organization identifier"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get supported clusters types",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"project_id\": \"colin-pipeline\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/cloudinfo",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"cloudinfo"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Applications",
			"item": [
				{
					"name": "Application List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/applications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"applications"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"MyApplication\",\n  \"catalogName\": \"mysql-simple\",\n  \"clusterId\": 0,\n  \"cluster\": {\n    \"name\": \"gkecluster-pipelineuser-1\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"secretId\": \"{{secretIdGoogle}}\",\n    \"profileName\": \"default\",\n    \"properties\": {\n      \"gke\": {\n        \"master\": {\n          \"version\": \"1.9.7-gke.3\"\n        },\n        \"nodePools\": {\n          \"pool1\": {\n            \"count\": 1,\n            \"instanceType\": \"n1-standard-2\"\n          }\n        },\n        \"nodeVersion\": \"1.9.7-gke.3\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/applications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"applications"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Details",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/applications/:appId",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"applications",
								":appId"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "appId",
									"value": "{{appId}}",
									"description": "Application identifier"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resource groups",
			"item": [
				{
					"name": "List resource group",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secretIdAzure}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/azure/resourcegroups",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"azure",
								"resourcegroups"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create resource group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee8f4c9a-6dca-4238-8fbe-e7903649ba03",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"newResourceGroupName\", dataJSON.name);",
									"    tests[\"Resource group name: \" + dataJSON.name] = true;",
									"",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"newResourceGroupName\",\n\t\"location\": \"westeurope\",\n\t\"secretId\": \"{{secretIdAzure}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/azure/resourcegroups",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"azure",
								"resourcegroups"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete resource group",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "secretId",
								"value": "{{secretIdAzure}}",
								"description": "Secret identifier"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"newResourceGroupName\",\n\t\"location\": \"westeurope\",\n\t\"secretId\": \"{{secretIdAzure}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/:orgId/azure/resourcegroups/:newResourceGroupName",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								":orgId",
								"azure",
								"resourcegroups",
								":newResourceGroupName"
							],
							"variable": [
								{
									"key": "orgId",
									"value": "{{orgId}}",
									"description": "Organization identifier"
								},
								{
									"key": "newResourceGroupName",
									"value": "{{newResourceGroupName}}",
									"description": "Resource group name to create"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get API Endpoints",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api",
					"host": [
						"{{url}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5cfcfbdb-9fe1-4cab-9b82-e3d6808a59d6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fc13eae6-5e8d-4024-9f9c-0fc8ef4b6e19",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}