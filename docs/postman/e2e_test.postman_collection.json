{
	"info": {
		"_postman_id": "7ec514b5-bedc-4c0d-ba07-1a81658f86ac",
		"name": "End2End TEST Organizations",
		"description": "Collection for K8S Cluster CRUD operations through the Banzai Cloud Pipeline API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Clusters",
			"description": null,
			"item": [
				{
					"name": "Cluster Create AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(80500)",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"secretId\": \"{{secret_id}}\",\n  \"properties\": {\n        \"amazon\": {\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t                \"image\": \"ami-16bfeb6f\"\t\n            \t}\n            },\n            \"master\": {\n                \"instanceType\": \"m4.xlarge\",\n                \"image\": \"ami-16bfeb6f\"\n            }\n        }\n    }\n}\n\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\":\"azcluster{{username}}{{$randomInt}}\",\n  \"location\": \"westeurope\",\n  \"cloud\": \"azure\",\n  \"secretId\": \"{{secret_id}}\",\n  \"properties\": {\n        \"azure\": {\n        \t\"resourceGroup\": \"{{az-resource-group}}\",\n        \t\"kubernetesVersion\": \"1.9.2\",\n            \"nodePools\": {\n            \t\"pool1\": {\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                \t\"instanceType\": \"Standard_B2ms\"\n            \t},\n            \t\"pool2\": {\n            \t    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                \t\"instanceType\": \"Standard_B2ms\"\n            \t}\n        \t}\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Azure Container Service"
					},
					"response": []
				},
				{
					"name": "Cluster Create GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"secretId\": \"{{secret_id}}\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9\"\n            },\n            \"nodeVersion\":\"1.9\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n                    \"count\": 1,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"okecluster-demo-{{$randomInt}}\",\n    \"location\": \"n/a\",\n    \"cloud\": \"oracle\",\n    \"secretId\": \"{{secret_id}}\",\n    \"properties\": {\n        \"oracle\": {\n            \"version\":\"v1.9.7\",\n            \"vcnId\":\"ocid1.vcn.oc1.eu-frankfurt-1.aaaaaaaapwetdj5dqqji3fgisu6i24tiztzaxzqzfnmdxgsbsouwefwbkrxq\",\n            \"LBSubnetId1\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaanm5gywh3pgarwoz4w4kkdidqdjmi6jflkutctpox6jmw7xne4huq\",\n            \"LBSubnetId2\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaagau65hghxfsiapasa2dciqc6renvw6nelaxfugn5quc5d57f7ena\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"subnetIds\": [ \n                \t\t\"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaakad3ju4voqpep4uz3tprzbmgszt36i5re5rwwjmjsgyfkyeuxgba\"\n                \t],\n                \t\"quantityPerSubnet\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"general\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"dummy-cluster-{{username}}-{{$randomInt}}\",\n    \"location\": \"dummyLocation\",\n    \"instanceType\": \"dummyInstanceType\",\n    \"secretId\": \"{{secret_id}}\",\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n            \n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create Kubernetes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"kubernetes-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secret_id}}\",\n\t\"cloud\": \"kubernetes\",\n\t\"properties\": {\n\t\t\"kubernetes\": {\n\t\t\t\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"awscluster-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secret_id}}\",\n\t\"cloud\": \"amazon\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"amazon\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Amazon Web Services"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"azcluster{{username}}{{$randomInt}}\",\n\t\"secretId\": \"{{secret_id}}\",\n\t\"cloud\": \"azure\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"azure\": {\n            \"resourceGroup\": \"{{az-resource-group}}\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Azure Container Service"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"gkecluster-{{username}}-{{$randomInt}}\",\n\t\"secretId\": \"{{secret_id}}\",\n\t\"cloud\": \"google\",\n\t\"profileName\": \"default\",\n\t\"properties\": {\n\t\t\"google\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Create with profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"okecluster-{{$randomInt}}\",\n\t\"secretId\": \"{{secret_id}}\",\n\t\"cloud\": \"oracle\",\n\t\"profileName\": \"default2\",\n\t\"properties\": {\n\t\t\"oracle\": {\n           \n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Creates a K8S cluster in the Google Kubernetes Engine"
					},
					"response": []
				},
				{
					"name": "Cluster Update AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n            \t\t\"instanceType\": \"m4.xlarge\",\n\t            \t\"spotPrice\": \"0.2\",\n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n\t                \"image\": \"ami-16bfeb6f\"\t\n            \t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Update an AWS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cloud\": \"google\",\n  \"properties\": {\n    \"google\": {\n       \"master\": {\n            \"version\": \"1.9.4-gke.1\"\n      },\n      \"nodePools\": {\n        \"pool1\": {\n            \"autoscaling\": false, \n\t        \"minCount\": 1,\n\t        \"maxCount\": 2,\n            \"count\" : 2,\n            \"instanceType\": \"n1-standard-2\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Update Dummy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cloud\": \"dummy\",\n    \"properties\": {\n        \"dummy\": {\n        \t\"node\": {\n            \t\"count\": 2\n        \t}\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Helm init",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 201;",
									"    tests[\"Valid message\"] = dataJSON.message == \"helm initialising\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"namespace\": \"kube-system\",\n  \"service_account\": \"tiller\",\n  \"tiller_image\": \"gcr.io/kubernetes-helm/tiller:v2.7.2\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/helminit",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"helminit"
							]
						},
						"description": "Initialize helm in the cluster"
					},
					"response": []
				},
				{
					"name": "Install secrets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 201;",
									"    tests[\"Valid message\"] = dataJSON.message == \"helm initialising\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"namespace\": \"default\",\n  \"query\": {\n    \"tag\": \"\"\n  }\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"secrets"
							]
						},
						"description": "Initialize helm in the cluster"
					},
					"response": []
				},
				{
					"name": "Cluster Delete  FakeID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 404) {",
									"    tests[\"Response Code 404\"] = responseCode.code == 404;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid Message\"] = dataJSON.message == \"Cluster not found\";",
									"    tests[\"Valid Error\"] = dataJSON.error == \"record not found\";",
									"    tests[\"Valid code\"] = dataJSON.code == \"404\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/31231231241231231231321",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"31231231241231231231321"
							]
						},
						"description": "Delete a K8S cluster from the cloud, cleans up resources"
					},
					"response": []
				},
				{
					"name": "Cluster Delete ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"    tests[\"Response Time\"] = pm.expect(pm.response.responseTime).to.be.below(155679)",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" "
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Delete a K8S cluster from the cloud, cleans up resources"
					},
					"response": []
				},
				{
					"name": "Cluster Update OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 202) {",
									"    tests[\"Response Code 202\"] = responseCode.code == 202;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cloud\": \"oracle\",\n    \"properties\": {\n        \"oracle\": {\n            \"version\":\"v1.10.3\",\n            \"nodePools\": {\n                \"pool3\": {\n                \t\"version\":\"v1.10.3\",\n                \t\"subnetIds\": [ \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaakad3ju4voqpep4uz3tprzbmgszt36i5re5rwwjmjsgyfkyeuxgba\" ],\n                \t\"quantityPerSubnet\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"compute\"\n                \t}\n                },\n                \"pool1\": {\n                \t\"version\":\"v1.10.3\",\n                \t\"subnetIds\": [ \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaakad3ju4voqpep4uz3tprzbmgszt36i5re5rwwjmjsgyfkyeuxgba\" ],\n                \t\"quantityPerSubnet\": 1,\n                \t\"labels\": {\n                \t\t\"type\": \"general2\"\n                \t}\n                }\n            }\n        }\n    }\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Update an AKS cluster"
					},
					"response": []
				},
				{
					"name": "Get cluster status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8ad82b-0078-4b76-9d64-4a1fe5f63298",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Valid id\"] = dataJSON.id == environment.cluster_id;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"}",
									"else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Fetch cluster Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"cluster_id\", dataJSON.id);",
									"    tests[\"Cluster ID: \" + dataJSON.id] = true;",
									"",
									"    tests[\"Valid id\"] = dataJSON.id == environment.cluster_id;",
									"",
									"    postman.setNextRequest(\"Cluster Status\");",
									"}",
									"else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/details",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"details"
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Get cluster nodes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"nodes"
							]
						},
						"description": "Get cluster details"
					},
					"response": []
				},
				{
					"name": "Cluster List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters"
							]
						},
						"description": "Get the cluster details"
					},
					"response": []
				},
				{
					"name": "Cluster Config",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/config",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"config"
							]
						},
						"description": "Get the cluster configuration file"
					},
					"response": []
				},
				{
					"name": "Cluster Public Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/endpoints",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"endpoints"
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Cluster API endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/apiendpoint",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"apiendpoint"
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Update monitoring",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"type": "text",
									"value": "zeppelin-k8s-charts"
								}
							]
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/monitoring",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"monitoring"
							]
						},
						"description": "List cluster public endpoints"
					},
					"response": []
				},
				{
					"name": "Re-run cluster posthooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"}",
									"else if (responseCode.code === 404) {",
									"    tests[\"Cluster Node Found!\"] = false",
									"    postman.setNextRequest(null);",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"functions\":[ \"StoreKubeConfig\" ]\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/posthooks",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"posthooks"
							]
						},
						"description": "Get the cluster configuration file"
					},
					"response": []
				},
				{
					"name": "Get cluster applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54cce05b-29f0-4c0e-adef-f022c50f749e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/application",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"application"
							]
						},
						"description": "Get cluster applications"
					},
					"response": []
				},
				{
					"name": "Cluster Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"     postman.setNextRequest(\"Cluster Info\");",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 1\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}"
							]
						},
						"description": "Get cluster status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Catalog",
			"description": null,
			"item": [
				{
					"name": "Catalog List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/catalogs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"catalogs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Catalog Details",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/catalogs/zeppelin",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"catalogs",
								"zeppelin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deployments",
			"description": null,
			"item": [
				{
					"name": "Deployment Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"    var dataJSON = JSON.parse(responseBody);",
									"",
									"    pm.environment.set(\"deployment_name\", dataJSON.release_name);",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable/drone\",\n\t\"values\": {\n\t\t\"server\": {\n\t\t\t\"persistentVolume\": {\n\t\t\t\t\"enabled\": false\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments"
							]
						},
						"description": "Create a helm deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Create Fake APP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 404) {",
									"    tests[\"Response Code 404\"] = responseCode.code == 404;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    console.log(dataJSON)",
									"    tests[\"Valid Message\"] = /^Error loading chart: stat \\/opt\\/helm\\/.*.no such file or directory$/.test(dataJSON.message);",
									"    tests[\"Valid code\"] = dataJSON.status == \"404\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"pokol_app\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments"
							]
						},
						"description": "Create a helm deployment"
					},
					"response": []
				},
				{
					"name": "List Deployment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"banzaicloud-stable/drone\"}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments"
							]
						},
						"description": "List helm deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Init Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 2\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments"
							]
						},
						"description": "Get deployment status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Deployment",
			"description": null,
			"item": [
				{
					"name": "Deployment app Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"} else if (responseCode.code === 404 || responseCode.code === 503 )  {",
									"    console.log(\"Waiting...\" );",
									"    postman.setNextRequest(\"Delay Response 3\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"    ",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments",
								"{{deployment_name}}"
							]
						},
						"description": "Get deployment app status"
					},
					"response": []
				},
				{
					"name": "Deployment Upgrade",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 501) {",
									"    tests[\"Response Code 501\"] = responseCode.code == 501;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments",
								"{{deployment_name}}"
							]
						},
						"description": "Upgrades an existing deployment"
					},
					"response": []
				},
				{
					"name": "Deployment Delete ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    ",
									"    var dataJSON = JSON.parse(responseBody);",
									"    console.log(dataJSON)",
									"    tests[\"Valid status\"] = dataJSON.status == 200;",
									"    tests[\"Valid message\"] = dataJSON.message == \"Deployment deleted!\";",
									"    tests[\"Valid name\"] = dataJSON.name == environment.deployment_name;",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" "
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/{{deployment_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments",
								"{{deployment_name}}"
							]
						},
						"description": "Delete Deployment\n"
					},
					"response": []
				},
				{
					"name": "Deployment Delete  FakeAPP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 400) {",
									"    tests[\"Response Code 400\"] = responseCode.code == 400;",
									"    ",
									"    var dataJSON = JSON.parse(responseBody);",
									"    console.log(dataJSON)",
									"    tests[\"Valid code\"] = dataJSON.code == 400;",
									"    tests[\"Valid message\"] = dataJSON.message == \"Error deleting deployment\";",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/clusters/{{cluster_id}}/deployments/pokollll-appp",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"clusters",
								"{{cluster_id}}",
								"deployments",
								"pokollll-appp"
							]
						},
						"description": "Delete Deployment\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"description": null,
			"item": [
				{
					"name": "Create Profile AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"eu-west-1\",\n\t\"cloud\": \"amazon\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"master\": {\n\t\t\t\t\"instanceType\": \"m4.xlarge\",\n\t\t\t\t\"image\": \"ami-16bfeb6f\"\n\t\t\t},\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"instanceType\": \"m4.xlarge\",\n            \t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t\t\t\t\t\"image\": \"ami-16bfeb6f\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Create an Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Create Profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t},\n\t\t\t\t\"pool2\": {\n\t\t\t\t\t\"autoscaling\": false, \n\t                \"minCount\": 2,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 2,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Create an Azure Container Service profile"
					},
					"response": []
				},
				{
					"name": "Create Profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profile_name}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9.4-gke.1\"\n            },\n            \"nodeVersion\":\"1.9.4-gke.1\",\n            \"nodePools\": {\n                \"pool1\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 1,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 1,\n                    \"instanceType\": \"n1-standard-2\"\n                },\n                \"pool2\": {\n                    \"autoscaling\": false, \n\t                \"minCount\": 2,\n\t                \"maxCount\": 2,\n            \t\t\"count\": 2,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Create a Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Create Profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"basic\",\n    \"cloud\": \"oracle\",\n    \"location\": \"n/a\",\n    \"properties\": {\n        \"oracle\": {\n            \"version\":\"v1.9.7\",\n            \"vcnId\":\"ocid1.vcn.oc1.eu-frankfurt-1.aaaaaaaapwetdj5dqqji3fgisu6i24tiztzaxzqzfnmdxgsbsouwefwbkrxq\",\n            \"LBSubnetId1\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaanm5gywh3pgarwoz4w4kkdidqdjmi6jflkutctpox6jmw7xne4huq\",\n            \"LBSubnetId2\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaagau65hghxfsiapasa2dciqc6renvw6nelaxfugn5quc5d57f7ena\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.9.7\",\n                \t\"subnetIds\": [ \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaakad3ju4voqpep4uz3tprzbmgszt36i5re5rwwjmjsgyfkyeuxgba\" ],\n                \t\"quantityPerSubnet\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"small-compute\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Create a Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Update Profile AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{profile_name}}\",\n  \"location\": \"eu-west-1\",\n  \"cloud\": \"amazon\",\n  \"instanceType\": \"m4.xlarge\",\n  \"properties\": {\n    \"amazon\": {\n      \"master\": {\n        \"instanceType\": \"m4.xlarge\",\n        \"image\": \"ami-16bfeb6f\"\n      },\n      \"node\": {\n        \"spotPrice\": \"0.2\",\n        \"minCount\": 2,\n        \"maxCount\": 4,\n        \"image\": \"ami-16bfeb6f\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Update an existing Amazon Web Services profile"
					},
					"response": []
				},
				{
					"name": "Update Profile AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{profile_name}}\",\n\t\"location\": \"westeurope\",\n\t\"cloud\": \"azure\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"kubernetesVersion\": \"1.9.2\",\n\t\t\t\"nodePools\": {\n\t\t\t\t\"pool1\": {\n\t\t\t\t\t\"count\": 2,\n\t\t\t\t\t\"instanceType\": \"Standard_D2_v2\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Update an existing Azure Container Service profile"
					},
					"response": []
				},
				{
					"name": "Update Profile GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{profile_name}}\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"properties\": {\n        \"google\": {\n            \"master\":{\n                \"version\":\"1.9.4-gke.1\"\n            },\n            \"nodeVersion\":\"1.9.4-gke.1\",\n            \"nodePools\": {\n                \"pool2\": {\n                    \"count\": 2,\n                    \"instanceType\": \"n1-standard-2\"\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Update an existing Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "Update Profile OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"basic\",\n    \"cloud\": \"oracle\",\n    \"location\": \"n/a\",\n    \"properties\": {\n        \"oracle\": {\n            \"version\":\"v1.10.3\",\n            \"vcnId\":\"ocid1.vcn.oc1.eu-frankfurt-1.aaaaaaaapwetdj5dqqji3fgisu6i24tiztzaxzqzfnmdxgsbsouwefwbkrxq\",\n            \"LBSubnetId1\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaanm5gywh3pgarwoz4w4kkdidqdjmi6jflkutctpox6jmw7xne4huq\",\n            \"LBSubnetId2\": \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaagau65hghxfsiapasa2dciqc6renvw6nelaxfugn5quc5d57f7ena\",\n            \"nodePools\": {\n                \"pool1\": {\n                \t\"version\":\"v1.10.3\",\n                \t\"subnetIds\": [ \"ocid1.subnet.oc1.eu-frankfurt-1.aaaaaaaakad3ju4voqpep4uz3tprzbmgszt36i5re5rwwjmjsgyfkyeuxgba\" ],\n                \t\"quantityPerSubnet\": 1,\n                \t\"image\": \"Oracle-Linux-7.4\",\n                \t\"shape\": \"VM.Standard1.1\",\n                \t\"labels\": {\n                \t\t\"type\": \"small-compute\"\n                \t}\n                }\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster"
							]
						},
						"description": "Update an existing Google Kubernetes Engine profile"
					},
					"response": []
				},
				{
					"name": "List profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster/{{cloud_type}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster",
								"{{cloud_type}}"
							]
						},
						"description": "List the stored cluster profiles in pipeline"
					},
					"response": []
				},
				{
					"name": "Delete profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    postman.setNextRequest(\"List profiles\");",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/profiles/cluster/{{cloud_type}}/{{profile_name}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"profiles",
								"cluster",
								"{{cloud_type}}",
								"{{profile_name}}"
							]
						},
						"description": "Delete an existing cluster profile"
					},
					"response": []
				}
			]
		},
		{
			"name": "Secrets",
			"description": null,
			"item": [
				{
					"name": "List secret",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get secret",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets",
								"{{secret_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List secret with filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets?type={{secret_type}}&tag={{tag}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							],
							"query": [
								{
									"key": "type",
									"value": "{{secret_type}}"
								},
								{
									"key": "tag",
									"value": "{{tag}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List allowed secret types and required keys",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/allowed/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"allowed",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret AWS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ae70f51-f579-4774-a18b-dd4b523acdf2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-amazon-secret-{{$randomInt}}\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AWS_ACCESS_KEY_ID}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AWS_SECRET_ACCESS_KEY}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret TLS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dbc2c4d-e05b-485b-b929-e5dad07a96eb",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-tls-secret-{{$randomInt}}\",\n\t\"type\": \"tls\",\n\t\"values\": {\n\t\t\"hosts\": \"localhost\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret TLS Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8938185a-1905-4ba2-af5f-ed6a2a48c21b",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-password-secret-{{$randomInt}}\",\n\t\"type\": \"password\",\n\t\"values\": {\n\t\t\"username\": \"root\",\n\t\t\"password\": \"randAlpha,16\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret AKS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15e88b68-bd3b-4f94-b51a-0e62d961160d",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-azure-secret-{{$randomInt}}\",\n\t\"type\": \"azure\",\n\t\"values\": {\n\t\t\"AZURE_CLIENT_ID\": \"{{AZURE_CLIENT_ID}}\",\n\t\t\"AZURE_CLIENT_SECRET\": \"{{AZURE_CLIENT_SECRET}}\",\n\t\t\"AZURE_TENANT_ID\": \"{{AZURE_TENANT_ID}}\",\n\t\t\"AZURE_SUBSCRIPTION_ID\": \"{{AZURE_SUBSCRIPTION_ID}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret GKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "808f7826-9ec8-4051-9c6e-b503f243f4c2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-google-secret-{{$randomInt}}\",\n\t\"type\": \"google\",\n\t\"values\": {\n\t\t\"type\": \"{{gke_type}}\",\n\t\t\"project_id\": \"{{gke-projectId}}\",\n\t\t\"private_key_id\": \"{{private_key_id}}\",\n\t\t\"private_key\": \"{{private_key}}\",\n\t\t\"client_email\": \"{{client_email}}\",\n\t\t\"client_id\": \"{{client_id}}\",\n\t\t\"auth_uri\": \"{{auth_uri}}\",\n\t\t\"token_uri\": \"{{token_uri}}\",\n\t\t\"auth_provider_x509_cert_url\": \"{{auth_provider_x509_cert_url}}\",\n\t\t\"client_x509_cert_url\": \"{{client_x509_cert_url}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret OKE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "808f7826-9ec8-4051-9c6e-b503f243f4c2",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-oci-secret-{{$randomInt}}\",\n\t\"type\": \"oracle\",\n\t\"version\": 1,\n\t\"values\": {\n\t\t\"user_ocid\": \"{{user_ocid}}\",\n\t\t\"api_key_fingerprint\": \"{{api_key_fingerprint}}\",\n\t\t\"api_key\": \"{{api_key}}\",\n\t\t\"region\": \"{{region}}\",\n\t\t\"compartment_ocid\": \"{{compartment_ocid}}\",\n\t\t\"tenancy_ocid\": \"{{tenancy_ocid}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret SSH",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5046e84-5cdf-4320-ad0b-e937a56a9994",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-ssh-secret-{{$randomInt}}\",\n\t\"type\": \"ssh\",\n\t\"values\": {\n\t\t\"identifier\": \"\",\n\t\t\"private_key_data\": \"\",\n\t\t\"public_key_data\": \"\",\n\t\t\"public_key_fingerprint\": \"\",\n\t\t\"user\": \"\"\n\t}\n}\n"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret KUBERNETES",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bfbaf38-14af-4407-bf16-2f46703191f7",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-kubernetes-secret-{{$randomInt}}\",\n\t\"type\": \"kubernetes\",\n\t\"values\": {\n\t\t\"K8Sconfig\": \"{{K8Sconfig}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add secret Generic",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ea750aa-182a-40d8-9911-6a1bdee9c6a1",
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 201) {",
									"    tests[\"Response Code 201\"] = responseCode.code == 201;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.id);",
									"    tests[\"Secret ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-generic-secret-which-is-Docker-in-this-example-{{$randomInt}}\",\n\t\"type\": \"generic\",\n\t\"values\": {\n\t\t\"DOCKER_USERNAME\": \"{{DockerUsername}}\",\n\t\t\"DOCKER_PASSWORD\": \"{{DockerPassword}}\"\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 204) {",
									"    tests[\"Response Code 204\"] = responseCode.code == 204;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets",
								"{{secret_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"secret_id\", dataJSON.secret_id);",
									"    tests[\"Secret ID: \" + dataJSON.secret_id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"my-amazon-secret\",\n\t\"type\": \"amazon\",\n\t\"values\": {\n\t\t\"AWS_ACCESS_KEY_ID\": \"{{AWS_ACCESS_KEY_ID}}\",\n\t\t\"AWS_SECRET_ACCESS_KEY\": \"{{AWS_SECRET_ACCESS_KEY}}\"\n\t},\n\t\"version\": 1\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets",
								"{{secret_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate secret",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/secrets/{{secret_id}}/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"secrets",
								"{{secret_id}}",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization",
			"description": null,
			"item": [
				{
					"name": "List organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"",
									"    pm.environment.set(\"timestampHeader\", new Date());",
									"    var dataJSON = JSON.parse(responseBody);",
									"    pm.environment.set(\"orgId\", dataJSON.id);",
									"    tests[\"Org ID: \" + dataJSON.id] = true;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{organization_name}}\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (responseCode.code === 204) {",
									"    tests[\"Response Code 204\"] = responseCode.code == 204;",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    console.warn(responseBody);",
									"    postman.setNextRequest(null);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"description": null,
			"item": [
				{
					"name": "Generate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"if (responseCode.code === 200) {",
									"    tests[\"Response Code 200\"] = responseCode.code == 200;",
									"    var dataJSON = JSON.parse(responseBody);",
									"    ",
									"    pm.environment.set(\"token\", dataJSON.token);",
									"",
									"} else {",
									"    console.warn(\"Unknown  statusCode! -> \"+ responseCode.code );",
									"    tests[\"Unknown statusCode! -> \" + responseCode.code ] = false",
									"    postman.setNextRequest(null);",
									"",
									"}",
									" ",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/tokens",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"description": null,
			"item": [
				{
					"name": "Get users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add users to organization",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"role\": \"member\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/users/{{user_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ObjectStore",
			"description": null,
			"item": [
				{
					"name": "CheckBucket",
					"request": {
						"method": "HEAD",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}/?cloudType={{cloudType}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets",
								"{{bucketName}}",
								""
							],
							"query": [
								{
									"key": "cloudType",
									"value": "{{cloudType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Amazon",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=amazon&location={{am-location}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "amazon"
								},
								{
									"key": "location",
									"value": "{{am-location}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Amazon",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"amazon\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Azure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"azure\": {\n\t\t\t\"location\": \"\",\n\t\t\t\"storageAccount\": \"\",\n\t\t\t\"resourceGroup\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Google",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"\",\n\t\"properties\": {\n\t\t\"google\": {\n\t\t\t\"location\": \"\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBuckets Oracle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"name\": \"bbb\",\n\t\"properties\": {\n\t\t\"oracle\": {\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Azure",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=azure",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "azure"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Google",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=google",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "google"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ListBuckets Oracle",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets?cloudType=oracle",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "oracle"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Google",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}/?cloudType=google",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets",
								"{{bucketName}}",
								""
							],
							"query": [
								{
									"key": "cloudType",
									"value": "google"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Amazon",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}?cloudType=amazon",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets",
								"{{bucketName}}"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "amazon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBucket Oracle",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}?cloudType=oracle",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets",
								"{{bucketName}}"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "oracle"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteContainer Azure",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "secretId",
								"value": "{{secret_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/buckets/{{bucketName}}?cloudType=azure&storageAccount={{az-storageAccount}}&resourceGroup={{az-resource-group}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"buckets",
								"{{bucketName}}"
							],
							"query": [
								{
									"key": "cloudType",
									"value": "azure"
								},
								{
									"key": "storageAccount",
									"value": "{{az-storageAccount}}"
								},
								{
									"key": "resourceGroup",
									"value": "{{az-resource-group}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Helm",
			"description": null,
			"item": [
				{
					"name": "Chart List",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/charts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"charts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Chart Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/chart/{{repoName}}/{{chartName}}/{{chartVersion}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"chart",
								"{{repoName}}",
								"{{chartName}}",
								"{{chartVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository List",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"repos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"repos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"repos",
								"{{repoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Modify",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"banzaicloud-stable\",\n\t\"cache\": \"statestore/colin014/helm/repository/cache/banzaicloud-stable-index.yaml\",\n\t\"url\": \"http://kubernetes-charts.banzaicloud.com\",\n\t\"username\": \"\",\n\t\"password\": \"\",\n\t\"certFile\": \"\",\n\t\"keyFile\": \"\",\n\t\"caFile\": \"\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"repos",
								"{{repoName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repository Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/helm/repos/{{repoName}}/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"helm",
								"repos",
								"{{repoName}}",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cloud info",
			"description": null,
			"item": [
				{
					"name": "Amazon",
					"description": null,
					"item": [
						{
							"name": "Get AWS cloud config",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"amazon"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AWS cloud config Locations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon?fields=location",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AWS cloud config Images",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon?fields=image&tags=0.3.0&location=eu-west-1&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "image"
										},
										{
											"key": "tags",
											"value": "0.3.0"
										},
										{
											"key": "location",
											"value": "eu-west-1"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AWS cloud config NodeInstanceType",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon?fields=instanceType&location=eu-west-1&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "location",
											"value": "eu-west-1"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AWS cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/amazon?fields=location&fields=image&fields=instanceType&tags=0.3.0&location=eu-west-1&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"amazon"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										},
										{
											"key": "fields",
											"value": "image"
										},
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "tags",
											"value": "0.3.0"
										},
										{
											"key": "location",
											"value": "eu-west-1"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Azure",
					"description": null,
					"item": [
						{
							"name": "Get AKS cloud config",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"azure"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AKS cloud config Locations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"secret_id\": \"{{secret_id}}\",\n\t\"filter\": {\n\t\t\"fields\": [\"location\"]\n\t}\n}"
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure?fields=location&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AKS cloud config NodeInsatnceTypes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure?fields=instanceType&location=eastus&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "location",
											"value": "eastus"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AKS cloud config Kubernetes version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure?fields=k8sVersion&location=eastus&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "k8sVersion"
										},
										{
											"key": "location",
											"value": "eastus"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get AKS cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/azure?fields=location&fields=instanceType&fields=k8sVersion&location=eastus&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"azure"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										},
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "fields",
											"value": "k8sVersion"
										},
										{
											"key": "location",
											"value": "eastus"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Google",
					"description": null,
					"item": [
						{
							"name": "Get GKE cloud config",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"google"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GKE cloud config Locations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google?fields=location&=location&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										},
										{
											"key": "",
											"value": "location"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GKE cloud config NodeInsatnceTypes",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google?fields=instanceType&location=asia-east1-a&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "location",
											"value": "asia-east1-a"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GKE cloud config Kubernetes version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google?fields=k8sVersion&location=us-central1-a&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "k8sVersion"
										},
										{
											"key": "location",
											"value": "us-central1-a"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get GKE cloud config ALL field",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo/google?fields=location&fields=instanceType&fields=k8sVersion&location=us-central1-a&secret_id={{secret_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"orgs",
										"{{orgId}}",
										"cloudinfo",
										"google"
									],
									"query": [
										{
											"key": "fields",
											"value": "location"
										},
										{
											"key": "fields",
											"value": "instanceType"
										},
										{
											"key": "fields",
											"value": "k8sVersion"
										},
										{
											"key": "location",
											"value": "us-central1-a"
										},
										{
											"key": "secret_id",
											"value": "{{secret_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get supported clusters types",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"project_id\": \"colin-pipeline\"\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/cloudinfo",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"cloudinfo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Applications",
			"description": "",
			"item": [
				{
					"name": "Application List",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/applications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Create",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"MyApplication\",\n  \"catalogName\": \"mysql-simple\",\n  \"clusterId\": 0,\n  \"cluster\": {\n    \"name\": \"gkecluster-pipelineuser-1\",\n    \"location\": \"us-central1-a\",\n    \"cloud\": \"google\",\n    \"secretId\": \"{{secret_id}}\",\n    \"postHooks\": [\n      \"InstallMonitoring\",\n      \"InstallLogging\"\n    ],\n    \"profileName\": \"default\",\n    \"properties\": {\n      \"google\": {\n        \"master\": {\n          \"version\": \"1.9.7-gke.3\"\n        },\n        \"nodePools\": {\n          \"pool1\": {\n            \"count\": 1,\n            \"instanceType\": \"n1-standard-2\"\n          }\n        },\n        \"nodeVersion\": \"1.9.7-gke.3\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/applications",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Application Details",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/api/v1/orgs/{{orgId}}/applications/{{appId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"orgs",
								"{{orgId}}",
								"applications",
								"{{appId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get API Endpoints",
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/api",
					"host": [
						"{{url}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJodHRwczovL3BpcGVsaW5lLmJhbnphaWNsb3VkLmNvbSIsImp0aSI6IjNkYWUxYzJiLTg2MjgtNDQ4MS1hZjMyLWU3OWUzNGJjMTExYyIsImlhdCI6MTUzMTIxOTQxNCwiaXNzIjoiaHR0cHM6Ly9iYW56YWljbG91ZC5jb20vIiwic3ViIjoiMSIsInNjb3BlIjoiYXBpOmludm9rZSIsInR5cGUiOiJ1c2VyIiwidGV4dCI6ImJvbmlmYWlkbyJ9.LtlOpD0i0qU6N7queT2smoyJHuGhAO0rPiowTWTuRXw",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dfcd40bc-41e2-46f5-a81f-ccfa6a0faba5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f74e277e-fbdb-4009-9182-7c773dfde107",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}