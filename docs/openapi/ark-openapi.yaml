openapi: 3.0.0
info:
  description: ARK service support swagger
  version: "0.1.0"
  title: ARK API
  contact:
    email: info@banzaicloud.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: http://localhost:9090
tags:
  - name: ark
    description: ARK service related functions
  - name: ark-buckets
    description: "ARK: buckets related functions"
  - name: ark-backups
    description: "ARK: backups related functions"
  - name: ark-schedules
    description: "ARK: schedules related functions"
  - name: ark-restores
    description: "ARK: restores related functions"

paths:
  '/api/v1/orgs/{orgId}/clusters/{id}/backupservice/enable':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark
      summary: Enable ARK service
      description: Enable ARK service
      operationId: EnableARK
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: ARK service deployed successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/EnableARKResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableARKRequest'
  '/api/v1/orgs/{orgId}/clusters/{id}/backupservice/disable':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark
      summary: Disable ARK service
      description: Disable ARK service
      operationId: DisableARK
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: ARK service removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableARKResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/backupservice/status':
    head:
      security:
        - bearerAuth: []
      tags:
        - ark
      summary: Check ARK service status
      description: Check ARK service status
      operationId: CheckARKStatus
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: ARK service running
        '401':
          description: Unauthorized
        '404':
          description: ARK service not deployed
  '/api/v1/orgs/{orgId}/backupbuckets':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark-buckets
      summary: Create backup bucket
      description: Create backup bucket
      operationId: CreateBackupBucket
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
      responses:
        '200':
          description: Backup bucket added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBackupBucketResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupBucketRequest'
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-buckets
      summary: List backup buckets
      description: List backup buckets
      operationId: ListBackupBuckets
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
      responses:
        '200':
          description: All buckets listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupBucketsResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/backupbuckets/{bucketId}':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-buckets
      summary: Get backup bucket by ID
      description: Get backup bucket by ID
      operationId: GetBackupBucket
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: bucketId, in: path, required: true, description: ID of the bucket, schema: { type: integer } }
      responses:
        '200':
          description: Getting backup succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBackupBucketResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
    delete:
      security:
        - bearerAuth: []
      tags:
        - ark-buckets
      summary: Delete backup bucket by ID
      description: Delete backup bucket by ID
      operationId: DeleteBackupBucket
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: bucketId, in: path, required: true, description: ID of the bucket, schema: { type: integer } }
      responses:
        '200':
          description: Deleting backup succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBackupBucketResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/backups':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: List ARK backups of an Organization
      description: List ARK backups of an Organization
      operationId: ListARKBackupsForOrganization
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
      responses:
        '200':
          description: All backups listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/backups':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: Create ARK backup
      description: Create ARK backup of a cluster
      operationId: ListARKBackupsOfACluster
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: Backup created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBackupResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackupRequest'
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: List ARK backups of a cluster
      description: List ARK backups of a cluster
      operationId: ListARKBackupsOfACluster
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: All backups listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/backups/{backupId}':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: Get ARK backup
      description: Get ARK backup
      operationId: GetARKBackup
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: backupId, in: path, required: true, description: ID of the backup, schema: { type: integer } }
      responses:
        '200':
          description: Getting backup succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBackupResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
    delete:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: Delete ARK backup
      description: Delete ARK backup
      operationId: DeleteARKBackup
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: backupId, in: path, required: true, description: ID of the backup, schema: { type: integer } }
      responses:
        '200':
          description: Backup removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBackupResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/backups/{backupId}/logs':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: Get ARK backup logs
      description: Get ARK backup logs
      operationId: GetARKBackupLogs
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: backupId, in: path, required: true, description: ID of the backup, schema: { type: integer } }
      responses:
        '200':
          description: Getting backup logs succeeded
          content:
            text/plain:
              schema:
                type: string
                example: >
                  time="2018-09-10T00:23:33Z" level=info msg="Not including resource" groupResource=events logSource="pkg/restore/restore.go:124"

                  time="2018-09-10T00:23:33Z" level=info msg="Not including resource" groupResource=nodes logSource="pkg/restore/restore.go:124"

                  time="2018-09-10T00:23:33Z" level=info msg="Not including resource"
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/backups/{backupId}/download':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-backups
      summary: Download ARK backup contents
      description: Download ARK backup contents
      operationId: DownloadARKBackupContents
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: backupId, in: path, required: true, description: ID of the backup, schema: { type: integer } }
      responses:
        '200':
          description: Getting backup contents succeeded
          content:
            application/x-gzip:
              schema:
                type: file
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/schedules':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark-schedules
      summary: Create ARK schedule
      description: Create ARK schedule
      operationId: CreateARKSchedule
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: Schedule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateScheduleResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScheduleRequest'
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-schedules
      summary: List ARK schedules
      description: List ARK schedules
      operationId: ListARKSchedules
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: Schedules listed successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/ListSchedulesResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/schedules/{scheduleName}':
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-schedules
      summary: Get ARK schedule
      description: Get ARK schedule
      operationId: GetARKSchedule
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: scheduleName, in: path, required: true, description: Name of the schedule, schema: { type: string } }
      responses:
        '200':
          description: Schedule retrieved succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScheduleResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
    delete:
      security:
        - bearerAuth: []
      tags:
        - ark-schedules
      summary: Delete ARK schedule
      description: Delete ARK schedule
      operationId: DeleteARKSchedule
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: scheduleName, in: path, required: true, description: Name of the schedule, schema: { type: string } }
      responses:
        '200':
          description: Schedule delete succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteScheduleResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/restores':
    post:
      security:
        - bearerAuth: []
      tags:
        - ark-restores
      summary: Create ARK restore
      description: Create ARK restore
      operationId: CreateARKRestore
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: Restore created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRestoreResponse'
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRestoreRequest'
    get:
      security:
        - bearerAuth: []
      tags:
        - ark-restores
      summary: List ARK restores
      description: List ARK restores
      operationId: ListARKRestores
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
      responses:
        '200':
          description: Restores listed successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/ListRestoresResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/restores/{restoreId}':
    get:
      security: { bearerAuth: [] }
      tags: [ ark-restores ]
      summary: Get ARK restore
      description: Get ARK restore
      operationId: GetARKRestore
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: restoreId, in: path, required: true, description: ID of the restore, schema: { type: integer } }
      responses:
        '200':
          description: Restore retrieved successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/GetRestoreResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
    delete:
      security: { bearerAuth: [] }
      tags: [ ark-restores ]
      summary: Delete ARK restore
      description: Delete ARK restore
      operationId: DeleteARKRestore
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: restoreId, in: path, required: true, description: ID of the restore, schema: { type: integer } }

      responses:
        '200':
          description: Restore deleted successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/DeleteRestoreResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }
  '/api/v1/orgs/{orgId}/clusters/{id}/restores/{restoreId}/results':
    get:
      security: { bearerAuth: [] }
      tags: [ ark-restores ]
      summary: Get ARK restore results
      description: Get ARK restore results
      operationId: GetARKRestoreResuts
      parameters:
        - { name: orgId, in: path, required: true, description: Organization identification, schema: { type: integer } }
        - { name: id, in: path, required: true, description: Selected cluster identification (number), schema: { type: integer } }
        - { name: restoreId, in: path, required: true, description: ID of the restore, schema: { type: integer } }
      responses:
        '200':
          description: Restore retrieved successfully
          content: { application/json: { schema: { $ref: '#/components/schemas/GetRestoreResultsResponse' } } }
        '400':
          description: Error during processing request
          content: { application/json: { schema: { $ref: '#/definitions/BaseError_400' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Unauthorized' } } }
        '404':
          description: record not found
          content: { application/json: { schema: { $ref: '#/components/schemas/NotFound' } } }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateRestoreRequest:
      "$ref": "#/definitions/CreateRestoreRequest"
    CreateRestoreResponse:
      "$ref": "#/definitions/CreateRestoreResponse"
    GetRestoreResponse:
      "$ref": "#/definitions/RestoreResponse"
    GetRestoreResultsResponse:
      "$ref": "#/definitions/RestoreResultsResponse"
    DeleteRestoreResponse:
      "$ref": "#/definitions/DeleteRestoreResponse"
    ListRestoresResponse:
      type: array
      items:
        "$ref": "#/definitions/RestoreResponse"

    CreateScheduleRequest:
      "$ref": "#/definitions/CreateScheduleRequest"
    CreateScheduleResponse:
      "$ref": "#/definitions/CreateScheduleResponse"
    GetScheduleResponse:
      "$ref": "#/definitions/ScheduleResponse"
    DeleteScheduleResponse:
      "$ref": "#/definitions/DeleteScheduleResponse"
    ListSchedulesResponse:
      type: array
      items:
        "$ref": "#/definitions/ScheduleResponse"

    CreateBackupRequest:
      "$ref": "#/definitions/CreateBackupRequest"
    CreateBackupResponse:
      "$ref": "#/definitions/CreateBackupResponse"
    ListBackupsResponse:
      type: array
      items:
        "$ref": "#/definitions/BackupResponse"
    GetBackupResponse:
      "$ref": "#/definitions/BackupResponse"
    DeleteBackupResponse:
      "$ref": "#/definitions/DeleteBackupResponse"

    CreateBackupBucketRequest:
      "$ref": "#/definitions/CreateBackupBucketRequest"
    CreateBackupBucketResponse:
      "$ref": "#/definitions/BackupBucketResponse"
    ListBackupBucketsResponse:
      type: array
      items:
        "$ref": "#/definitions/BackupBucketResponse"
    GetBackupBucketResponse:
      "$ref": "#/definitions/DeployedBackupBucketResponse"
    DeleteBackupBucketResponse:
      "$ref": "#/definitions/DeleteBackupBucketResponse"

    EnableARKResponse:
      "$ref": "#/definitions/EnableARKResponse"
    EnableARKRequest:
      "$ref": "#/definitions/EnableARKRequest"
    DisableARKResponse:
      "$ref": "#/definitions/DisableARKResponse"
    Unauthorized:
      "$ref": "#/definitions/Unauthorized"
    NotFound:
      "$ref": "#/definitions/NotFound"
definitions:
  RestoreResultARK:
    type: array
    items:
      type: string
    example: []
  RestoreResultCluster:
    type: array
    items:
      type: string
    example: []
  RestoreResultNamespaces:
    type: array
    items:
      type: object
  RestoreResultNamespacesWarnings:
    type: array
    items:
      type: object
      additionalProperties: true
      description: "warnings during restoration process"
      example: { "default": [
                "not restored: services \"kubernetes\" already exists and is different from backed up version.",
                "not restored: services \"pipeline-traefik-metrics-prometheus\" already exists and is different from backed up version.",
                "not restored: services \"pipeline-traefik\" already exists and is different from backed up version."
            ]
      }
  RestoreResultErrors:
    type: object
    properties:
      ark:
        "$ref": "#/definitions/RestoreResultARK"
      cluster:
        "$ref": "#/definitions/RestoreResultCluster"
      namespaces:
        "$ref": "#/definitions/RestoreResultNamespaces"
  RestoreResultWarnings:
    type: object
    properties:
      ark:
        "$ref": "#/definitions/RestoreResultARK"
      cluster:
        "$ref": "#/definitions/RestoreResultCluster"
      namespaces:
        "$ref": "#/definitions/RestoreResultNamespacesWarnings"
  RestoreResultsResponse:
    type: object
    properties:
      errors:
        "$ref": "#/definitions/RestoreResultErrors"
      warnings:
        "$ref": "#/definitions/RestoreResultWarnings"
  RestoreResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      uid:
        type: string
        example: "494ec414-b6cb-11e8-9916-42010aa400f6"
      name:
        type: string
        example: "full-backup-schedule-20180912223445"
      backupName:
        type: string
        example: "full-backup-schedule"
      options:
        "$ref": "#/definitions/BackupOptions"
      status:
        type: string
        example: "InProgress"
      warnings:
        type: integer
        example: 3
      errors:
        type: integer
        example: 0
  CreateRestoreRequest:
    type: object
    properties:
      backupName:
        type: string
        example: "full-backup"
      options:
        "$ref": "#/definitions/BackupOptions"
    required:
    - backupName
  CreateRestoreResponse:
    type: object
    properties:
      restore:
        "$ref": "#/definitions/RestoreResponse"
      status:
        type: integer
        example: 200
  DeleteRestoreResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: integer
        example: 200
  CreateScheduleRequest:
    type: object
    properties:
      name:
        type: string
        example: "full-backup-schedule"
      schedule:
        type: string
        example: "0 */6 * * *"
      ttl:
        type: string
        example: "720h0m0s"
      labels:
        "$ref": "#/definitions/Labels"
      options:
        "$ref": "#/definitions/BackupOptions"
    required:
      - name
      - schedule
      - ttl
  DeleteScheduleResponse:
    type: object
    properties:
      name:
        type: string
        example: "full-backup-schedule"
      status:
        type: integer
        example: 200
  CreateScheduleResponse:
    type: object
    properties:
      name:
        type: string
        example: "full-backup-schedule"
      status:
        type: integer
        example: 200
  ScheduleResponse:
    type: object
    properties:
      uid:
        type: string
        example: "432d4d27-b48f-11e8-9916-42010aa400f6"
      name:
        type: string
        example: "full-backup-schedule"
      schedule:
        type: string
        example: "0 */6 * * *"
      ttl:
        type: string
        example: "720h0m0s"
      labels:
        "$ref": "#/definitions/Labels"
      options:
        "$ref": "#/definitions/BackupOptions"
      status:
        type: string
        example: "Enabled"
      lastBackup:
        type: string
        example: "2018-09-13T11:59:11+02:00"
  CreateBackupRequest:
    type: object
    properties:
      name:
        type: string
        example: full-backup
      ttl:
        type: string
        example: "30m"
      labels:
        "$ref": "#/definitions/Labels"
      options:
        "$ref": "#/definitions/BackupOptions"
    required:
    - name
    - ttl
  CreateBackupResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: integer
        example: 200
  DeleteBackupResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: integer
        example: 200
  BackupResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      uid:
        type: string
        example: "432d4d27-b48f-11e8-9916-42010aa400f6"
      name:
        type: string
        example: "full-backup"
      ttl:
        type: string
        example: "720h0m0s"
      labels:
        "$ref": "#/definitions/Labels"
      options:
        "$ref": "#/definitions/BackupOptions"
      cloud:
        type: string
        example: "google"
      distribution:
        type: string
        example: "gke"
      status:
        type: string
        example: "Completed"
      startAt:
        type: string
        example: "2018-09-10T02:20:03+02:00"
      expireAt:
        type: string
        example: "2018-10-10T02:20:03+02:00"
      clusterId:
        type: integer
        example: 1
  CreateBackupBucketRequest:
    type: object
    properties:
      cloud:
        type: string
        example: "google"
      bucketName:
        type: string
        example: "ark-backup-bucket-123"
      secretId:
        type: string
        example: "61b9707ca463cad79188bb0ddfa1345e41fc01b651feddf06eea58a25c56d717"
    required:
    - cloud
    - bucketName
    - secretId
  BackupBucketResponse:
    type: object
    properties:
      id:
        type: integer
        example: 5
      name:
        type: string
        example: "ark-backup-bucket-123"
      cloud:
        type: string
        example: "google"
      secretId:
        type: string
        example: "61b9707ca463cad79188bb0ddfa1345e41fc01b651feddf06eea58a25c56d717"
      status:
        type: string
        example: "available"
      inUse:
        type: boolean
        example: false
  DeployedBackupBucketResponse:
    type: object
    properties:
      id:
        type: integer
        example: 5
      name:
        type: string
        example: "ark-backup-bucket-123"
      cloud:
        type: string
        example: "google"
      secretId:
        type: string
        example: "61b9707ca463cad79188bb0ddfa1345e41fc01b651feddf06eea58a25c56d717"
      status:
        type: string
        example: "deployed"
      inUse:
        type: boolean
        example: false
      deploymentId:
        type: integer
        example: 1
      clusterId:
        type: integer
        example: 1
      clusterCloud:
        type: string
        example: google
      clusterDistribution:
        type: string
        example: gke
  NotFound:
    type: object
    properties:
      code:
        type: integer
        example: 404
      message:
        type: string
        example: "record not found"
      error:
        type: string
        example: "record not found"
  Unauthorized:
    type: object
    properties:
      code:
        type: integer
        example: 401
      message:
        type: string
        example: "Invalid token"
      error:
        type: string
        example: "token contains an invalid number of segments"
  BaseError_400:
    type: object
    properties:
      code:
        type: integer
        example: 400
      message:
        type: string
        example: "Error during process"
      error:
        type: string
        example: "Error during process"
  DeleteBackupBucketResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      status:
        type: integer
        example: 200
  DisableARKResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
  EnableARKResponse:
    type: object
    properties:
      status:
        type: integer
        example: 200
  EnableARKRequest:
    type: object
    required:
      - cloud
      - bucketName
      - secretId
      - schedule
      - ttl
    properties:
      cloud:
        type: string
        example: "google"
      bucketName:
        type: string
        example: "ark-backup-bucket-123"
      schedule:
        type: string
        example: "0 */6 * * *"
      ttl:
        type: string
        example: "1h"
      secretId:
        type: string
        example: "62bc3c75-91fb-4670-bad4-24b401a9deac"
      labels:
        "$ref": "#/definitions/Labels"
      options:
        "$ref": "#/definitions/BackupOptions"
  Labels:
    title: Labels
    example:
      backup-type: full
    type: object
    properties:
      backup-type:
        example: full
        type: string
  BackupOptions:
    title: Backup Options
    example:
      includedNamespaces: ["*"]
      includedResources: ["*"]
      excludedNamespaces: []
      excludedResources: []
      snapshotVolumes: true
      includeClusterResources: true
    type: object
    properties:
      includedNamespaces:
        example: ["*"]
        type: array
        items:
          type: string
      includedResources:
        example: ["*"]
        type: array
        items:
          type: string
      excludedNamespaces:
        example: []
        type: array
        items:
          type: string
      excludedResources:
        example: []
        type: array
        items:
          type: string
      snapshotVolumes:
        example: true
        type: boolean
      includeClusterResources:
        example: true
        type: boolean
