// Generated by github.com/temporalio/temporal-aws-sdk-generator
// from github.com/aws/aws-sdk-go version 1.35.7

package ec2stub

import (
	"github.com/aws/aws-sdk-go/service/ec2"
	"go.uber.org/cadence/workflow"

	"github.com/banzaicloud/cadence-aws-sdk/clients"
)

// ensure that imports are valid even if not used by the generated code
var _ clients.VoidFuture

type stub struct{}

type AcceptReservedInstancesExchangeQuoteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcceptTransitGatewayPeeringAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcceptTransitGatewayVpcAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcceptVpcEndpointConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AcceptVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AcceptVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AdvertiseByoipCidrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AdvertiseByoipCidrFuture) Get(ctx workflow.Context) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocateAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateAddressFuture) Get(ctx workflow.Context) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AllocateHostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AllocateHostsFuture) Get(ctx workflow.Context) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ApplySecurityGroupsToClientVpnTargetNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ApplySecurityGroupsToClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssignIpv6AddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssignPrivateIpAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateAddressFuture) Get(ctx workflow.Context) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateClientVpnTargetNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateDhcpOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateEnclaveCertificateIamRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateEnclaveCertificateIamRoleFuture) Get(ctx workflow.Context) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error) {
	var output ec2.AssociateEnclaveCertificateIamRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateIamInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateSubnetCidrBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateTransitGatewayMulticastDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateTransitGatewayRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AssociateVpcCidrBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AssociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachClassicLinkVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachNetworkInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AttachVpnGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AttachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeClientVpnIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeSecurityGroupEgressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type AuthorizeSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *AuthorizeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type BundleInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *BundleInstanceFuture) Get(ctx workflow.Context) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelBundleTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelBundleTaskFuture) Get(ctx workflow.Context) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelCapacityReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelConversionTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelConversionTaskFuture) Get(ctx workflow.Context) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelExportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelImportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelImportTaskFuture) Get(ctx workflow.Context) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelReservedInstancesListingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelSpotFleetRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CancelSpotInstanceRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CancelSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ConfirmProductInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ConfirmProductInstanceFuture) Get(ctx workflow.Context) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyFpgaImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopyImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopyImageFuture) Get(ctx workflow.Context) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CopySnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CopySnapshotFuture) Get(ctx workflow.Context) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCapacityReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCarrierGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClientVpnEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateClientVpnRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateCustomerGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDefaultSubnetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDefaultSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDefaultVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDefaultVpcFuture) Get(ctx workflow.Context) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateDhcpOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateEgressOnlyInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFleetFuture) Get(ctx workflow.Context) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFlowLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFlowLogsFuture) Get(ctx workflow.Context) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateFpgaImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateFpgaImageFuture) Get(ctx workflow.Context) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateImageFuture) Get(ctx workflow.Context) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInstanceExportTaskFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInstanceExportTaskFuture) Get(ctx workflow.Context) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateKeyPairFuture) Get(ctx workflow.Context) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLaunchTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLaunchTemplateVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLaunchTemplateVersionFuture) Get(ctx workflow.Context) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocalGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateLocalGatewayRouteTableVpcAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateManagedPrefixListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNatGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNatGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkAclFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkAclEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateNetworkInterfacePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreatePlacementGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreatePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateReservedInstancesListingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateReservedInstancesListingFuture) Get(ctx workflow.Context) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRouteFuture) Get(ctx workflow.Context) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotFuture) Get(ctx workflow.Context) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSnapshotsFuture) Get(ctx workflow.Context) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSpotDatafeedSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateSubnetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateSubnetFuture) Get(ctx workflow.Context) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTagsFuture) Get(ctx workflow.Context) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrafficMirrorFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrafficMirrorFilterRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrafficMirrorSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTrafficMirrorTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayMulticastDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayPeeringAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayPrefixListReferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateTransitGatewayVpcAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVolumeFuture) Get(ctx workflow.Context) (*ec2.Volume, error) {
	var output ec2.Volume
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcFuture) Get(ctx workflow.Context) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcEndpointConnectionNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcEndpointServiceConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpnConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpnConnectionRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type CreateVpnGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *CreateVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCarrierGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCarrierGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClientVpnEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteClientVpnRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteClientVpnRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteCustomerGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteCustomerGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteDhcpOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteEgressOnlyInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteEgressOnlyInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFleetsFuture) Get(ctx workflow.Context) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFlowLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteFpgaImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteFpgaImageFuture) Get(ctx workflow.Context) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteKeyPairFuture) Get(ctx workflow.Context) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLaunchTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLaunchTemplateVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLocalGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLocalGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteLocalGatewayRouteTableVpcAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteLocalGatewayRouteTableVpcAssociationFuture) Get(ctx workflow.Context) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteManagedPrefixListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNatGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNatGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkAclFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkAclFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkAclEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteNetworkInterfacePermissionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteNetworkInterfacePermissionFuture) Get(ctx workflow.Context) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeletePlacementGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeletePlacementGroupFuture) Get(ctx workflow.Context) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteQueuedReservedInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteQueuedReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSecurityGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSecurityGroupFuture) Get(ctx workflow.Context) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSnapshotFuture) Get(ctx workflow.Context) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSpotDatafeedSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteSubnetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteSubnetFuture) Get(ctx workflow.Context) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTagsFuture) Get(ctx workflow.Context) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrafficMirrorFilterFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrafficMirrorFilterFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrafficMirrorFilterRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrafficMirrorSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTrafficMirrorTargetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTrafficMirrorTargetFuture) Get(ctx workflow.Context) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayMulticastDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayPeeringAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayPrefixListReferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteTransitGatewayVpcAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVolumeFuture) Get(ctx workflow.Context) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcEndpointConnectionNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcEndpointServiceConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpnConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpnConnectionRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpnConnectionRouteFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeleteVpnGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeleteVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeprovisionByoipCidrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeprovisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterImageFuture) Get(ctx workflow.Context) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterInstanceEventNotificationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTransitGatewayMulticastGroupMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DeregisterTransitGatewayMulticastGroupSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DeregisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAccountAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAccountAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAggregateIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAggregateIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeAvailabilityZonesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeAvailabilityZonesFuture) Get(ctx workflow.Context) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeBundleTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeBundleTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeByoipCidrsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeByoipCidrsFuture) Get(ctx workflow.Context) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCapacityReservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCapacityReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCarrierGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCarrierGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClassicLinkInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClassicLinkInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientVpnAuthorizationRulesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientVpnAuthorizationRulesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientVpnConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientVpnEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientVpnEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientVpnRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientVpnRoutesFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeClientVpnTargetNetworksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeClientVpnTargetNetworksFuture) Get(ctx workflow.Context) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCoipPoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCoipPoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeConversionTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeConversionTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeCustomerGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeCustomerGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeDhcpOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeDhcpOptionsFuture) Get(ctx workflow.Context) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeEgressOnlyInternetGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeEgressOnlyInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeElasticGpusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeElasticGpusFuture) Get(ctx workflow.Context) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExportImageTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeExportTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeExportTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFastSnapshotRestoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFleetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFleetsFuture) Get(ctx workflow.Context) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFlowLogsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFlowLogsFuture) Get(ctx workflow.Context) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFpgaImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeFpgaImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeFpgaImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHostReservationOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHostReservationOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHostReservationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHostReservationsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeHostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeHostsFuture) Get(ctx workflow.Context) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIamInstanceProfileAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIamInstanceProfileAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIdentityIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImageAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImagesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImagesFuture) Get(ctx workflow.Context) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImportImageTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImportImageTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeImportSnapshotTasksFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeImportSnapshotTasksFuture) Get(ctx workflow.Context) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceCreditSpecificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceCreditSpecificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceEventNotificationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceTypeOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceTypeOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstanceTypesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstanceTypesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeInternetGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeInternetGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeIpv6PoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeIpv6PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeKeyPairsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeKeyPairsFuture) Get(ctx workflow.Context) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLaunchTemplateVersionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLaunchTemplateVersionsFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLaunchTemplatesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLaunchTemplatesFuture) Get(ctx workflow.Context) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewayRouteTableVpcAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewayRouteTableVpcAssociationsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewayRouteTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewayVirtualInterfaceGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewayVirtualInterfaceGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewayVirtualInterfacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewayVirtualInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeLocalGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeLocalGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeManagedPrefixListsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeManagedPrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeMovingAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeMovingAddressesFuture) Get(ctx workflow.Context) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNatGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNatGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNetworkAclsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNetworkAclsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNetworkInterfaceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNetworkInterfacePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNetworkInterfacePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeNetworkInterfacesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeNetworkInterfacesFuture) Get(ctx workflow.Context) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePlacementGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePlacementGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePrefixListsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePrefixListsFuture) Get(ctx workflow.Context) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePrincipalIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePrincipalIdFormatFuture) Get(ctx workflow.Context) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribePublicIpv4PoolsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribePublicIpv4PoolsFuture) Get(ctx workflow.Context) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRegionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRegionsFuture) Get(ctx workflow.Context) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedInstancesListingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedInstancesListingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedInstancesModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedInstancesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeReservedInstancesOfferingsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeReservedInstancesOfferingsFuture) Get(ctx workflow.Context) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeRouteTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduledInstanceAvailabilityFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduledInstanceAvailabilityFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeScheduledInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSecurityGroupReferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSecurityGroupReferencesFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSnapshotsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSnapshotsFuture) Get(ctx workflow.Context) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotDatafeedSubscriptionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotDatafeedSubscriptionFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotFleetInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotFleetInstancesFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotFleetRequestHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotFleetRequestHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotFleetRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotFleetRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotInstanceRequestsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotInstanceRequestsFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSpotPriceHistoryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSpotPriceHistoryFuture) Get(ctx workflow.Context) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeStaleSecurityGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeStaleSecurityGroupsFuture) Get(ctx workflow.Context) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeSubnetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeSubnetsFuture) Get(ctx workflow.Context) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTagsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTagsFuture) Get(ctx workflow.Context) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrafficMirrorFiltersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrafficMirrorFiltersFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrafficMirrorSessionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrafficMirrorSessionsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTrafficMirrorTargetsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTrafficMirrorTargetsFuture) Get(ctx workflow.Context) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewayAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewayAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewayMulticastDomainsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewayMulticastDomainsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewayPeeringAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewayPeeringAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewayRouteTablesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewayRouteTablesFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewayVpcAttachmentsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewayVpcAttachmentsFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeTransitGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeTransitGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVolumeAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVolumeStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVolumeStatusFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVolumesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVolumesFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVolumesModificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVolumesModificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcClassicLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcClassicLinkDnsSupportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointConnectionNotificationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointConnectionNotificationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointServiceConfigurationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointServiceConfigurationsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointServicePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointServicesFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcEndpointsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcEndpointsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcPeeringConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcPeeringConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpcsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpcsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpnConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DescribeVpnGatewaysFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DescribeVpnGatewaysFuture) Get(ctx workflow.Context) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachClassicLinkVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachClassicLinkVpcFuture) Get(ctx workflow.Context) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachInternetGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachInternetGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachNetworkInterfaceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachNetworkInterfaceFuture) Get(ctx workflow.Context) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachVolumeFuture) Get(ctx workflow.Context) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DetachVpnGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DetachVpnGatewayFuture) Get(ctx workflow.Context) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableEbsEncryptionByDefaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableFastSnapshotRestoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableTransitGatewayRouteTablePropagationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableVgwRoutePropagationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableVpcClassicLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisableVpcClassicLinkDnsSupportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateAddressFuture) Get(ctx workflow.Context) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateClientVpnTargetNetworkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateClientVpnTargetNetworkFuture) Get(ctx workflow.Context) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateEnclaveCertificateIamRoleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateEnclaveCertificateIamRoleFuture) Get(ctx workflow.Context) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error) {
	var output ec2.DisassociateEnclaveCertificateIamRoleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateIamInstanceProfileFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateIamInstanceProfileFuture) Get(ctx workflow.Context) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateSubnetCidrBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateSubnetCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateTransitGatewayMulticastDomainFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateTransitGatewayMulticastDomainFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateTransitGatewayRouteTableFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateTransitGatewayRouteTableFuture) Get(ctx workflow.Context) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type DisassociateVpcCidrBlockFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *DisassociateVpcCidrBlockFuture) Get(ctx workflow.Context) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableEbsEncryptionByDefaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableFastSnapshotRestoresFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableFastSnapshotRestoresFuture) Get(ctx workflow.Context) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableTransitGatewayRouteTablePropagationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableTransitGatewayRouteTablePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableVgwRoutePropagationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableVgwRoutePropagationFuture) Get(ctx workflow.Context) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableVolumeIOFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableVolumeIOFuture) Get(ctx workflow.Context) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableVpcClassicLinkFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableVpcClassicLinkFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type EnableVpcClassicLinkDnsSupportFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *EnableVpcClassicLinkDnsSupportFuture) Get(ctx workflow.Context) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportClientVpnClientCertificateRevocationListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportClientVpnClientConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportClientVpnClientConfigurationFuture) Get(ctx workflow.Context) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportImageFuture) Get(ctx workflow.Context) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ExportTransitGatewayRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ExportTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssociatedEnclaveCertificateIamRolesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssociatedEnclaveCertificateIamRolesFuture) Get(ctx workflow.Context) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {
	var output ec2.GetAssociatedEnclaveCertificateIamRolesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetAssociatedIpv6PoolCidrsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetAssociatedIpv6PoolCidrsFuture) Get(ctx workflow.Context) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCapacityReservationUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCapacityReservationUsageFuture) Get(ctx workflow.Context) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetCoipPoolUsageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetCoipPoolUsageFuture) Get(ctx workflow.Context) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConsoleOutputFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConsoleOutputFuture) Get(ctx workflow.Context) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetConsoleScreenshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetConsoleScreenshotFuture) Get(ctx workflow.Context) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetDefaultCreditSpecificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEbsDefaultKmsKeyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetEbsEncryptionByDefaultFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetEbsEncryptionByDefaultFuture) Get(ctx workflow.Context) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetGroupsForCapacityReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetGroupsForCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetHostReservationPurchasePreviewFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetHostReservationPurchasePreviewFuture) Get(ctx workflow.Context) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetLaunchTemplateDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetLaunchTemplateDataFuture) Get(ctx workflow.Context) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetManagedPrefixListAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetManagedPrefixListAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetManagedPrefixListEntriesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetManagedPrefixListEntriesFuture) Get(ctx workflow.Context) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetPasswordDataFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetPasswordDataFuture) Get(ctx workflow.Context) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetReservedInstancesExchangeQuoteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetReservedInstancesExchangeQuoteFuture) Get(ctx workflow.Context) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTransitGatewayAttachmentPropagationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTransitGatewayAttachmentPropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTransitGatewayMulticastDomainAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTransitGatewayMulticastDomainAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTransitGatewayPrefixListReferencesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTransitGatewayPrefixListReferencesFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTransitGatewayRouteTableAssociationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTransitGatewayRouteTableAssociationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type GetTransitGatewayRouteTablePropagationsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *GetTransitGatewayRouteTablePropagationsFuture) Get(ctx workflow.Context) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportClientVpnClientCertificateRevocationListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportClientVpnClientCertificateRevocationListFuture) Get(ctx workflow.Context) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportImageFuture) Get(ctx workflow.Context) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportInstanceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportInstanceFuture) Get(ctx workflow.Context) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportKeyPairFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportKeyPairFuture) Get(ctx workflow.Context) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportSnapshotFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportSnapshotFuture) Get(ctx workflow.Context) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ImportVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ImportVolumeFuture) Get(ctx workflow.Context) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyAvailabilityZoneGroupFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyAvailabilityZoneGroupFuture) Get(ctx workflow.Context) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyCapacityReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyCapacityReservationFuture) Get(ctx workflow.Context) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyClientVpnEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyClientVpnEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyDefaultCreditSpecificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyDefaultCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyEbsDefaultKmsKeyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyFleetFuture) Get(ctx workflow.Context) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyFpgaImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyHostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyHostsFuture) Get(ctx workflow.Context) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyIdentityIdFormatFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyIdentityIdFormatFuture) Get(ctx workflow.Context) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstanceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstanceCapacityReservationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstanceCapacityReservationAttributesFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstanceCreditSpecificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstanceCreditSpecificationFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstanceEventStartTimeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstanceEventStartTimeFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstanceMetadataOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstanceMetadataOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyInstancePlacementFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyInstancePlacementFuture) Get(ctx workflow.Context) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyLaunchTemplateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyLaunchTemplateFuture) Get(ctx workflow.Context) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyManagedPrefixListFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyManagedPrefixListFuture) Get(ctx workflow.Context) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyNetworkInterfaceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyReservedInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyReservedInstancesFuture) Get(ctx workflow.Context) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifySnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifySnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifySubnetAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifySubnetAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTrafficMirrorFilterNetworkServicesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTrafficMirrorFilterNetworkServicesFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTrafficMirrorFilterRuleFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTrafficMirrorFilterRuleFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTrafficMirrorSessionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTrafficMirrorSessionFuture) Get(ctx workflow.Context) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTransitGatewayFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTransitGatewayFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTransitGatewayPrefixListReferenceFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTransitGatewayPrefixListReferenceFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyTransitGatewayVpcAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVolumeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVolumeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVolumeAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVolumeAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcAttributeFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcEndpointFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcEndpointFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcEndpointConnectionNotificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcEndpointConnectionNotificationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcEndpointServiceConfigurationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcEndpointServiceConfigurationFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcEndpointServicePermissionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcEndpointServicePermissionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcPeeringConnectionOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcPeeringConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpcTenancyFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpcTenancyFuture) Get(ctx workflow.Context) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpnConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpnConnectionFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpnConnectionOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpnConnectionOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpnTunnelCertificateFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpnTunnelCertificateFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ModifyVpnTunnelOptionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ModifyVpnTunnelOptionsFuture) Get(ctx workflow.Context) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MonitorInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type MoveAddressToVpcFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *MoveAddressToVpcFuture) Get(ctx workflow.Context) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ProvisionByoipCidrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ProvisionByoipCidrFuture) Get(ctx workflow.Context) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseHostReservationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseHostReservationFuture) Get(ctx workflow.Context) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseReservedInstancesOfferingFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseReservedInstancesOfferingFuture) Get(ctx workflow.Context) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type PurchaseScheduledInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *PurchaseScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RebootInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RebootInstancesFuture) Get(ctx workflow.Context) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterImageFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterImageFuture) Get(ctx workflow.Context) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterInstanceEventNotificationAttributesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterInstanceEventNotificationAttributesFuture) Get(ctx workflow.Context) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTransitGatewayMulticastGroupMembersFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTransitGatewayMulticastGroupMembersFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RegisterTransitGatewayMulticastGroupSourcesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RegisterTransitGatewayMulticastGroupSourcesFuture) Get(ctx workflow.Context) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectTransitGatewayPeeringAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectTransitGatewayPeeringAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectTransitGatewayVpcAttachmentFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectTransitGatewayVpcAttachmentFuture) Get(ctx workflow.Context) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectVpcEndpointConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectVpcEndpointConnectionsFuture) Get(ctx workflow.Context) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RejectVpcPeeringConnectionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RejectVpcPeeringConnectionFuture) Get(ctx workflow.Context) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReleaseAddressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReleaseAddressFuture) Get(ctx workflow.Context) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReleaseHostsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReleaseHostsFuture) Get(ctx workflow.Context) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceIamInstanceProfileAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceIamInstanceProfileAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceNetworkAclAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceNetworkAclAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceNetworkAclEntryFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceNetworkAclEntryFuture) Get(ctx workflow.Context) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceRouteTableAssociationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceRouteTableAssociationFuture) Get(ctx workflow.Context) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReplaceTransitGatewayRouteFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReplaceTransitGatewayRouteFuture) Get(ctx workflow.Context) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ReportInstanceStatusFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ReportInstanceStatusFuture) Get(ctx workflow.Context) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RequestSpotFleetFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RequestSpotFleetFuture) Get(ctx workflow.Context) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RequestSpotInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RequestSpotInstancesFuture) Get(ctx workflow.Context) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetEbsDefaultKmsKeyIdFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetEbsDefaultKmsKeyIdFuture) Get(ctx workflow.Context) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetFpgaImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetFpgaImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetImageAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetImageAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetInstanceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetInstanceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetNetworkInterfaceAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetNetworkInterfaceAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type ResetSnapshotAttributeFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *ResetSnapshotAttributeFuture) Get(ctx workflow.Context) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreAddressToClassicFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreAddressToClassicFuture) Get(ctx workflow.Context) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RestoreManagedPrefixListVersionFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RestoreManagedPrefixListVersionFuture) Get(ctx workflow.Context) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeClientVpnIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeClientVpnIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeSecurityGroupEgressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeSecurityGroupEgressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RevokeSecurityGroupIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RevokeSecurityGroupIngressFuture) Get(ctx workflow.Context) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RunInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RunInstancesFuture) Get(ctx workflow.Context) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type RunScheduledInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *RunScheduledInstancesFuture) Get(ctx workflow.Context) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchLocalGatewayRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchLocalGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchTransitGatewayMulticastGroupsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchTransitGatewayMulticastGroupsFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SearchTransitGatewayRoutesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SearchTransitGatewayRoutesFuture) Get(ctx workflow.Context) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type SendDiagnosticInterruptFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *SendDiagnosticInterruptFuture) Get(ctx workflow.Context) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartInstancesFuture) Get(ctx workflow.Context) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StartVpcEndpointServicePrivateDnsVerificationFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StartVpcEndpointServicePrivateDnsVerificationFuture) Get(ctx workflow.Context) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type StopInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *StopInstancesFuture) Get(ctx workflow.Context) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateClientVpnConnectionsFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateClientVpnConnectionsFuture) Get(ctx workflow.Context) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type TerminateInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *TerminateInstancesFuture) Get(ctx workflow.Context) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnassignIpv6AddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnassignIpv6AddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnassignPrivateIpAddressesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnassignPrivateIpAddressesFuture) Get(ctx workflow.Context) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UnmonitorInstancesFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UnmonitorInstancesFuture) Get(ctx workflow.Context) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSecurityGroupRuleDescriptionsEgressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSecurityGroupRuleDescriptionsEgressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type UpdateSecurityGroupRuleDescriptionsIngressFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *UpdateSecurityGroupRuleDescriptionsIngressFuture) Get(ctx workflow.Context) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

type WithdrawByoipCidrFuture struct {
	// public to support Selector.addFuture
	Future workflow.Future
}

func (r *WithdrawByoipCidrFuture) Get(ctx workflow.Context) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := r.Future.Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) (*ec2.AcceptReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.AcceptReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.AcceptReservedInstancesExchangeQuoteInput) *AcceptReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptReservedInstancesExchangeQuote", input)
	return &AcceptReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *stub) AcceptTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) (*ec2.AcceptTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayPeeringAttachmentInput) *AcceptTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptTransitGatewayPeeringAttachment", input)
	return &AcceptTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *stub) AcceptTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) (*ec2.AcceptTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.AcceptTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.AcceptTransitGatewayVpcAttachmentInput) *AcceptTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptTransitGatewayVpcAttachment", input)
	return &AcceptTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *stub) AcceptVpcEndpointConnections(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) (*ec2.AcceptVpcEndpointConnectionsOutput, error) {
	var output ec2.AcceptVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.AcceptVpcEndpointConnectionsInput) *AcceptVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptVpcEndpointConnections", input)
	return &AcceptVpcEndpointConnectionsFuture{Future: future}
}

func (a *stub) AcceptVpcPeeringConnection(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) (*ec2.AcceptVpcPeeringConnectionOutput, error) {
	var output ec2.AcceptVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AcceptVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.AcceptVpcPeeringConnectionInput) *AcceptVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AcceptVpcPeeringConnection", input)
	return &AcceptVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) AdvertiseByoipCidr(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) (*ec2.AdvertiseByoipCidrOutput, error) {
	var output ec2.AdvertiseByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AdvertiseByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AdvertiseByoipCidrAsync(ctx workflow.Context, input *ec2.AdvertiseByoipCidrInput) *AdvertiseByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AdvertiseByoipCidr", input)
	return &AdvertiseByoipCidrFuture{Future: future}
}

func (a *stub) AllocateAddress(ctx workflow.Context, input *ec2.AllocateAddressInput) (*ec2.AllocateAddressOutput, error) {
	var output ec2.AllocateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AllocateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateAddressAsync(ctx workflow.Context, input *ec2.AllocateAddressInput) *AllocateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AllocateAddress", input)
	return &AllocateAddressFuture{Future: future}
}

func (a *stub) AllocateHosts(ctx workflow.Context, input *ec2.AllocateHostsInput) (*ec2.AllocateHostsOutput, error) {
	var output ec2.AllocateHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AllocateHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AllocateHostsAsync(ctx workflow.Context, input *ec2.AllocateHostsInput) *AllocateHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AllocateHosts", input)
	return &AllocateHostsFuture{Future: future}
}

func (a *stub) ApplySecurityGroupsToClientVpnTargetNetwork(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, error) {
	var output ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ApplySecurityGroupsToClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ApplySecurityGroupsToClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *ApplySecurityGroupsToClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ApplySecurityGroupsToClientVpnTargetNetwork", input)
	return &ApplySecurityGroupsToClientVpnTargetNetworkFuture{Future: future}
}

func (a *stub) AssignIpv6Addresses(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) (*ec2.AssignIpv6AddressesOutput, error) {
	var output ec2.AssignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignIpv6AddressesAsync(ctx workflow.Context, input *ec2.AssignIpv6AddressesInput) *AssignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssignIpv6Addresses", input)
	return &AssignIpv6AddressesFuture{Future: future}
}

func (a *stub) AssignPrivateIpAddresses(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) (*ec2.AssignPrivateIpAddressesOutput, error) {
	var output ec2.AssignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.AssignPrivateIpAddressesInput) *AssignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssignPrivateIpAddresses", input)
	return &AssignPrivateIpAddressesFuture{Future: future}
}

func (a *stub) AssociateAddress(ctx workflow.Context, input *ec2.AssociateAddressInput) (*ec2.AssociateAddressOutput, error) {
	var output ec2.AssociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateAddressAsync(ctx workflow.Context, input *ec2.AssociateAddressInput) *AssociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateAddress", input)
	return &AssociateAddressFuture{Future: future}
}

func (a *stub) AssociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) (*ec2.AssociateClientVpnTargetNetworkOutput, error) {
	var output ec2.AssociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.AssociateClientVpnTargetNetworkInput) *AssociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateClientVpnTargetNetwork", input)
	return &AssociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *stub) AssociateDhcpOptions(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) (*ec2.AssociateDhcpOptionsOutput, error) {
	var output ec2.AssociateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateDhcpOptionsAsync(ctx workflow.Context, input *ec2.AssociateDhcpOptionsInput) *AssociateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateDhcpOptions", input)
	return &AssociateDhcpOptionsFuture{Future: future}
}

func (a *stub) AssociateEnclaveCertificateIamRole(ctx workflow.Context, input *ec2.AssociateEnclaveCertificateIamRoleInput) (*ec2.AssociateEnclaveCertificateIamRoleOutput, error) {
	var output ec2.AssociateEnclaveCertificateIamRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateEnclaveCertificateIamRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateEnclaveCertificateIamRoleAsync(ctx workflow.Context, input *ec2.AssociateEnclaveCertificateIamRoleInput) *AssociateEnclaveCertificateIamRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateEnclaveCertificateIamRole", input)
	return &AssociateEnclaveCertificateIamRoleFuture{Future: future}
}

func (a *stub) AssociateIamInstanceProfile(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) (*ec2.AssociateIamInstanceProfileOutput, error) {
	var output ec2.AssociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.AssociateIamInstanceProfileInput) *AssociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateIamInstanceProfile", input)
	return &AssociateIamInstanceProfileFuture{Future: future}
}

func (a *stub) AssociateRouteTable(ctx workflow.Context, input *ec2.AssociateRouteTableInput) (*ec2.AssociateRouteTableOutput, error) {
	var output ec2.AssociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateRouteTableAsync(ctx workflow.Context, input *ec2.AssociateRouteTableInput) *AssociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateRouteTable", input)
	return &AssociateRouteTableFuture{Future: future}
}

func (a *stub) AssociateSubnetCidrBlock(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) (*ec2.AssociateSubnetCidrBlockOutput, error) {
	var output ec2.AssociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateSubnetCidrBlockInput) *AssociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateSubnetCidrBlock", input)
	return &AssociateSubnetCidrBlockFuture{Future: future}
}

func (a *stub) AssociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) (*ec2.AssociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.AssociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayMulticastDomainInput) *AssociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateTransitGatewayMulticastDomain", input)
	return &AssociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *stub) AssociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) (*ec2.AssociateTransitGatewayRouteTableOutput, error) {
	var output ec2.AssociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.AssociateTransitGatewayRouteTableInput) *AssociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateTransitGatewayRouteTable", input)
	return &AssociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *stub) AssociateVpcCidrBlock(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) (*ec2.AssociateVpcCidrBlockOutput, error) {
	var output ec2.AssociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AssociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.AssociateVpcCidrBlockInput) *AssociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AssociateVpcCidrBlock", input)
	return &AssociateVpcCidrBlockFuture{Future: future}
}

func (a *stub) AttachClassicLinkVpc(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) (*ec2.AttachClassicLinkVpcOutput, error) {
	var output ec2.AttachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AttachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.AttachClassicLinkVpcInput) *AttachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AttachClassicLinkVpc", input)
	return &AttachClassicLinkVpcFuture{Future: future}
}

func (a *stub) AttachInternetGateway(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) (*ec2.AttachInternetGatewayOutput, error) {
	var output ec2.AttachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AttachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachInternetGatewayAsync(ctx workflow.Context, input *ec2.AttachInternetGatewayInput) *AttachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AttachInternetGateway", input)
	return &AttachInternetGatewayFuture{Future: future}
}

func (a *stub) AttachNetworkInterface(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) (*ec2.AttachNetworkInterfaceOutput, error) {
	var output ec2.AttachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AttachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.AttachNetworkInterfaceInput) *AttachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AttachNetworkInterface", input)
	return &AttachNetworkInterfaceFuture{Future: future}
}

func (a *stub) AttachVolume(ctx workflow.Context, input *ec2.AttachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AttachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachVolumeAsync(ctx workflow.Context, input *ec2.AttachVolumeInput) *AttachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AttachVolume", input)
	return &AttachVolumeFuture{Future: future}
}

func (a *stub) AttachVpnGateway(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) (*ec2.AttachVpnGatewayOutput, error) {
	var output ec2.AttachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AttachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AttachVpnGatewayAsync(ctx workflow.Context, input *ec2.AttachVpnGatewayInput) *AttachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AttachVpnGateway", input)
	return &AttachVpnGatewayFuture{Future: future}
}

func (a *stub) AuthorizeClientVpnIngress(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) (*ec2.AuthorizeClientVpnIngressOutput, error) {
	var output ec2.AuthorizeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeClientVpnIngressAsync(ctx workflow.Context, input *ec2.AuthorizeClientVpnIngressInput) *AuthorizeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeClientVpnIngress", input)
	return &AuthorizeClientVpnIngressFuture{Future: future}
}

func (a *stub) AuthorizeSecurityGroupEgress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) (*ec2.AuthorizeSecurityGroupEgressOutput, error) {
	var output ec2.AuthorizeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupEgressInput) *AuthorizeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeSecurityGroupEgress", input)
	return &AuthorizeSecurityGroupEgressFuture{Future: future}
}

func (a *stub) AuthorizeSecurityGroupIngress(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) (*ec2.AuthorizeSecurityGroupIngressOutput, error) {
	var output ec2.AuthorizeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) AuthorizeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.AuthorizeSecurityGroupIngressInput) *AuthorizeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-AuthorizeSecurityGroupIngress", input)
	return &AuthorizeSecurityGroupIngressFuture{Future: future}
}

func (a *stub) BundleInstance(ctx workflow.Context, input *ec2.BundleInstanceInput) (*ec2.BundleInstanceOutput, error) {
	var output ec2.BundleInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-BundleInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) BundleInstanceAsync(ctx workflow.Context, input *ec2.BundleInstanceInput) *BundleInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-BundleInstance", input)
	return &BundleInstanceFuture{Future: future}
}

func (a *stub) CancelBundleTask(ctx workflow.Context, input *ec2.CancelBundleTaskInput) (*ec2.CancelBundleTaskOutput, error) {
	var output ec2.CancelBundleTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelBundleTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelBundleTaskAsync(ctx workflow.Context, input *ec2.CancelBundleTaskInput) *CancelBundleTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelBundleTask", input)
	return &CancelBundleTaskFuture{Future: future}
}

func (a *stub) CancelCapacityReservation(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) (*ec2.CancelCapacityReservationOutput, error) {
	var output ec2.CancelCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelCapacityReservationAsync(ctx workflow.Context, input *ec2.CancelCapacityReservationInput) *CancelCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelCapacityReservation", input)
	return &CancelCapacityReservationFuture{Future: future}
}

func (a *stub) CancelConversionTask(ctx workflow.Context, input *ec2.CancelConversionTaskInput) (*ec2.CancelConversionTaskOutput, error) {
	var output ec2.CancelConversionTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelConversionTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelConversionTaskAsync(ctx workflow.Context, input *ec2.CancelConversionTaskInput) *CancelConversionTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelConversionTask", input)
	return &CancelConversionTaskFuture{Future: future}
}

func (a *stub) CancelExportTask(ctx workflow.Context, input *ec2.CancelExportTaskInput) (*ec2.CancelExportTaskOutput, error) {
	var output ec2.CancelExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelExportTaskAsync(ctx workflow.Context, input *ec2.CancelExportTaskInput) *CancelExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelExportTask", input)
	return &CancelExportTaskFuture{Future: future}
}

func (a *stub) CancelImportTask(ctx workflow.Context, input *ec2.CancelImportTaskInput) (*ec2.CancelImportTaskOutput, error) {
	var output ec2.CancelImportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelImportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelImportTaskAsync(ctx workflow.Context, input *ec2.CancelImportTaskInput) *CancelImportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelImportTask", input)
	return &CancelImportTaskFuture{Future: future}
}

func (a *stub) CancelReservedInstancesListing(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) (*ec2.CancelReservedInstancesListingOutput, error) {
	var output ec2.CancelReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CancelReservedInstancesListingInput) *CancelReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelReservedInstancesListing", input)
	return &CancelReservedInstancesListingFuture{Future: future}
}

func (a *stub) CancelSpotFleetRequests(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) (*ec2.CancelSpotFleetRequestsOutput, error) {
	var output ec2.CancelSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotFleetRequestsInput) *CancelSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelSpotFleetRequests", input)
	return &CancelSpotFleetRequestsFuture{Future: future}
}

func (a *stub) CancelSpotInstanceRequests(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) (*ec2.CancelSpotInstanceRequestsOutput, error) {
	var output ec2.CancelSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CancelSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CancelSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.CancelSpotInstanceRequestsInput) *CancelSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CancelSpotInstanceRequests", input)
	return &CancelSpotInstanceRequestsFuture{Future: future}
}

func (a *stub) ConfirmProductInstance(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) (*ec2.ConfirmProductInstanceOutput, error) {
	var output ec2.ConfirmProductInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ConfirmProductInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ConfirmProductInstanceAsync(ctx workflow.Context, input *ec2.ConfirmProductInstanceInput) *ConfirmProductInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ConfirmProductInstance", input)
	return &ConfirmProductInstanceFuture{Future: future}
}

func (a *stub) CopyFpgaImage(ctx workflow.Context, input *ec2.CopyFpgaImageInput) (*ec2.CopyFpgaImageOutput, error) {
	var output ec2.CopyFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CopyFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyFpgaImageAsync(ctx workflow.Context, input *ec2.CopyFpgaImageInput) *CopyFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CopyFpgaImage", input)
	return &CopyFpgaImageFuture{Future: future}
}

func (a *stub) CopyImage(ctx workflow.Context, input *ec2.CopyImageInput) (*ec2.CopyImageOutput, error) {
	var output ec2.CopyImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CopyImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopyImageAsync(ctx workflow.Context, input *ec2.CopyImageInput) *CopyImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CopyImage", input)
	return &CopyImageFuture{Future: future}
}

func (a *stub) CopySnapshot(ctx workflow.Context, input *ec2.CopySnapshotInput) (*ec2.CopySnapshotOutput, error) {
	var output ec2.CopySnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CopySnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CopySnapshotAsync(ctx workflow.Context, input *ec2.CopySnapshotInput) *CopySnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CopySnapshot", input)
	return &CopySnapshotFuture{Future: future}
}

func (a *stub) CreateCapacityReservation(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) (*ec2.CreateCapacityReservationOutput, error) {
	var output ec2.CreateCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCapacityReservationAsync(ctx workflow.Context, input *ec2.CreateCapacityReservationInput) *CreateCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCapacityReservation", input)
	return &CreateCapacityReservationFuture{Future: future}
}

func (a *stub) CreateCarrierGateway(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) (*ec2.CreateCarrierGatewayOutput, error) {
	var output ec2.CreateCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCarrierGatewayAsync(ctx workflow.Context, input *ec2.CreateCarrierGatewayInput) *CreateCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCarrierGateway", input)
	return &CreateCarrierGatewayFuture{Future: future}
}

func (a *stub) CreateClientVpnEndpoint(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) (*ec2.CreateClientVpnEndpointOutput, error) {
	var output ec2.CreateClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClientVpnEndpointAsync(ctx workflow.Context, input *ec2.CreateClientVpnEndpointInput) *CreateClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateClientVpnEndpoint", input)
	return &CreateClientVpnEndpointFuture{Future: future}
}

func (a *stub) CreateClientVpnRoute(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) (*ec2.CreateClientVpnRouteOutput, error) {
	var output ec2.CreateClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateClientVpnRouteAsync(ctx workflow.Context, input *ec2.CreateClientVpnRouteInput) *CreateClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateClientVpnRoute", input)
	return &CreateClientVpnRouteFuture{Future: future}
}

func (a *stub) CreateCustomerGateway(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) (*ec2.CreateCustomerGatewayOutput, error) {
	var output ec2.CreateCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateCustomerGatewayAsync(ctx workflow.Context, input *ec2.CreateCustomerGatewayInput) *CreateCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateCustomerGateway", input)
	return &CreateCustomerGatewayFuture{Future: future}
}

func (a *stub) CreateDefaultSubnet(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) (*ec2.CreateDefaultSubnetOutput, error) {
	var output ec2.CreateDefaultSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDefaultSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDefaultSubnetAsync(ctx workflow.Context, input *ec2.CreateDefaultSubnetInput) *CreateDefaultSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDefaultSubnet", input)
	return &CreateDefaultSubnetFuture{Future: future}
}

func (a *stub) CreateDefaultVpc(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) (*ec2.CreateDefaultVpcOutput, error) {
	var output ec2.CreateDefaultVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDefaultVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDefaultVpcAsync(ctx workflow.Context, input *ec2.CreateDefaultVpcInput) *CreateDefaultVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDefaultVpc", input)
	return &CreateDefaultVpcFuture{Future: future}
}

func (a *stub) CreateDhcpOptions(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) (*ec2.CreateDhcpOptionsOutput, error) {
	var output ec2.CreateDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateDhcpOptionsAsync(ctx workflow.Context, input *ec2.CreateDhcpOptionsInput) *CreateDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateDhcpOptions", input)
	return &CreateDhcpOptionsFuture{Future: future}
}

func (a *stub) CreateEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) (*ec2.CreateEgressOnlyInternetGatewayOutput, error) {
	var output ec2.CreateEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateEgressOnlyInternetGatewayInput) *CreateEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateEgressOnlyInternetGateway", input)
	return &CreateEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *stub) CreateFleet(ctx workflow.Context, input *ec2.CreateFleetInput) (*ec2.CreateFleetOutput, error) {
	var output ec2.CreateFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFleetAsync(ctx workflow.Context, input *ec2.CreateFleetInput) *CreateFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFleet", input)
	return &CreateFleetFuture{Future: future}
}

func (a *stub) CreateFlowLogs(ctx workflow.Context, input *ec2.CreateFlowLogsInput) (*ec2.CreateFlowLogsOutput, error) {
	var output ec2.CreateFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFlowLogsAsync(ctx workflow.Context, input *ec2.CreateFlowLogsInput) *CreateFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFlowLogs", input)
	return &CreateFlowLogsFuture{Future: future}
}

func (a *stub) CreateFpgaImage(ctx workflow.Context, input *ec2.CreateFpgaImageInput) (*ec2.CreateFpgaImageOutput, error) {
	var output ec2.CreateFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateFpgaImageAsync(ctx workflow.Context, input *ec2.CreateFpgaImageInput) *CreateFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateFpgaImage", input)
	return &CreateFpgaImageFuture{Future: future}
}

func (a *stub) CreateImage(ctx workflow.Context, input *ec2.CreateImageInput) (*ec2.CreateImageOutput, error) {
	var output ec2.CreateImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateImageAsync(ctx workflow.Context, input *ec2.CreateImageInput) *CreateImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateImage", input)
	return &CreateImageFuture{Future: future}
}

func (a *stub) CreateInstanceExportTask(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) (*ec2.CreateInstanceExportTaskOutput, error) {
	var output ec2.CreateInstanceExportTaskOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateInstanceExportTask", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInstanceExportTaskAsync(ctx workflow.Context, input *ec2.CreateInstanceExportTaskInput) *CreateInstanceExportTaskFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateInstanceExportTask", input)
	return &CreateInstanceExportTaskFuture{Future: future}
}

func (a *stub) CreateInternetGateway(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) (*ec2.CreateInternetGatewayOutput, error) {
	var output ec2.CreateInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateInternetGatewayAsync(ctx workflow.Context, input *ec2.CreateInternetGatewayInput) *CreateInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateInternetGateway", input)
	return &CreateInternetGatewayFuture{Future: future}
}

func (a *stub) CreateKeyPair(ctx workflow.Context, input *ec2.CreateKeyPairInput) (*ec2.CreateKeyPairOutput, error) {
	var output ec2.CreateKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateKeyPairAsync(ctx workflow.Context, input *ec2.CreateKeyPairInput) *CreateKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateKeyPair", input)
	return &CreateKeyPairFuture{Future: future}
}

func (a *stub) CreateLaunchTemplate(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) (*ec2.CreateLaunchTemplateOutput, error) {
	var output ec2.CreateLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLaunchTemplateAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateInput) *CreateLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLaunchTemplate", input)
	return &CreateLaunchTemplateFuture{Future: future}
}

func (a *stub) CreateLaunchTemplateVersion(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) (*ec2.CreateLaunchTemplateVersionOutput, error) {
	var output ec2.CreateLaunchTemplateVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLaunchTemplateVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLaunchTemplateVersionAsync(ctx workflow.Context, input *ec2.CreateLaunchTemplateVersionInput) *CreateLaunchTemplateVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLaunchTemplateVersion", input)
	return &CreateLaunchTemplateVersionFuture{Future: future}
}

func (a *stub) CreateLocalGatewayRoute(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) (*ec2.CreateLocalGatewayRouteOutput, error) {
	var output ec2.CreateLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteInput) *CreateLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLocalGatewayRoute", input)
	return &CreateLocalGatewayRouteFuture{Future: future}
}

func (a *stub) CreateLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *CreateLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateLocalGatewayRouteTableVpcAssociation", input)
	return &CreateLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *stub) CreateManagedPrefixList(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) (*ec2.CreateManagedPrefixListOutput, error) {
	var output ec2.CreateManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateManagedPrefixListAsync(ctx workflow.Context, input *ec2.CreateManagedPrefixListInput) *CreateManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateManagedPrefixList", input)
	return &CreateManagedPrefixListFuture{Future: future}
}

func (a *stub) CreateNatGateway(ctx workflow.Context, input *ec2.CreateNatGatewayInput) (*ec2.CreateNatGatewayOutput, error) {
	var output ec2.CreateNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNatGatewayAsync(ctx workflow.Context, input *ec2.CreateNatGatewayInput) *CreateNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNatGateway", input)
	return &CreateNatGatewayFuture{Future: future}
}

func (a *stub) CreateNetworkAcl(ctx workflow.Context, input *ec2.CreateNetworkAclInput) (*ec2.CreateNetworkAclOutput, error) {
	var output ec2.CreateNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkAclAsync(ctx workflow.Context, input *ec2.CreateNetworkAclInput) *CreateNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkAcl", input)
	return &CreateNetworkAclFuture{Future: future}
}

func (a *stub) CreateNetworkAclEntry(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) (*ec2.CreateNetworkAclEntryOutput, error) {
	var output ec2.CreateNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkAclEntryAsync(ctx workflow.Context, input *ec2.CreateNetworkAclEntryInput) *CreateNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkAclEntry", input)
	return &CreateNetworkAclEntryFuture{Future: future}
}

func (a *stub) CreateNetworkInterface(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) (*ec2.CreateNetworkInterfaceOutput, error) {
	var output ec2.CreateNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkInterfaceAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfaceInput) *CreateNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkInterface", input)
	return &CreateNetworkInterfaceFuture{Future: future}
}

func (a *stub) CreateNetworkInterfacePermission(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) (*ec2.CreateNetworkInterfacePermissionOutput, error) {
	var output ec2.CreateNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.CreateNetworkInterfacePermissionInput) *CreateNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateNetworkInterfacePermission", input)
	return &CreateNetworkInterfacePermissionFuture{Future: future}
}

func (a *stub) CreatePlacementGroup(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) (*ec2.CreatePlacementGroupOutput, error) {
	var output ec2.CreatePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreatePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreatePlacementGroupAsync(ctx workflow.Context, input *ec2.CreatePlacementGroupInput) *CreatePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreatePlacementGroup", input)
	return &CreatePlacementGroupFuture{Future: future}
}

func (a *stub) CreateReservedInstancesListing(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) (*ec2.CreateReservedInstancesListingOutput, error) {
	var output ec2.CreateReservedInstancesListingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateReservedInstancesListing", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateReservedInstancesListingAsync(ctx workflow.Context, input *ec2.CreateReservedInstancesListingInput) *CreateReservedInstancesListingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateReservedInstancesListing", input)
	return &CreateReservedInstancesListingFuture{Future: future}
}

func (a *stub) CreateRoute(ctx workflow.Context, input *ec2.CreateRouteInput) (*ec2.CreateRouteOutput, error) {
	var output ec2.CreateRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRouteAsync(ctx workflow.Context, input *ec2.CreateRouteInput) *CreateRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateRoute", input)
	return &CreateRouteFuture{Future: future}
}

func (a *stub) CreateRouteTable(ctx workflow.Context, input *ec2.CreateRouteTableInput) (*ec2.CreateRouteTableOutput, error) {
	var output ec2.CreateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateRouteTableAsync(ctx workflow.Context, input *ec2.CreateRouteTableInput) *CreateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateRouteTable", input)
	return &CreateRouteTableFuture{Future: future}
}

func (a *stub) CreateSecurityGroup(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) (*ec2.CreateSecurityGroupOutput, error) {
	var output ec2.CreateSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSecurityGroupAsync(ctx workflow.Context, input *ec2.CreateSecurityGroupInput) *CreateSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSecurityGroup", input)
	return &CreateSecurityGroupFuture{Future: future}
}

func (a *stub) CreateSnapshot(ctx workflow.Context, input *ec2.CreateSnapshotInput) (*ec2.Snapshot, error) {
	var output ec2.Snapshot
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotAsync(ctx workflow.Context, input *ec2.CreateSnapshotInput) *CreateSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSnapshot", input)
	return &CreateSnapshotFuture{Future: future}
}

func (a *stub) CreateSnapshots(ctx workflow.Context, input *ec2.CreateSnapshotsInput) (*ec2.CreateSnapshotsOutput, error) {
	var output ec2.CreateSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSnapshotsAsync(ctx workflow.Context, input *ec2.CreateSnapshotsInput) *CreateSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSnapshots", input)
	return &CreateSnapshotsFuture{Future: future}
}

func (a *stub) CreateSpotDatafeedSubscription(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) (*ec2.CreateSpotDatafeedSubscriptionOutput, error) {
	var output ec2.CreateSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.CreateSpotDatafeedSubscriptionInput) *CreateSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSpotDatafeedSubscription", input)
	return &CreateSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *stub) CreateSubnet(ctx workflow.Context, input *ec2.CreateSubnetInput) (*ec2.CreateSubnetOutput, error) {
	var output ec2.CreateSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateSubnetAsync(ctx workflow.Context, input *ec2.CreateSubnetInput) *CreateSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateSubnet", input)
	return &CreateSubnetFuture{Future: future}
}

func (a *stub) CreateTags(ctx workflow.Context, input *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	var output ec2.CreateTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTagsAsync(ctx workflow.Context, input *ec2.CreateTagsInput) *CreateTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTags", input)
	return &CreateTagsFuture{Future: future}
}

func (a *stub) CreateTrafficMirrorFilter(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) (*ec2.CreateTrafficMirrorFilterOutput, error) {
	var output ec2.CreateTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterInput) *CreateTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorFilter", input)
	return &CreateTrafficMirrorFilterFuture{Future: future}
}

func (a *stub) CreateTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) (*ec2.CreateTrafficMirrorFilterRuleOutput, error) {
	var output ec2.CreateTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorFilterRuleInput) *CreateTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorFilterRule", input)
	return &CreateTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *stub) CreateTrafficMirrorSession(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) (*ec2.CreateTrafficMirrorSessionOutput, error) {
	var output ec2.CreateTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorSessionInput) *CreateTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorSession", input)
	return &CreateTrafficMirrorSessionFuture{Future: future}
}

func (a *stub) CreateTrafficMirrorTarget(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) (*ec2.CreateTrafficMirrorTargetOutput, error) {
	var output ec2.CreateTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.CreateTrafficMirrorTargetInput) *CreateTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTrafficMirrorTarget", input)
	return &CreateTrafficMirrorTargetFuture{Future: future}
}

func (a *stub) CreateTransitGateway(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) (*ec2.CreateTransitGatewayOutput, error) {
	var output ec2.CreateTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayInput) *CreateTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGateway", input)
	return &CreateTransitGatewayFuture{Future: future}
}

func (a *stub) CreateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) (*ec2.CreateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.CreateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayMulticastDomainInput) *CreateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayMulticastDomain", input)
	return &CreateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *stub) CreateTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) (*ec2.CreateTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPeeringAttachmentInput) *CreateTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayPeeringAttachment", input)
	return &CreateTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *stub) CreateTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) (*ec2.CreateTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.CreateTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayPrefixListReferenceInput) *CreateTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayPrefixListReference", input)
	return &CreateTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *stub) CreateTransitGatewayRoute(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) (*ec2.CreateTransitGatewayRouteOutput, error) {
	var output ec2.CreateTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteInput) *CreateTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayRoute", input)
	return &CreateTransitGatewayRouteFuture{Future: future}
}

func (a *stub) CreateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) (*ec2.CreateTransitGatewayRouteTableOutput, error) {
	var output ec2.CreateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayRouteTableInput) *CreateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayRouteTable", input)
	return &CreateTransitGatewayRouteTableFuture{Future: future}
}

func (a *stub) CreateTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) (*ec2.CreateTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.CreateTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.CreateTransitGatewayVpcAttachmentInput) *CreateTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateTransitGatewayVpcAttachment", input)
	return &CreateTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *stub) CreateVolume(ctx workflow.Context, input *ec2.CreateVolumeInput) (*ec2.Volume, error) {
	var output ec2.Volume
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVolumeAsync(ctx workflow.Context, input *ec2.CreateVolumeInput) *CreateVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVolume", input)
	return &CreateVolumeFuture{Future: future}
}

func (a *stub) CreateVpc(ctx workflow.Context, input *ec2.CreateVpcInput) (*ec2.CreateVpcOutput, error) {
	var output ec2.CreateVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcAsync(ctx workflow.Context, input *ec2.CreateVpcInput) *CreateVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpc", input)
	return &CreateVpcFuture{Future: future}
}

func (a *stub) CreateVpcEndpoint(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) (*ec2.CreateVpcEndpointOutput, error) {
	var output ec2.CreateVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcEndpointAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointInput) *CreateVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpoint", input)
	return &CreateVpcEndpointFuture{Future: future}
}

func (a *stub) CreateVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) (*ec2.CreateVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.CreateVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointConnectionNotificationInput) *CreateVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpointConnectionNotification", input)
	return &CreateVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *stub) CreateVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.CreateVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.CreateVpcEndpointServiceConfigurationInput) *CreateVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcEndpointServiceConfiguration", input)
	return &CreateVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *stub) CreateVpcPeeringConnection(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) (*ec2.CreateVpcPeeringConnectionOutput, error) {
	var output ec2.CreateVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.CreateVpcPeeringConnectionInput) *CreateVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpcPeeringConnection", input)
	return &CreateVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) CreateVpnConnection(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) (*ec2.CreateVpnConnectionOutput, error) {
	var output ec2.CreateVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpnConnectionAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionInput) *CreateVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnConnection", input)
	return &CreateVpnConnectionFuture{Future: future}
}

func (a *stub) CreateVpnConnectionRoute(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) (*ec2.CreateVpnConnectionRouteOutput, error) {
	var output ec2.CreateVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.CreateVpnConnectionRouteInput) *CreateVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnConnectionRoute", input)
	return &CreateVpnConnectionRouteFuture{Future: future}
}

func (a *stub) CreateVpnGateway(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) (*ec2.CreateVpnGatewayOutput, error) {
	var output ec2.CreateVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) CreateVpnGatewayAsync(ctx workflow.Context, input *ec2.CreateVpnGatewayInput) *CreateVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-CreateVpnGateway", input)
	return &CreateVpnGatewayFuture{Future: future}
}

func (a *stub) DeleteCarrierGateway(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) (*ec2.DeleteCarrierGatewayOutput, error) {
	var output ec2.DeleteCarrierGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteCarrierGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCarrierGatewayAsync(ctx workflow.Context, input *ec2.DeleteCarrierGatewayInput) *DeleteCarrierGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteCarrierGateway", input)
	return &DeleteCarrierGatewayFuture{Future: future}
}

func (a *stub) DeleteClientVpnEndpoint(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) (*ec2.DeleteClientVpnEndpointOutput, error) {
	var output ec2.DeleteClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClientVpnEndpointAsync(ctx workflow.Context, input *ec2.DeleteClientVpnEndpointInput) *DeleteClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteClientVpnEndpoint", input)
	return &DeleteClientVpnEndpointFuture{Future: future}
}

func (a *stub) DeleteClientVpnRoute(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) (*ec2.DeleteClientVpnRouteOutput, error) {
	var output ec2.DeleteClientVpnRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteClientVpnRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteClientVpnRouteAsync(ctx workflow.Context, input *ec2.DeleteClientVpnRouteInput) *DeleteClientVpnRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteClientVpnRoute", input)
	return &DeleteClientVpnRouteFuture{Future: future}
}

func (a *stub) DeleteCustomerGateway(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) (*ec2.DeleteCustomerGatewayOutput, error) {
	var output ec2.DeleteCustomerGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteCustomerGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteCustomerGatewayAsync(ctx workflow.Context, input *ec2.DeleteCustomerGatewayInput) *DeleteCustomerGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteCustomerGateway", input)
	return &DeleteCustomerGatewayFuture{Future: future}
}

func (a *stub) DeleteDhcpOptions(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) (*ec2.DeleteDhcpOptionsOutput, error) {
	var output ec2.DeleteDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteDhcpOptionsAsync(ctx workflow.Context, input *ec2.DeleteDhcpOptionsInput) *DeleteDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteDhcpOptions", input)
	return &DeleteDhcpOptionsFuture{Future: future}
}

func (a *stub) DeleteEgressOnlyInternetGateway(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) (*ec2.DeleteEgressOnlyInternetGatewayOutput, error) {
	var output ec2.DeleteEgressOnlyInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteEgressOnlyInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteEgressOnlyInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteEgressOnlyInternetGatewayInput) *DeleteEgressOnlyInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteEgressOnlyInternetGateway", input)
	return &DeleteEgressOnlyInternetGatewayFuture{Future: future}
}

func (a *stub) DeleteFleets(ctx workflow.Context, input *ec2.DeleteFleetsInput) (*ec2.DeleteFleetsOutput, error) {
	var output ec2.DeleteFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFleetsAsync(ctx workflow.Context, input *ec2.DeleteFleetsInput) *DeleteFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFleets", input)
	return &DeleteFleetsFuture{Future: future}
}

func (a *stub) DeleteFlowLogs(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) (*ec2.DeleteFlowLogsOutput, error) {
	var output ec2.DeleteFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFlowLogsAsync(ctx workflow.Context, input *ec2.DeleteFlowLogsInput) *DeleteFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFlowLogs", input)
	return &DeleteFlowLogsFuture{Future: future}
}

func (a *stub) DeleteFpgaImage(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) (*ec2.DeleteFpgaImageOutput, error) {
	var output ec2.DeleteFpgaImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFpgaImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteFpgaImageAsync(ctx workflow.Context, input *ec2.DeleteFpgaImageInput) *DeleteFpgaImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteFpgaImage", input)
	return &DeleteFpgaImageFuture{Future: future}
}

func (a *stub) DeleteInternetGateway(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) (*ec2.DeleteInternetGatewayOutput, error) {
	var output ec2.DeleteInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteInternetGatewayAsync(ctx workflow.Context, input *ec2.DeleteInternetGatewayInput) *DeleteInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteInternetGateway", input)
	return &DeleteInternetGatewayFuture{Future: future}
}

func (a *stub) DeleteKeyPair(ctx workflow.Context, input *ec2.DeleteKeyPairInput) (*ec2.DeleteKeyPairOutput, error) {
	var output ec2.DeleteKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteKeyPairAsync(ctx workflow.Context, input *ec2.DeleteKeyPairInput) *DeleteKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteKeyPair", input)
	return &DeleteKeyPairFuture{Future: future}
}

func (a *stub) DeleteLaunchTemplate(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) (*ec2.DeleteLaunchTemplateOutput, error) {
	var output ec2.DeleteLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLaunchTemplateAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateInput) *DeleteLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLaunchTemplate", input)
	return &DeleteLaunchTemplateFuture{Future: future}
}

func (a *stub) DeleteLaunchTemplateVersions(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) (*ec2.DeleteLaunchTemplateVersionsOutput, error) {
	var output ec2.DeleteLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DeleteLaunchTemplateVersionsInput) *DeleteLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLaunchTemplateVersions", input)
	return &DeleteLaunchTemplateVersionsFuture{Future: future}
}

func (a *stub) DeleteLocalGatewayRoute(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) (*ec2.DeleteLocalGatewayRouteOutput, error) {
	var output ec2.DeleteLocalGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLocalGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLocalGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteInput) *DeleteLocalGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLocalGatewayRoute", input)
	return &DeleteLocalGatewayRouteFuture{Future: future}
}

func (a *stub) DeleteLocalGatewayRouteTableVpcAssociation(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, error) {
	var output ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLocalGatewayRouteTableVpcAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteLocalGatewayRouteTableVpcAssociationAsync(ctx workflow.Context, input *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *DeleteLocalGatewayRouteTableVpcAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteLocalGatewayRouteTableVpcAssociation", input)
	return &DeleteLocalGatewayRouteTableVpcAssociationFuture{Future: future}
}

func (a *stub) DeleteManagedPrefixList(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) (*ec2.DeleteManagedPrefixListOutput, error) {
	var output ec2.DeleteManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteManagedPrefixListAsync(ctx workflow.Context, input *ec2.DeleteManagedPrefixListInput) *DeleteManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteManagedPrefixList", input)
	return &DeleteManagedPrefixListFuture{Future: future}
}

func (a *stub) DeleteNatGateway(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) (*ec2.DeleteNatGatewayOutput, error) {
	var output ec2.DeleteNatGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNatGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNatGatewayAsync(ctx workflow.Context, input *ec2.DeleteNatGatewayInput) *DeleteNatGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNatGateway", input)
	return &DeleteNatGatewayFuture{Future: future}
}

func (a *stub) DeleteNetworkAcl(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) (*ec2.DeleteNetworkAclOutput, error) {
	var output ec2.DeleteNetworkAclOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkAcl", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkAclAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclInput) *DeleteNetworkAclFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkAcl", input)
	return &DeleteNetworkAclFuture{Future: future}
}

func (a *stub) DeleteNetworkAclEntry(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) (*ec2.DeleteNetworkAclEntryOutput, error) {
	var output ec2.DeleteNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkAclEntryAsync(ctx workflow.Context, input *ec2.DeleteNetworkAclEntryInput) *DeleteNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkAclEntry", input)
	return &DeleteNetworkAclEntryFuture{Future: future}
}

func (a *stub) DeleteNetworkInterface(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) (*ec2.DeleteNetworkInterfaceOutput, error) {
	var output ec2.DeleteNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfaceInput) *DeleteNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkInterface", input)
	return &DeleteNetworkInterfaceFuture{Future: future}
}

func (a *stub) DeleteNetworkInterfacePermission(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) (*ec2.DeleteNetworkInterfacePermissionOutput, error) {
	var output ec2.DeleteNetworkInterfacePermissionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkInterfacePermission", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteNetworkInterfacePermissionAsync(ctx workflow.Context, input *ec2.DeleteNetworkInterfacePermissionInput) *DeleteNetworkInterfacePermissionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteNetworkInterfacePermission", input)
	return &DeleteNetworkInterfacePermissionFuture{Future: future}
}

func (a *stub) DeletePlacementGroup(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) (*ec2.DeletePlacementGroupOutput, error) {
	var output ec2.DeletePlacementGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeletePlacementGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeletePlacementGroupAsync(ctx workflow.Context, input *ec2.DeletePlacementGroupInput) *DeletePlacementGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeletePlacementGroup", input)
	return &DeletePlacementGroupFuture{Future: future}
}

func (a *stub) DeleteQueuedReservedInstances(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) (*ec2.DeleteQueuedReservedInstancesOutput, error) {
	var output ec2.DeleteQueuedReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteQueuedReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteQueuedReservedInstancesAsync(ctx workflow.Context, input *ec2.DeleteQueuedReservedInstancesInput) *DeleteQueuedReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteQueuedReservedInstances", input)
	return &DeleteQueuedReservedInstancesFuture{Future: future}
}

func (a *stub) DeleteRoute(ctx workflow.Context, input *ec2.DeleteRouteInput) (*ec2.DeleteRouteOutput, error) {
	var output ec2.DeleteRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteAsync(ctx workflow.Context, input *ec2.DeleteRouteInput) *DeleteRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteRoute", input)
	return &DeleteRouteFuture{Future: future}
}

func (a *stub) DeleteRouteTable(ctx workflow.Context, input *ec2.DeleteRouteTableInput) (*ec2.DeleteRouteTableOutput, error) {
	var output ec2.DeleteRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteRouteTableAsync(ctx workflow.Context, input *ec2.DeleteRouteTableInput) *DeleteRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteRouteTable", input)
	return &DeleteRouteTableFuture{Future: future}
}

func (a *stub) DeleteSecurityGroup(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) (*ec2.DeleteSecurityGroupOutput, error) {
	var output ec2.DeleteSecurityGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSecurityGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSecurityGroupAsync(ctx workflow.Context, input *ec2.DeleteSecurityGroupInput) *DeleteSecurityGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSecurityGroup", input)
	return &DeleteSecurityGroupFuture{Future: future}
}

func (a *stub) DeleteSnapshot(ctx workflow.Context, input *ec2.DeleteSnapshotInput) (*ec2.DeleteSnapshotOutput, error) {
	var output ec2.DeleteSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSnapshotAsync(ctx workflow.Context, input *ec2.DeleteSnapshotInput) *DeleteSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSnapshot", input)
	return &DeleteSnapshotFuture{Future: future}
}

func (a *stub) DeleteSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) (*ec2.DeleteSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DeleteSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DeleteSpotDatafeedSubscriptionInput) *DeleteSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSpotDatafeedSubscription", input)
	return &DeleteSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *stub) DeleteSubnet(ctx workflow.Context, input *ec2.DeleteSubnetInput) (*ec2.DeleteSubnetOutput, error) {
	var output ec2.DeleteSubnetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSubnet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteSubnetAsync(ctx workflow.Context, input *ec2.DeleteSubnetInput) *DeleteSubnetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteSubnet", input)
	return &DeleteSubnetFuture{Future: future}
}

func (a *stub) DeleteTags(ctx workflow.Context, input *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	var output ec2.DeleteTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTagsAsync(ctx workflow.Context, input *ec2.DeleteTagsInput) *DeleteTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTags", input)
	return &DeleteTagsFuture{Future: future}
}

func (a *stub) DeleteTrafficMirrorFilter(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) (*ec2.DeleteTrafficMirrorFilterOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorFilter", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficMirrorFilterAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterInput) *DeleteTrafficMirrorFilterFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorFilter", input)
	return &DeleteTrafficMirrorFilterFuture{Future: future}
}

func (a *stub) DeleteTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) (*ec2.DeleteTrafficMirrorFilterRuleOutput, error) {
	var output ec2.DeleteTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorFilterRuleInput) *DeleteTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorFilterRule", input)
	return &DeleteTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *stub) DeleteTrafficMirrorSession(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) (*ec2.DeleteTrafficMirrorSessionOutput, error) {
	var output ec2.DeleteTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorSessionInput) *DeleteTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorSession", input)
	return &DeleteTrafficMirrorSessionFuture{Future: future}
}

func (a *stub) DeleteTrafficMirrorTarget(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) (*ec2.DeleteTrafficMirrorTargetOutput, error) {
	var output ec2.DeleteTrafficMirrorTargetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorTarget", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTrafficMirrorTargetAsync(ctx workflow.Context, input *ec2.DeleteTrafficMirrorTargetInput) *DeleteTrafficMirrorTargetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTrafficMirrorTarget", input)
	return &DeleteTrafficMirrorTargetFuture{Future: future}
}

func (a *stub) DeleteTransitGateway(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) (*ec2.DeleteTransitGatewayOutput, error) {
	var output ec2.DeleteTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayInput) *DeleteTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGateway", input)
	return &DeleteTransitGatewayFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) (*ec2.DeleteTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DeleteTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayMulticastDomainInput) *DeleteTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayMulticastDomain", input)
	return &DeleteTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) (*ec2.DeleteTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPeeringAttachmentInput) *DeleteTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayPeeringAttachment", input)
	return &DeleteTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) (*ec2.DeleteTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.DeleteTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayPrefixListReferenceInput) *DeleteTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayPrefixListReference", input)
	return &DeleteTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayRoute(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) (*ec2.DeleteTransitGatewayRouteOutput, error) {
	var output ec2.DeleteTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteInput) *DeleteTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayRoute", input)
	return &DeleteTransitGatewayRouteFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) (*ec2.DeleteTransitGatewayRouteTableOutput, error) {
	var output ec2.DeleteTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayRouteTableInput) *DeleteTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayRouteTable", input)
	return &DeleteTransitGatewayRouteTableFuture{Future: future}
}

func (a *stub) DeleteTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) (*ec2.DeleteTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.DeleteTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.DeleteTransitGatewayVpcAttachmentInput) *DeleteTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteTransitGatewayVpcAttachment", input)
	return &DeleteTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *stub) DeleteVolume(ctx workflow.Context, input *ec2.DeleteVolumeInput) (*ec2.DeleteVolumeOutput, error) {
	var output ec2.DeleteVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVolumeAsync(ctx workflow.Context, input *ec2.DeleteVolumeInput) *DeleteVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVolume", input)
	return &DeleteVolumeFuture{Future: future}
}

func (a *stub) DeleteVpc(ctx workflow.Context, input *ec2.DeleteVpcInput) (*ec2.DeleteVpcOutput, error) {
	var output ec2.DeleteVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcAsync(ctx workflow.Context, input *ec2.DeleteVpcInput) *DeleteVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpc", input)
	return &DeleteVpcFuture{Future: future}
}

func (a *stub) DeleteVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) (*ec2.DeleteVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DeleteVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointConnectionNotificationsInput) *DeleteVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpointConnectionNotifications", input)
	return &DeleteVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *stub) DeleteVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DeleteVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointServiceConfigurationsInput) *DeleteVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpointServiceConfigurations", input)
	return &DeleteVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *stub) DeleteVpcEndpoints(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) (*ec2.DeleteVpcEndpointsOutput, error) {
	var output ec2.DeleteVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcEndpointsAsync(ctx workflow.Context, input *ec2.DeleteVpcEndpointsInput) *DeleteVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcEndpoints", input)
	return &DeleteVpcEndpointsFuture{Future: future}
}

func (a *stub) DeleteVpcPeeringConnection(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) (*ec2.DeleteVpcPeeringConnectionOutput, error) {
	var output ec2.DeleteVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpcPeeringConnectionInput) *DeleteVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpcPeeringConnection", input)
	return &DeleteVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) DeleteVpnConnection(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) (*ec2.DeleteVpnConnectionOutput, error) {
	var output ec2.DeleteVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpnConnectionAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionInput) *DeleteVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnConnection", input)
	return &DeleteVpnConnectionFuture{Future: future}
}

func (a *stub) DeleteVpnConnectionRoute(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) (*ec2.DeleteVpnConnectionRouteOutput, error) {
	var output ec2.DeleteVpnConnectionRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnConnectionRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpnConnectionRouteAsync(ctx workflow.Context, input *ec2.DeleteVpnConnectionRouteInput) *DeleteVpnConnectionRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnConnectionRoute", input)
	return &DeleteVpnConnectionRouteFuture{Future: future}
}

func (a *stub) DeleteVpnGateway(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) (*ec2.DeleteVpnGatewayOutput, error) {
	var output ec2.DeleteVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeleteVpnGatewayAsync(ctx workflow.Context, input *ec2.DeleteVpnGatewayInput) *DeleteVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeleteVpnGateway", input)
	return &DeleteVpnGatewayFuture{Future: future}
}

func (a *stub) DeprovisionByoipCidr(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) (*ec2.DeprovisionByoipCidrOutput, error) {
	var output ec2.DeprovisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeprovisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeprovisionByoipCidrAsync(ctx workflow.Context, input *ec2.DeprovisionByoipCidrInput) *DeprovisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeprovisionByoipCidr", input)
	return &DeprovisionByoipCidrFuture{Future: future}
}

func (a *stub) DeregisterImage(ctx workflow.Context, input *ec2.DeregisterImageInput) (*ec2.DeregisterImageOutput, error) {
	var output ec2.DeregisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterImageAsync(ctx workflow.Context, input *ec2.DeregisterImageInput) *DeregisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterImage", input)
	return &DeregisterImageFuture{Future: future}
}

func (a *stub) DeregisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) (*ec2.DeregisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DeregisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DeregisterInstanceEventNotificationAttributesInput) *DeregisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterInstanceEventNotificationAttributes", input)
	return &DeregisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *stub) DeregisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *DeregisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterTransitGatewayMulticastGroupMembers", input)
	return &DeregisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *stub) DeregisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DeregisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *DeregisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DeregisterTransitGatewayMulticastGroupSources", input)
	return &DeregisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *stub) DescribeAccountAttributes(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) (*ec2.DescribeAccountAttributesOutput, error) {
	var output ec2.DescribeAccountAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAccountAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAccountAttributesAsync(ctx workflow.Context, input *ec2.DescribeAccountAttributesInput) *DescribeAccountAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAccountAttributes", input)
	return &DescribeAccountAttributesFuture{Future: future}
}

func (a *stub) DescribeAddresses(ctx workflow.Context, input *ec2.DescribeAddressesInput) (*ec2.DescribeAddressesOutput, error) {
	var output ec2.DescribeAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAddressesAsync(ctx workflow.Context, input *ec2.DescribeAddressesInput) *DescribeAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAddresses", input)
	return &DescribeAddressesFuture{Future: future}
}

func (a *stub) DescribeAggregateIdFormat(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) (*ec2.DescribeAggregateIdFormatOutput, error) {
	var output ec2.DescribeAggregateIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAggregateIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAggregateIdFormatAsync(ctx workflow.Context, input *ec2.DescribeAggregateIdFormatInput) *DescribeAggregateIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAggregateIdFormat", input)
	return &DescribeAggregateIdFormatFuture{Future: future}
}

func (a *stub) DescribeAvailabilityZones(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) (*ec2.DescribeAvailabilityZonesOutput, error) {
	var output ec2.DescribeAvailabilityZonesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAvailabilityZones", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeAvailabilityZonesAsync(ctx workflow.Context, input *ec2.DescribeAvailabilityZonesInput) *DescribeAvailabilityZonesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeAvailabilityZones", input)
	return &DescribeAvailabilityZonesFuture{Future: future}
}

func (a *stub) DescribeBundleTasks(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) (*ec2.DescribeBundleTasksOutput, error) {
	var output ec2.DescribeBundleTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeBundleTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeBundleTasksAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *DescribeBundleTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeBundleTasks", input)
	return &DescribeBundleTasksFuture{Future: future}
}

func (a *stub) DescribeByoipCidrs(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) (*ec2.DescribeByoipCidrsOutput, error) {
	var output ec2.DescribeByoipCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeByoipCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeByoipCidrsAsync(ctx workflow.Context, input *ec2.DescribeByoipCidrsInput) *DescribeByoipCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeByoipCidrs", input)
	return &DescribeByoipCidrsFuture{Future: future}
}

func (a *stub) DescribeCapacityReservations(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) (*ec2.DescribeCapacityReservationsOutput, error) {
	var output ec2.DescribeCapacityReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCapacityReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCapacityReservationsAsync(ctx workflow.Context, input *ec2.DescribeCapacityReservationsInput) *DescribeCapacityReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCapacityReservations", input)
	return &DescribeCapacityReservationsFuture{Future: future}
}

func (a *stub) DescribeCarrierGateways(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) (*ec2.DescribeCarrierGatewaysOutput, error) {
	var output ec2.DescribeCarrierGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCarrierGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCarrierGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCarrierGatewaysInput) *DescribeCarrierGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCarrierGateways", input)
	return &DescribeCarrierGatewaysFuture{Future: future}
}

func (a *stub) DescribeClassicLinkInstances(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) (*ec2.DescribeClassicLinkInstancesOutput, error) {
	var output ec2.DescribeClassicLinkInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClassicLinkInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClassicLinkInstancesAsync(ctx workflow.Context, input *ec2.DescribeClassicLinkInstancesInput) *DescribeClassicLinkInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClassicLinkInstances", input)
	return &DescribeClassicLinkInstancesFuture{Future: future}
}

func (a *stub) DescribeClientVpnAuthorizationRules(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) (*ec2.DescribeClientVpnAuthorizationRulesOutput, error) {
	var output ec2.DescribeClientVpnAuthorizationRulesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnAuthorizationRules", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientVpnAuthorizationRulesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnAuthorizationRulesInput) *DescribeClientVpnAuthorizationRulesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnAuthorizationRules", input)
	return &DescribeClientVpnAuthorizationRulesFuture{Future: future}
}

func (a *stub) DescribeClientVpnConnections(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) (*ec2.DescribeClientVpnConnectionsOutput, error) {
	var output ec2.DescribeClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnConnectionsInput) *DescribeClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnConnections", input)
	return &DescribeClientVpnConnectionsFuture{Future: future}
}

func (a *stub) DescribeClientVpnEndpoints(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) (*ec2.DescribeClientVpnEndpointsOutput, error) {
	var output ec2.DescribeClientVpnEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientVpnEndpointsAsync(ctx workflow.Context, input *ec2.DescribeClientVpnEndpointsInput) *DescribeClientVpnEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnEndpoints", input)
	return &DescribeClientVpnEndpointsFuture{Future: future}
}

func (a *stub) DescribeClientVpnRoutes(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) (*ec2.DescribeClientVpnRoutesOutput, error) {
	var output ec2.DescribeClientVpnRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientVpnRoutesAsync(ctx workflow.Context, input *ec2.DescribeClientVpnRoutesInput) *DescribeClientVpnRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnRoutes", input)
	return &DescribeClientVpnRoutesFuture{Future: future}
}

func (a *stub) DescribeClientVpnTargetNetworks(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) (*ec2.DescribeClientVpnTargetNetworksOutput, error) {
	var output ec2.DescribeClientVpnTargetNetworksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnTargetNetworks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeClientVpnTargetNetworksAsync(ctx workflow.Context, input *ec2.DescribeClientVpnTargetNetworksInput) *DescribeClientVpnTargetNetworksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeClientVpnTargetNetworks", input)
	return &DescribeClientVpnTargetNetworksFuture{Future: future}
}

func (a *stub) DescribeCoipPools(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) (*ec2.DescribeCoipPoolsOutput, error) {
	var output ec2.DescribeCoipPoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCoipPools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCoipPoolsAsync(ctx workflow.Context, input *ec2.DescribeCoipPoolsInput) *DescribeCoipPoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCoipPools", input)
	return &DescribeCoipPoolsFuture{Future: future}
}

func (a *stub) DescribeConversionTasks(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) (*ec2.DescribeConversionTasksOutput, error) {
	var output ec2.DescribeConversionTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeConversionTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeConversionTasksAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *DescribeConversionTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeConversionTasks", input)
	return &DescribeConversionTasksFuture{Future: future}
}

func (a *stub) DescribeCustomerGateways(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) (*ec2.DescribeCustomerGatewaysOutput, error) {
	var output ec2.DescribeCustomerGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCustomerGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeCustomerGatewaysAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *DescribeCustomerGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeCustomerGateways", input)
	return &DescribeCustomerGatewaysFuture{Future: future}
}

func (a *stub) DescribeDhcpOptions(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) (*ec2.DescribeDhcpOptionsOutput, error) {
	var output ec2.DescribeDhcpOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeDhcpOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeDhcpOptionsAsync(ctx workflow.Context, input *ec2.DescribeDhcpOptionsInput) *DescribeDhcpOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeDhcpOptions", input)
	return &DescribeDhcpOptionsFuture{Future: future}
}

func (a *stub) DescribeEgressOnlyInternetGateways(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) (*ec2.DescribeEgressOnlyInternetGatewaysOutput, error) {
	var output ec2.DescribeEgressOnlyInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeEgressOnlyInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeEgressOnlyInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeEgressOnlyInternetGatewaysInput) *DescribeEgressOnlyInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeEgressOnlyInternetGateways", input)
	return &DescribeEgressOnlyInternetGatewaysFuture{Future: future}
}

func (a *stub) DescribeElasticGpus(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) (*ec2.DescribeElasticGpusOutput, error) {
	var output ec2.DescribeElasticGpusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeElasticGpus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeElasticGpusAsync(ctx workflow.Context, input *ec2.DescribeElasticGpusInput) *DescribeElasticGpusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeElasticGpus", input)
	return &DescribeElasticGpusFuture{Future: future}
}

func (a *stub) DescribeExportImageTasks(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) (*ec2.DescribeExportImageTasksOutput, error) {
	var output ec2.DescribeExportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeExportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeExportImageTasksInput) *DescribeExportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeExportImageTasks", input)
	return &DescribeExportImageTasksFuture{Future: future}
}

func (a *stub) DescribeExportTasks(ctx workflow.Context, input *ec2.DescribeExportTasksInput) (*ec2.DescribeExportTasksOutput, error) {
	var output ec2.DescribeExportTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeExportTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeExportTasksAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *DescribeExportTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeExportTasks", input)
	return &DescribeExportTasksFuture{Future: future}
}

func (a *stub) DescribeFastSnapshotRestores(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) (*ec2.DescribeFastSnapshotRestoresOutput, error) {
	var output ec2.DescribeFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DescribeFastSnapshotRestoresInput) *DescribeFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFastSnapshotRestores", input)
	return &DescribeFastSnapshotRestoresFuture{Future: future}
}

func (a *stub) DescribeFleetHistory(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) (*ec2.DescribeFleetHistoryOutput, error) {
	var output ec2.DescribeFleetHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleetHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetHistoryAsync(ctx workflow.Context, input *ec2.DescribeFleetHistoryInput) *DescribeFleetHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleetHistory", input)
	return &DescribeFleetHistoryFuture{Future: future}
}

func (a *stub) DescribeFleetInstances(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) (*ec2.DescribeFleetInstancesOutput, error) {
	var output ec2.DescribeFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeFleetInstancesInput) *DescribeFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleetInstances", input)
	return &DescribeFleetInstancesFuture{Future: future}
}

func (a *stub) DescribeFleets(ctx workflow.Context, input *ec2.DescribeFleetsInput) (*ec2.DescribeFleetsOutput, error) {
	var output ec2.DescribeFleetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFleetsAsync(ctx workflow.Context, input *ec2.DescribeFleetsInput) *DescribeFleetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFleets", input)
	return &DescribeFleetsFuture{Future: future}
}

func (a *stub) DescribeFlowLogs(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) (*ec2.DescribeFlowLogsOutput, error) {
	var output ec2.DescribeFlowLogsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFlowLogs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFlowLogsAsync(ctx workflow.Context, input *ec2.DescribeFlowLogsInput) *DescribeFlowLogsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFlowLogs", input)
	return &DescribeFlowLogsFuture{Future: future}
}

func (a *stub) DescribeFpgaImageAttribute(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) (*ec2.DescribeFpgaImageAttributeOutput, error) {
	var output ec2.DescribeFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeFpgaImageAttributeInput) *DescribeFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFpgaImageAttribute", input)
	return &DescribeFpgaImageAttributeFuture{Future: future}
}

func (a *stub) DescribeFpgaImages(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) (*ec2.DescribeFpgaImagesOutput, error) {
	var output ec2.DescribeFpgaImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFpgaImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeFpgaImagesAsync(ctx workflow.Context, input *ec2.DescribeFpgaImagesInput) *DescribeFpgaImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeFpgaImages", input)
	return &DescribeFpgaImagesFuture{Future: future}
}

func (a *stub) DescribeHostReservationOfferings(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) (*ec2.DescribeHostReservationOfferingsOutput, error) {
	var output ec2.DescribeHostReservationOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHostReservationOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHostReservationOfferingsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationOfferingsInput) *DescribeHostReservationOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHostReservationOfferings", input)
	return &DescribeHostReservationOfferingsFuture{Future: future}
}

func (a *stub) DescribeHostReservations(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) (*ec2.DescribeHostReservationsOutput, error) {
	var output ec2.DescribeHostReservationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHostReservations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHostReservationsAsync(ctx workflow.Context, input *ec2.DescribeHostReservationsInput) *DescribeHostReservationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHostReservations", input)
	return &DescribeHostReservationsFuture{Future: future}
}

func (a *stub) DescribeHosts(ctx workflow.Context, input *ec2.DescribeHostsInput) (*ec2.DescribeHostsOutput, error) {
	var output ec2.DescribeHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeHostsAsync(ctx workflow.Context, input *ec2.DescribeHostsInput) *DescribeHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeHosts", input)
	return &DescribeHostsFuture{Future: future}
}

func (a *stub) DescribeIamInstanceProfileAssociations(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) (*ec2.DescribeIamInstanceProfileAssociationsOutput, error) {
	var output ec2.DescribeIamInstanceProfileAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIamInstanceProfileAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIamInstanceProfileAssociationsAsync(ctx workflow.Context, input *ec2.DescribeIamInstanceProfileAssociationsInput) *DescribeIamInstanceProfileAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIamInstanceProfileAssociations", input)
	return &DescribeIamInstanceProfileAssociationsFuture{Future: future}
}

func (a *stub) DescribeIdFormat(ctx workflow.Context, input *ec2.DescribeIdFormatInput) (*ec2.DescribeIdFormatOutput, error) {
	var output ec2.DescribeIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdFormatInput) *DescribeIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIdFormat", input)
	return &DescribeIdFormatFuture{Future: future}
}

func (a *stub) DescribeIdentityIdFormat(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) (*ec2.DescribeIdentityIdFormatOutput, error) {
	var output ec2.DescribeIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIdentityIdFormatAsync(ctx workflow.Context, input *ec2.DescribeIdentityIdFormatInput) *DescribeIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIdentityIdFormat", input)
	return &DescribeIdentityIdFormatFuture{Future: future}
}

func (a *stub) DescribeImageAttribute(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) (*ec2.DescribeImageAttributeOutput, error) {
	var output ec2.DescribeImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImageAttributeAsync(ctx workflow.Context, input *ec2.DescribeImageAttributeInput) *DescribeImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImageAttribute", input)
	return &DescribeImageAttributeFuture{Future: future}
}

func (a *stub) DescribeImages(ctx workflow.Context, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	var output ec2.DescribeImagesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImages", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImagesAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *DescribeImagesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImages", input)
	return &DescribeImagesFuture{Future: future}
}

func (a *stub) DescribeImportImageTasks(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) (*ec2.DescribeImportImageTasksOutput, error) {
	var output ec2.DescribeImportImageTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImportImageTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImportImageTasksAsync(ctx workflow.Context, input *ec2.DescribeImportImageTasksInput) *DescribeImportImageTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImportImageTasks", input)
	return &DescribeImportImageTasksFuture{Future: future}
}

func (a *stub) DescribeImportSnapshotTasks(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) (*ec2.DescribeImportSnapshotTasksOutput, error) {
	var output ec2.DescribeImportSnapshotTasksOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImportSnapshotTasks", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeImportSnapshotTasksAsync(ctx workflow.Context, input *ec2.DescribeImportSnapshotTasksInput) *DescribeImportSnapshotTasksFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeImportSnapshotTasks", input)
	return &DescribeImportSnapshotTasksFuture{Future: future}
}

func (a *stub) DescribeInstanceAttribute(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) (*ec2.DescribeInstanceAttributeOutput, error) {
	var output ec2.DescribeInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceAttributeAsync(ctx workflow.Context, input *ec2.DescribeInstanceAttributeInput) *DescribeInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceAttribute", input)
	return &DescribeInstanceAttributeFuture{Future: future}
}

func (a *stub) DescribeInstanceCreditSpecifications(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) (*ec2.DescribeInstanceCreditSpecificationsOutput, error) {
	var output ec2.DescribeInstanceCreditSpecificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceCreditSpecifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceCreditSpecificationsAsync(ctx workflow.Context, input *ec2.DescribeInstanceCreditSpecificationsInput) *DescribeInstanceCreditSpecificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceCreditSpecifications", input)
	return &DescribeInstanceCreditSpecificationsFuture{Future: future}
}

func (a *stub) DescribeInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) (*ec2.DescribeInstanceEventNotificationAttributesOutput, error) {
	var output ec2.DescribeInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.DescribeInstanceEventNotificationAttributesInput) *DescribeInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceEventNotificationAttributes", input)
	return &DescribeInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *stub) DescribeInstanceStatus(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	var output ec2.DescribeInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceStatusAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *DescribeInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceStatus", input)
	return &DescribeInstanceStatusFuture{Future: future}
}

func (a *stub) DescribeInstanceTypeOfferings(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) (*ec2.DescribeInstanceTypeOfferingsOutput, error) {
	var output ec2.DescribeInstanceTypeOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceTypeOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceTypeOfferingsAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypeOfferingsInput) *DescribeInstanceTypeOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceTypeOfferings", input)
	return &DescribeInstanceTypeOfferingsFuture{Future: future}
}

func (a *stub) DescribeInstanceTypes(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) (*ec2.DescribeInstanceTypesOutput, error) {
	var output ec2.DescribeInstanceTypesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceTypes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstanceTypesAsync(ctx workflow.Context, input *ec2.DescribeInstanceTypesInput) *DescribeInstanceTypesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstanceTypes", input)
	return &DescribeInstanceTypesFuture{Future: future}
}

func (a *stub) DescribeInstances(ctx workflow.Context, input *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	var output ec2.DescribeInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInstancesAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *DescribeInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInstances", input)
	return &DescribeInstancesFuture{Future: future}
}

func (a *stub) DescribeInternetGateways(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) (*ec2.DescribeInternetGatewaysOutput, error) {
	var output ec2.DescribeInternetGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInternetGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeInternetGatewaysAsync(ctx workflow.Context, input *ec2.DescribeInternetGatewaysInput) *DescribeInternetGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeInternetGateways", input)
	return &DescribeInternetGatewaysFuture{Future: future}
}

func (a *stub) DescribeIpv6Pools(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) (*ec2.DescribeIpv6PoolsOutput, error) {
	var output ec2.DescribeIpv6PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIpv6Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeIpv6PoolsAsync(ctx workflow.Context, input *ec2.DescribeIpv6PoolsInput) *DescribeIpv6PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeIpv6Pools", input)
	return &DescribeIpv6PoolsFuture{Future: future}
}

func (a *stub) DescribeKeyPairs(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) (*ec2.DescribeKeyPairsOutput, error) {
	var output ec2.DescribeKeyPairsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeKeyPairs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeKeyPairsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *DescribeKeyPairsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeKeyPairs", input)
	return &DescribeKeyPairsFuture{Future: future}
}

func (a *stub) DescribeLaunchTemplateVersions(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) (*ec2.DescribeLaunchTemplateVersionsOutput, error) {
	var output ec2.DescribeLaunchTemplateVersionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLaunchTemplateVersions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLaunchTemplateVersionsAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplateVersionsInput) *DescribeLaunchTemplateVersionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLaunchTemplateVersions", input)
	return &DescribeLaunchTemplateVersionsFuture{Future: future}
}

func (a *stub) DescribeLaunchTemplates(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) (*ec2.DescribeLaunchTemplatesOutput, error) {
	var output ec2.DescribeLaunchTemplatesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLaunchTemplates", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLaunchTemplatesAsync(ctx workflow.Context, input *ec2.DescribeLaunchTemplatesInput) *DescribeLaunchTemplatesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLaunchTemplates", input)
	return &DescribeLaunchTemplatesFuture{Future: future}
}

func (a *stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", input)
	return &DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsFuture{Future: future}
}

func (a *stub) DescribeLocalGatewayRouteTableVpcAssociations(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTableVpcAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewayRouteTableVpcAssociationsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *DescribeLocalGatewayRouteTableVpcAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTableVpcAssociations", input)
	return &DescribeLocalGatewayRouteTableVpcAssociationsFuture{Future: future}
}

func (a *stub) DescribeLocalGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) (*ec2.DescribeLocalGatewayRouteTablesOutput, error) {
	var output ec2.DescribeLocalGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayRouteTablesInput) *DescribeLocalGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayRouteTables", input)
	return &DescribeLocalGatewayRouteTablesFuture{Future: future}
}

func (a *stub) DescribeLocalGatewayVirtualInterfaceGroups(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayVirtualInterfaceGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewayVirtualInterfaceGroupsAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *DescribeLocalGatewayVirtualInterfaceGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayVirtualInterfaceGroups", input)
	return &DescribeLocalGatewayVirtualInterfaceGroupsFuture{Future: future}
}

func (a *stub) DescribeLocalGatewayVirtualInterfaces(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) (*ec2.DescribeLocalGatewayVirtualInterfacesOutput, error) {
	var output ec2.DescribeLocalGatewayVirtualInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayVirtualInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewayVirtualInterfacesAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewayVirtualInterfacesInput) *DescribeLocalGatewayVirtualInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGatewayVirtualInterfaces", input)
	return &DescribeLocalGatewayVirtualInterfacesFuture{Future: future}
}

func (a *stub) DescribeLocalGateways(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) (*ec2.DescribeLocalGatewaysOutput, error) {
	var output ec2.DescribeLocalGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeLocalGatewaysAsync(ctx workflow.Context, input *ec2.DescribeLocalGatewaysInput) *DescribeLocalGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeLocalGateways", input)
	return &DescribeLocalGatewaysFuture{Future: future}
}

func (a *stub) DescribeManagedPrefixLists(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) (*ec2.DescribeManagedPrefixListsOutput, error) {
	var output ec2.DescribeManagedPrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeManagedPrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeManagedPrefixListsAsync(ctx workflow.Context, input *ec2.DescribeManagedPrefixListsInput) *DescribeManagedPrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeManagedPrefixLists", input)
	return &DescribeManagedPrefixListsFuture{Future: future}
}

func (a *stub) DescribeMovingAddresses(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) (*ec2.DescribeMovingAddressesOutput, error) {
	var output ec2.DescribeMovingAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeMovingAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeMovingAddressesAsync(ctx workflow.Context, input *ec2.DescribeMovingAddressesInput) *DescribeMovingAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeMovingAddresses", input)
	return &DescribeMovingAddressesFuture{Future: future}
}

func (a *stub) DescribeNatGateways(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) (*ec2.DescribeNatGatewaysOutput, error) {
	var output ec2.DescribeNatGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNatGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNatGatewaysAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *DescribeNatGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNatGateways", input)
	return &DescribeNatGatewaysFuture{Future: future}
}

func (a *stub) DescribeNetworkAcls(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) (*ec2.DescribeNetworkAclsOutput, error) {
	var output ec2.DescribeNetworkAclsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkAcls", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNetworkAclsAsync(ctx workflow.Context, input *ec2.DescribeNetworkAclsInput) *DescribeNetworkAclsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkAcls", input)
	return &DescribeNetworkAclsFuture{Future: future}
}

func (a *stub) DescribeNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) (*ec2.DescribeNetworkInterfaceAttributeOutput, error) {
	var output ec2.DescribeNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfaceAttributeInput) *DescribeNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfaceAttribute", input)
	return &DescribeNetworkInterfaceAttributeFuture{Future: future}
}

func (a *stub) DescribeNetworkInterfacePermissions(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) (*ec2.DescribeNetworkInterfacePermissionsOutput, error) {
	var output ec2.DescribeNetworkInterfacePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfacePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNetworkInterfacePermissionsAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacePermissionsInput) *DescribeNetworkInterfacePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfacePermissions", input)
	return &DescribeNetworkInterfacePermissionsFuture{Future: future}
}

func (a *stub) DescribeNetworkInterfaces(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) (*ec2.DescribeNetworkInterfacesOutput, error) {
	var output ec2.DescribeNetworkInterfacesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfaces", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeNetworkInterfacesAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *DescribeNetworkInterfacesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeNetworkInterfaces", input)
	return &DescribeNetworkInterfacesFuture{Future: future}
}

func (a *stub) DescribePlacementGroups(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) (*ec2.DescribePlacementGroupsOutput, error) {
	var output ec2.DescribePlacementGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePlacementGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePlacementGroupsAsync(ctx workflow.Context, input *ec2.DescribePlacementGroupsInput) *DescribePlacementGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePlacementGroups", input)
	return &DescribePlacementGroupsFuture{Future: future}
}

func (a *stub) DescribePrefixLists(ctx workflow.Context, input *ec2.DescribePrefixListsInput) (*ec2.DescribePrefixListsOutput, error) {
	var output ec2.DescribePrefixListsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePrefixLists", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePrefixListsAsync(ctx workflow.Context, input *ec2.DescribePrefixListsInput) *DescribePrefixListsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePrefixLists", input)
	return &DescribePrefixListsFuture{Future: future}
}

func (a *stub) DescribePrincipalIdFormat(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) (*ec2.DescribePrincipalIdFormatOutput, error) {
	var output ec2.DescribePrincipalIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePrincipalIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePrincipalIdFormatAsync(ctx workflow.Context, input *ec2.DescribePrincipalIdFormatInput) *DescribePrincipalIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePrincipalIdFormat", input)
	return &DescribePrincipalIdFormatFuture{Future: future}
}

func (a *stub) DescribePublicIpv4Pools(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) (*ec2.DescribePublicIpv4PoolsOutput, error) {
	var output ec2.DescribePublicIpv4PoolsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePublicIpv4Pools", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribePublicIpv4PoolsAsync(ctx workflow.Context, input *ec2.DescribePublicIpv4PoolsInput) *DescribePublicIpv4PoolsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribePublicIpv4Pools", input)
	return &DescribePublicIpv4PoolsFuture{Future: future}
}

func (a *stub) DescribeRegions(ctx workflow.Context, input *ec2.DescribeRegionsInput) (*ec2.DescribeRegionsOutput, error) {
	var output ec2.DescribeRegionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeRegions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRegionsAsync(ctx workflow.Context, input *ec2.DescribeRegionsInput) *DescribeRegionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeRegions", input)
	return &DescribeRegionsFuture{Future: future}
}

func (a *stub) DescribeReservedInstances(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) (*ec2.DescribeReservedInstancesOutput, error) {
	var output ec2.DescribeReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedInstancesAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesInput) *DescribeReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstances", input)
	return &DescribeReservedInstancesFuture{Future: future}
}

func (a *stub) DescribeReservedInstancesListings(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) (*ec2.DescribeReservedInstancesListingsOutput, error) {
	var output ec2.DescribeReservedInstancesListingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesListings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedInstancesListingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesListingsInput) *DescribeReservedInstancesListingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesListings", input)
	return &DescribeReservedInstancesListingsFuture{Future: future}
}

func (a *stub) DescribeReservedInstancesModifications(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) (*ec2.DescribeReservedInstancesModificationsOutput, error) {
	var output ec2.DescribeReservedInstancesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedInstancesModificationsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesModificationsInput) *DescribeReservedInstancesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesModifications", input)
	return &DescribeReservedInstancesModificationsFuture{Future: future}
}

func (a *stub) DescribeReservedInstancesOfferings(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) (*ec2.DescribeReservedInstancesOfferingsOutput, error) {
	var output ec2.DescribeReservedInstancesOfferingsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesOfferings", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeReservedInstancesOfferingsAsync(ctx workflow.Context, input *ec2.DescribeReservedInstancesOfferingsInput) *DescribeReservedInstancesOfferingsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeReservedInstancesOfferings", input)
	return &DescribeReservedInstancesOfferingsFuture{Future: future}
}

func (a *stub) DescribeRouteTables(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) (*ec2.DescribeRouteTablesOutput, error) {
	var output ec2.DescribeRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeRouteTablesInput) *DescribeRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeRouteTables", input)
	return &DescribeRouteTablesFuture{Future: future}
}

func (a *stub) DescribeScheduledInstanceAvailability(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) (*ec2.DescribeScheduledInstanceAvailabilityOutput, error) {
	var output ec2.DescribeScheduledInstanceAvailabilityOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeScheduledInstanceAvailability", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledInstanceAvailabilityAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstanceAvailabilityInput) *DescribeScheduledInstanceAvailabilityFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeScheduledInstanceAvailability", input)
	return &DescribeScheduledInstanceAvailabilityFuture{Future: future}
}

func (a *stub) DescribeScheduledInstances(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) (*ec2.DescribeScheduledInstancesOutput, error) {
	var output ec2.DescribeScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeScheduledInstancesAsync(ctx workflow.Context, input *ec2.DescribeScheduledInstancesInput) *DescribeScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeScheduledInstances", input)
	return &DescribeScheduledInstancesFuture{Future: future}
}

func (a *stub) DescribeSecurityGroupReferences(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) (*ec2.DescribeSecurityGroupReferencesOutput, error) {
	var output ec2.DescribeSecurityGroupReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSecurityGroupReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSecurityGroupReferencesAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupReferencesInput) *DescribeSecurityGroupReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSecurityGroupReferences", input)
	return &DescribeSecurityGroupReferencesFuture{Future: future}
}

func (a *stub) DescribeSecurityGroups(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) (*ec2.DescribeSecurityGroupsOutput, error) {
	var output ec2.DescribeSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *DescribeSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSecurityGroups", input)
	return &DescribeSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeSnapshotAttribute(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) (*ec2.DescribeSnapshotAttributeOutput, error) {
	var output ec2.DescribeSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotAttributeAsync(ctx workflow.Context, input *ec2.DescribeSnapshotAttributeInput) *DescribeSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSnapshotAttribute", input)
	return &DescribeSnapshotAttributeFuture{Future: future}
}

func (a *stub) DescribeSnapshots(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) (*ec2.DescribeSnapshotsOutput, error) {
	var output ec2.DescribeSnapshotsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSnapshots", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSnapshotsAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *DescribeSnapshotsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSnapshots", input)
	return &DescribeSnapshotsFuture{Future: future}
}

func (a *stub) DescribeSpotDatafeedSubscription(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) (*ec2.DescribeSpotDatafeedSubscriptionOutput, error) {
	var output ec2.DescribeSpotDatafeedSubscriptionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotDatafeedSubscription", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotDatafeedSubscriptionAsync(ctx workflow.Context, input *ec2.DescribeSpotDatafeedSubscriptionInput) *DescribeSpotDatafeedSubscriptionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotDatafeedSubscription", input)
	return &DescribeSpotDatafeedSubscriptionFuture{Future: future}
}

func (a *stub) DescribeSpotFleetInstances(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) (*ec2.DescribeSpotFleetInstancesOutput, error) {
	var output ec2.DescribeSpotFleetInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotFleetInstancesAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetInstancesInput) *DescribeSpotFleetInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetInstances", input)
	return &DescribeSpotFleetInstancesFuture{Future: future}
}

func (a *stub) DescribeSpotFleetRequestHistory(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) (*ec2.DescribeSpotFleetRequestHistoryOutput, error) {
	var output ec2.DescribeSpotFleetRequestHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetRequestHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotFleetRequestHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestHistoryInput) *DescribeSpotFleetRequestHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetRequestHistory", input)
	return &DescribeSpotFleetRequestHistoryFuture{Future: future}
}

func (a *stub) DescribeSpotFleetRequests(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) (*ec2.DescribeSpotFleetRequestsOutput, error) {
	var output ec2.DescribeSpotFleetRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotFleetRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotFleetRequestsInput) *DescribeSpotFleetRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotFleetRequests", input)
	return &DescribeSpotFleetRequestsFuture{Future: future}
}

func (a *stub) DescribeSpotInstanceRequests(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) (*ec2.DescribeSpotInstanceRequestsOutput, error) {
	var output ec2.DescribeSpotInstanceRequestsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotInstanceRequests", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotInstanceRequestsAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *DescribeSpotInstanceRequestsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotInstanceRequests", input)
	return &DescribeSpotInstanceRequestsFuture{Future: future}
}

func (a *stub) DescribeSpotPriceHistory(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) (*ec2.DescribeSpotPriceHistoryOutput, error) {
	var output ec2.DescribeSpotPriceHistoryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotPriceHistory", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSpotPriceHistoryAsync(ctx workflow.Context, input *ec2.DescribeSpotPriceHistoryInput) *DescribeSpotPriceHistoryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSpotPriceHistory", input)
	return &DescribeSpotPriceHistoryFuture{Future: future}
}

func (a *stub) DescribeStaleSecurityGroups(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) (*ec2.DescribeStaleSecurityGroupsOutput, error) {
	var output ec2.DescribeStaleSecurityGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeStaleSecurityGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeStaleSecurityGroupsAsync(ctx workflow.Context, input *ec2.DescribeStaleSecurityGroupsInput) *DescribeStaleSecurityGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeStaleSecurityGroups", input)
	return &DescribeStaleSecurityGroupsFuture{Future: future}
}

func (a *stub) DescribeSubnets(ctx workflow.Context, input *ec2.DescribeSubnetsInput) (*ec2.DescribeSubnetsOutput, error) {
	var output ec2.DescribeSubnetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSubnets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeSubnetsAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *DescribeSubnetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeSubnets", input)
	return &DescribeSubnetsFuture{Future: future}
}

func (a *stub) DescribeTags(ctx workflow.Context, input *ec2.DescribeTagsInput) (*ec2.DescribeTagsOutput, error) {
	var output ec2.DescribeTagsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTags", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTagsAsync(ctx workflow.Context, input *ec2.DescribeTagsInput) *DescribeTagsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTags", input)
	return &DescribeTagsFuture{Future: future}
}

func (a *stub) DescribeTrafficMirrorFilters(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) (*ec2.DescribeTrafficMirrorFiltersOutput, error) {
	var output ec2.DescribeTrafficMirrorFiltersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorFilters", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrafficMirrorFiltersAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorFiltersInput) *DescribeTrafficMirrorFiltersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorFilters", input)
	return &DescribeTrafficMirrorFiltersFuture{Future: future}
}

func (a *stub) DescribeTrafficMirrorSessions(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) (*ec2.DescribeTrafficMirrorSessionsOutput, error) {
	var output ec2.DescribeTrafficMirrorSessionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorSessions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrafficMirrorSessionsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorSessionsInput) *DescribeTrafficMirrorSessionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorSessions", input)
	return &DescribeTrafficMirrorSessionsFuture{Future: future}
}

func (a *stub) DescribeTrafficMirrorTargets(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) (*ec2.DescribeTrafficMirrorTargetsOutput, error) {
	var output ec2.DescribeTrafficMirrorTargetsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorTargets", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTrafficMirrorTargetsAsync(ctx workflow.Context, input *ec2.DescribeTrafficMirrorTargetsInput) *DescribeTrafficMirrorTargetsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTrafficMirrorTargets", input)
	return &DescribeTrafficMirrorTargetsFuture{Future: future}
}

func (a *stub) DescribeTransitGatewayAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) (*ec2.DescribeTransitGatewayAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewayAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayAttachmentsInput) *DescribeTransitGatewayAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayAttachments", input)
	return &DescribeTransitGatewayAttachmentsFuture{Future: future}
}

func (a *stub) DescribeTransitGatewayMulticastDomains(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) (*ec2.DescribeTransitGatewayMulticastDomainsOutput, error) {
	var output ec2.DescribeTransitGatewayMulticastDomainsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayMulticastDomains", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewayMulticastDomainsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayMulticastDomainsInput) *DescribeTransitGatewayMulticastDomainsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayMulticastDomains", input)
	return &DescribeTransitGatewayMulticastDomainsFuture{Future: future}
}

func (a *stub) DescribeTransitGatewayPeeringAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayPeeringAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewayPeeringAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayPeeringAttachmentsInput) *DescribeTransitGatewayPeeringAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayPeeringAttachments", input)
	return &DescribeTransitGatewayPeeringAttachmentsFuture{Future: future}
}

func (a *stub) DescribeTransitGatewayRouteTables(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) (*ec2.DescribeTransitGatewayRouteTablesOutput, error) {
	var output ec2.DescribeTransitGatewayRouteTablesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayRouteTables", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewayRouteTablesAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayRouteTablesInput) *DescribeTransitGatewayRouteTablesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayRouteTables", input)
	return &DescribeTransitGatewayRouteTablesFuture{Future: future}
}

func (a *stub) DescribeTransitGatewayVpcAttachments(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) (*ec2.DescribeTransitGatewayVpcAttachmentsOutput, error) {
	var output ec2.DescribeTransitGatewayVpcAttachmentsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayVpcAttachments", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewayVpcAttachmentsAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewayVpcAttachmentsInput) *DescribeTransitGatewayVpcAttachmentsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGatewayVpcAttachments", input)
	return &DescribeTransitGatewayVpcAttachmentsFuture{Future: future}
}

func (a *stub) DescribeTransitGateways(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) (*ec2.DescribeTransitGatewaysOutput, error) {
	var output ec2.DescribeTransitGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeTransitGatewaysAsync(ctx workflow.Context, input *ec2.DescribeTransitGatewaysInput) *DescribeTransitGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeTransitGateways", input)
	return &DescribeTransitGatewaysFuture{Future: future}
}

func (a *stub) DescribeVolumeAttribute(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) (*ec2.DescribeVolumeAttributeOutput, error) {
	var output ec2.DescribeVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVolumeAttributeAsync(ctx workflow.Context, input *ec2.DescribeVolumeAttributeInput) *DescribeVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumeAttribute", input)
	return &DescribeVolumeAttributeFuture{Future: future}
}

func (a *stub) DescribeVolumeStatus(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) (*ec2.DescribeVolumeStatusOutput, error) {
	var output ec2.DescribeVolumeStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumeStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVolumeStatusAsync(ctx workflow.Context, input *ec2.DescribeVolumeStatusInput) *DescribeVolumeStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumeStatus", input)
	return &DescribeVolumeStatusFuture{Future: future}
}

func (a *stub) DescribeVolumes(ctx workflow.Context, input *ec2.DescribeVolumesInput) (*ec2.DescribeVolumesOutput, error) {
	var output ec2.DescribeVolumesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVolumesAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *DescribeVolumesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumes", input)
	return &DescribeVolumesFuture{Future: future}
}

func (a *stub) DescribeVolumesModifications(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) (*ec2.DescribeVolumesModificationsOutput, error) {
	var output ec2.DescribeVolumesModificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumesModifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVolumesModificationsAsync(ctx workflow.Context, input *ec2.DescribeVolumesModificationsInput) *DescribeVolumesModificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVolumesModifications", input)
	return &DescribeVolumesModificationsFuture{Future: future}
}

func (a *stub) DescribeVpcAttribute(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) (*ec2.DescribeVpcAttributeOutput, error) {
	var output ec2.DescribeVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcAttributeAsync(ctx workflow.Context, input *ec2.DescribeVpcAttributeInput) *DescribeVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcAttribute", input)
	return &DescribeVpcAttributeFuture{Future: future}
}

func (a *stub) DescribeVpcClassicLink(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) (*ec2.DescribeVpcClassicLinkOutput, error) {
	var output ec2.DescribeVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkInput) *DescribeVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcClassicLink", input)
	return &DescribeVpcClassicLinkFuture{Future: future}
}

func (a *stub) DescribeVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) (*ec2.DescribeVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DescribeVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DescribeVpcClassicLinkDnsSupportInput) *DescribeVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcClassicLinkDnsSupport", input)
	return &DescribeVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *stub) DescribeVpcEndpointConnectionNotifications(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) (*ec2.DescribeVpcEndpointConnectionNotificationsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionNotificationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointConnectionNotifications", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointConnectionNotificationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionNotificationsInput) *DescribeVpcEndpointConnectionNotificationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointConnectionNotifications", input)
	return &DescribeVpcEndpointConnectionNotificationsFuture{Future: future}
}

func (a *stub) DescribeVpcEndpointConnections(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) (*ec2.DescribeVpcEndpointConnectionsOutput, error) {
	var output ec2.DescribeVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointConnectionsInput) *DescribeVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointConnections", input)
	return &DescribeVpcEndpointConnectionsFuture{Future: future}
}

func (a *stub) DescribeVpcEndpointServiceConfigurations(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	var output ec2.DescribeVpcEndpointServiceConfigurationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServiceConfigurations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointServiceConfigurationsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServiceConfigurationsInput) *DescribeVpcEndpointServiceConfigurationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServiceConfigurations", input)
	return &DescribeVpcEndpointServiceConfigurationsFuture{Future: future}
}

func (a *stub) DescribeVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	var output ec2.DescribeVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicePermissionsInput) *DescribeVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServicePermissions", input)
	return &DescribeVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *stub) DescribeVpcEndpointServices(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) (*ec2.DescribeVpcEndpointServicesOutput, error) {
	var output ec2.DescribeVpcEndpointServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointServicesAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointServicesInput) *DescribeVpcEndpointServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpointServices", input)
	return &DescribeVpcEndpointServicesFuture{Future: future}
}

func (a *stub) DescribeVpcEndpoints(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) (*ec2.DescribeVpcEndpointsOutput, error) {
	var output ec2.DescribeVpcEndpointsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpoints", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcEndpointsAsync(ctx workflow.Context, input *ec2.DescribeVpcEndpointsInput) *DescribeVpcEndpointsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcEndpoints", input)
	return &DescribeVpcEndpointsFuture{Future: future}
}

func (a *stub) DescribeVpcPeeringConnections(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) (*ec2.DescribeVpcPeeringConnectionsOutput, error) {
	var output ec2.DescribeVpcPeeringConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcPeeringConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcPeeringConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *DescribeVpcPeeringConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcPeeringConnections", input)
	return &DescribeVpcPeeringConnectionsFuture{Future: future}
}

func (a *stub) DescribeVpcs(ctx workflow.Context, input *ec2.DescribeVpcsInput) (*ec2.DescribeVpcsOutput, error) {
	var output ec2.DescribeVpcsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpcsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *DescribeVpcsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpcs", input)
	return &DescribeVpcsFuture{Future: future}
}

func (a *stub) DescribeVpnConnections(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) (*ec2.DescribeVpnConnectionsOutput, error) {
	var output ec2.DescribeVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpnConnectionsAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *DescribeVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpnConnections", input)
	return &DescribeVpnConnectionsFuture{Future: future}
}

func (a *stub) DescribeVpnGateways(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) (*ec2.DescribeVpnGatewaysOutput, error) {
	var output ec2.DescribeVpnGatewaysOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpnGateways", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DescribeVpnGatewaysAsync(ctx workflow.Context, input *ec2.DescribeVpnGatewaysInput) *DescribeVpnGatewaysFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DescribeVpnGateways", input)
	return &DescribeVpnGatewaysFuture{Future: future}
}

func (a *stub) DetachClassicLinkVpc(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) (*ec2.DetachClassicLinkVpcOutput, error) {
	var output ec2.DetachClassicLinkVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DetachClassicLinkVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachClassicLinkVpcAsync(ctx workflow.Context, input *ec2.DetachClassicLinkVpcInput) *DetachClassicLinkVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DetachClassicLinkVpc", input)
	return &DetachClassicLinkVpcFuture{Future: future}
}

func (a *stub) DetachInternetGateway(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) (*ec2.DetachInternetGatewayOutput, error) {
	var output ec2.DetachInternetGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DetachInternetGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachInternetGatewayAsync(ctx workflow.Context, input *ec2.DetachInternetGatewayInput) *DetachInternetGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DetachInternetGateway", input)
	return &DetachInternetGatewayFuture{Future: future}
}

func (a *stub) DetachNetworkInterface(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) (*ec2.DetachNetworkInterfaceOutput, error) {
	var output ec2.DetachNetworkInterfaceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DetachNetworkInterface", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachNetworkInterfaceAsync(ctx workflow.Context, input *ec2.DetachNetworkInterfaceInput) *DetachNetworkInterfaceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DetachNetworkInterface", input)
	return &DetachNetworkInterfaceFuture{Future: future}
}

func (a *stub) DetachVolume(ctx workflow.Context, input *ec2.DetachVolumeInput) (*ec2.VolumeAttachment, error) {
	var output ec2.VolumeAttachment
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DetachVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachVolumeAsync(ctx workflow.Context, input *ec2.DetachVolumeInput) *DetachVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DetachVolume", input)
	return &DetachVolumeFuture{Future: future}
}

func (a *stub) DetachVpnGateway(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) (*ec2.DetachVpnGatewayOutput, error) {
	var output ec2.DetachVpnGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DetachVpnGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DetachVpnGatewayAsync(ctx workflow.Context, input *ec2.DetachVpnGatewayInput) *DetachVpnGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DetachVpnGateway", input)
	return &DetachVpnGatewayFuture{Future: future}
}

func (a *stub) DisableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) (*ec2.DisableEbsEncryptionByDefaultOutput, error) {
	var output ec2.DisableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.DisableEbsEncryptionByDefaultInput) *DisableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableEbsEncryptionByDefault", input)
	return &DisableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *stub) DisableFastSnapshotRestores(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) (*ec2.DisableFastSnapshotRestoresOutput, error) {
	var output ec2.DisableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.DisableFastSnapshotRestoresInput) *DisableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableFastSnapshotRestores", input)
	return &DisableFastSnapshotRestoresFuture{Future: future}
}

func (a *stub) DisableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) (*ec2.DisableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.DisableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.DisableTransitGatewayRouteTablePropagationInput) *DisableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableTransitGatewayRouteTablePropagation", input)
	return &DisableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *stub) DisableVgwRoutePropagation(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) (*ec2.DisableVgwRoutePropagationOutput, error) {
	var output ec2.DisableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.DisableVgwRoutePropagationInput) *DisableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVgwRoutePropagation", input)
	return &DisableVgwRoutePropagationFuture{Future: future}
}

func (a *stub) DisableVpcClassicLink(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) (*ec2.DisableVpcClassicLinkOutput, error) {
	var output ec2.DisableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkInput) *DisableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVpcClassicLink", input)
	return &DisableVpcClassicLinkFuture{Future: future}
}

func (a *stub) DisableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) (*ec2.DisableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.DisableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.DisableVpcClassicLinkDnsSupportInput) *DisableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisableVpcClassicLinkDnsSupport", input)
	return &DisableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *stub) DisassociateAddress(ctx workflow.Context, input *ec2.DisassociateAddressInput) (*ec2.DisassociateAddressOutput, error) {
	var output ec2.DisassociateAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateAddressAsync(ctx workflow.Context, input *ec2.DisassociateAddressInput) *DisassociateAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateAddress", input)
	return &DisassociateAddressFuture{Future: future}
}

func (a *stub) DisassociateClientVpnTargetNetwork(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) (*ec2.DisassociateClientVpnTargetNetworkOutput, error) {
	var output ec2.DisassociateClientVpnTargetNetworkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateClientVpnTargetNetwork", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateClientVpnTargetNetworkAsync(ctx workflow.Context, input *ec2.DisassociateClientVpnTargetNetworkInput) *DisassociateClientVpnTargetNetworkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateClientVpnTargetNetwork", input)
	return &DisassociateClientVpnTargetNetworkFuture{Future: future}
}

func (a *stub) DisassociateEnclaveCertificateIamRole(ctx workflow.Context, input *ec2.DisassociateEnclaveCertificateIamRoleInput) (*ec2.DisassociateEnclaveCertificateIamRoleOutput, error) {
	var output ec2.DisassociateEnclaveCertificateIamRoleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateEnclaveCertificateIamRole", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateEnclaveCertificateIamRoleAsync(ctx workflow.Context, input *ec2.DisassociateEnclaveCertificateIamRoleInput) *DisassociateEnclaveCertificateIamRoleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateEnclaveCertificateIamRole", input)
	return &DisassociateEnclaveCertificateIamRoleFuture{Future: future}
}

func (a *stub) DisassociateIamInstanceProfile(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) (*ec2.DisassociateIamInstanceProfileOutput, error) {
	var output ec2.DisassociateIamInstanceProfileOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateIamInstanceProfile", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateIamInstanceProfileAsync(ctx workflow.Context, input *ec2.DisassociateIamInstanceProfileInput) *DisassociateIamInstanceProfileFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateIamInstanceProfile", input)
	return &DisassociateIamInstanceProfileFuture{Future: future}
}

func (a *stub) DisassociateRouteTable(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) (*ec2.DisassociateRouteTableOutput, error) {
	var output ec2.DisassociateRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateRouteTableInput) *DisassociateRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateRouteTable", input)
	return &DisassociateRouteTableFuture{Future: future}
}

func (a *stub) DisassociateSubnetCidrBlock(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) (*ec2.DisassociateSubnetCidrBlockOutput, error) {
	var output ec2.DisassociateSubnetCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateSubnetCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateSubnetCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateSubnetCidrBlockInput) *DisassociateSubnetCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateSubnetCidrBlock", input)
	return &DisassociateSubnetCidrBlockFuture{Future: future}
}

func (a *stub) DisassociateTransitGatewayMulticastDomain(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) (*ec2.DisassociateTransitGatewayMulticastDomainOutput, error) {
	var output ec2.DisassociateTransitGatewayMulticastDomainOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateTransitGatewayMulticastDomain", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTransitGatewayMulticastDomainAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayMulticastDomainInput) *DisassociateTransitGatewayMulticastDomainFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateTransitGatewayMulticastDomain", input)
	return &DisassociateTransitGatewayMulticastDomainFuture{Future: future}
}

func (a *stub) DisassociateTransitGatewayRouteTable(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) (*ec2.DisassociateTransitGatewayRouteTableOutput, error) {
	var output ec2.DisassociateTransitGatewayRouteTableOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateTransitGatewayRouteTable", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateTransitGatewayRouteTableAsync(ctx workflow.Context, input *ec2.DisassociateTransitGatewayRouteTableInput) *DisassociateTransitGatewayRouteTableFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateTransitGatewayRouteTable", input)
	return &DisassociateTransitGatewayRouteTableFuture{Future: future}
}

func (a *stub) DisassociateVpcCidrBlock(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) (*ec2.DisassociateVpcCidrBlockOutput, error) {
	var output ec2.DisassociateVpcCidrBlockOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateVpcCidrBlock", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) DisassociateVpcCidrBlockAsync(ctx workflow.Context, input *ec2.DisassociateVpcCidrBlockInput) *DisassociateVpcCidrBlockFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-DisassociateVpcCidrBlock", input)
	return &DisassociateVpcCidrBlockFuture{Future: future}
}

func (a *stub) EnableEbsEncryptionByDefault(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) (*ec2.EnableEbsEncryptionByDefaultOutput, error) {
	var output ec2.EnableEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.EnableEbsEncryptionByDefaultInput) *EnableEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableEbsEncryptionByDefault", input)
	return &EnableEbsEncryptionByDefaultFuture{Future: future}
}

func (a *stub) EnableFastSnapshotRestores(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) (*ec2.EnableFastSnapshotRestoresOutput, error) {
	var output ec2.EnableFastSnapshotRestoresOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableFastSnapshotRestores", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableFastSnapshotRestoresAsync(ctx workflow.Context, input *ec2.EnableFastSnapshotRestoresInput) *EnableFastSnapshotRestoresFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableFastSnapshotRestores", input)
	return &EnableFastSnapshotRestoresFuture{Future: future}
}

func (a *stub) EnableTransitGatewayRouteTablePropagation(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) (*ec2.EnableTransitGatewayRouteTablePropagationOutput, error) {
	var output ec2.EnableTransitGatewayRouteTablePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableTransitGatewayRouteTablePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableTransitGatewayRouteTablePropagationAsync(ctx workflow.Context, input *ec2.EnableTransitGatewayRouteTablePropagationInput) *EnableTransitGatewayRouteTablePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableTransitGatewayRouteTablePropagation", input)
	return &EnableTransitGatewayRouteTablePropagationFuture{Future: future}
}

func (a *stub) EnableVgwRoutePropagation(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) (*ec2.EnableVgwRoutePropagationOutput, error) {
	var output ec2.EnableVgwRoutePropagationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVgwRoutePropagation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableVgwRoutePropagationAsync(ctx workflow.Context, input *ec2.EnableVgwRoutePropagationInput) *EnableVgwRoutePropagationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVgwRoutePropagation", input)
	return &EnableVgwRoutePropagationFuture{Future: future}
}

func (a *stub) EnableVolumeIO(ctx workflow.Context, input *ec2.EnableVolumeIOInput) (*ec2.EnableVolumeIOOutput, error) {
	var output ec2.EnableVolumeIOOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVolumeIO", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableVolumeIOAsync(ctx workflow.Context, input *ec2.EnableVolumeIOInput) *EnableVolumeIOFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVolumeIO", input)
	return &EnableVolumeIOFuture{Future: future}
}

func (a *stub) EnableVpcClassicLink(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) (*ec2.EnableVpcClassicLinkOutput, error) {
	var output ec2.EnableVpcClassicLinkOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVpcClassicLink", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableVpcClassicLinkAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkInput) *EnableVpcClassicLinkFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVpcClassicLink", input)
	return &EnableVpcClassicLinkFuture{Future: future}
}

func (a *stub) EnableVpcClassicLinkDnsSupport(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) (*ec2.EnableVpcClassicLinkDnsSupportOutput, error) {
	var output ec2.EnableVpcClassicLinkDnsSupportOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVpcClassicLinkDnsSupport", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) EnableVpcClassicLinkDnsSupportAsync(ctx workflow.Context, input *ec2.EnableVpcClassicLinkDnsSupportInput) *EnableVpcClassicLinkDnsSupportFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-EnableVpcClassicLinkDnsSupport", input)
	return &EnableVpcClassicLinkDnsSupportFuture{Future: future}
}

func (a *stub) ExportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) (*ec2.ExportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ExportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ExportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientCertificateRevocationListInput) *ExportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ExportClientVpnClientCertificateRevocationList", input)
	return &ExportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *stub) ExportClientVpnClientConfiguration(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) (*ec2.ExportClientVpnClientConfigurationOutput, error) {
	var output ec2.ExportClientVpnClientConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ExportClientVpnClientConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportClientVpnClientConfigurationAsync(ctx workflow.Context, input *ec2.ExportClientVpnClientConfigurationInput) *ExportClientVpnClientConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ExportClientVpnClientConfiguration", input)
	return &ExportClientVpnClientConfigurationFuture{Future: future}
}

func (a *stub) ExportImage(ctx workflow.Context, input *ec2.ExportImageInput) (*ec2.ExportImageOutput, error) {
	var output ec2.ExportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ExportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportImageAsync(ctx workflow.Context, input *ec2.ExportImageInput) *ExportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ExportImage", input)
	return &ExportImageFuture{Future: future}
}

func (a *stub) ExportTransitGatewayRoutes(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) (*ec2.ExportTransitGatewayRoutesOutput, error) {
	var output ec2.ExportTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ExportTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ExportTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.ExportTransitGatewayRoutesInput) *ExportTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ExportTransitGatewayRoutes", input)
	return &ExportTransitGatewayRoutesFuture{Future: future}
}

func (a *stub) GetAssociatedEnclaveCertificateIamRoles(ctx workflow.Context, input *ec2.GetAssociatedEnclaveCertificateIamRolesInput) (*ec2.GetAssociatedEnclaveCertificateIamRolesOutput, error) {
	var output ec2.GetAssociatedEnclaveCertificateIamRolesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetAssociatedEnclaveCertificateIamRoles", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssociatedEnclaveCertificateIamRolesAsync(ctx workflow.Context, input *ec2.GetAssociatedEnclaveCertificateIamRolesInput) *GetAssociatedEnclaveCertificateIamRolesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetAssociatedEnclaveCertificateIamRoles", input)
	return &GetAssociatedEnclaveCertificateIamRolesFuture{Future: future}
}

func (a *stub) GetAssociatedIpv6PoolCidrs(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) (*ec2.GetAssociatedIpv6PoolCidrsOutput, error) {
	var output ec2.GetAssociatedIpv6PoolCidrsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetAssociatedIpv6PoolCidrs", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetAssociatedIpv6PoolCidrsAsync(ctx workflow.Context, input *ec2.GetAssociatedIpv6PoolCidrsInput) *GetAssociatedIpv6PoolCidrsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetAssociatedIpv6PoolCidrs", input)
	return &GetAssociatedIpv6PoolCidrsFuture{Future: future}
}

func (a *stub) GetCapacityReservationUsage(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) (*ec2.GetCapacityReservationUsageOutput, error) {
	var output ec2.GetCapacityReservationUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetCapacityReservationUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCapacityReservationUsageAsync(ctx workflow.Context, input *ec2.GetCapacityReservationUsageInput) *GetCapacityReservationUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetCapacityReservationUsage", input)
	return &GetCapacityReservationUsageFuture{Future: future}
}

func (a *stub) GetCoipPoolUsage(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) (*ec2.GetCoipPoolUsageOutput, error) {
	var output ec2.GetCoipPoolUsageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetCoipPoolUsage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetCoipPoolUsageAsync(ctx workflow.Context, input *ec2.GetCoipPoolUsageInput) *GetCoipPoolUsageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetCoipPoolUsage", input)
	return &GetCoipPoolUsageFuture{Future: future}
}

func (a *stub) GetConsoleOutput(ctx workflow.Context, input *ec2.GetConsoleOutputInput) (*ec2.GetConsoleOutputOutput, error) {
	var output ec2.GetConsoleOutputOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetConsoleOutput", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConsoleOutputAsync(ctx workflow.Context, input *ec2.GetConsoleOutputInput) *GetConsoleOutputFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetConsoleOutput", input)
	return &GetConsoleOutputFuture{Future: future}
}

func (a *stub) GetConsoleScreenshot(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) (*ec2.GetConsoleScreenshotOutput, error) {
	var output ec2.GetConsoleScreenshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetConsoleScreenshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetConsoleScreenshotAsync(ctx workflow.Context, input *ec2.GetConsoleScreenshotInput) *GetConsoleScreenshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetConsoleScreenshot", input)
	return &GetConsoleScreenshotFuture{Future: future}
}

func (a *stub) GetDefaultCreditSpecification(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) (*ec2.GetDefaultCreditSpecificationOutput, error) {
	var output ec2.GetDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.GetDefaultCreditSpecificationInput) *GetDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetDefaultCreditSpecification", input)
	return &GetDefaultCreditSpecificationFuture{Future: future}
}

func (a *stub) GetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) (*ec2.GetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.GetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.GetEbsDefaultKmsKeyIdInput) *GetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetEbsDefaultKmsKeyId", input)
	return &GetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *stub) GetEbsEncryptionByDefault(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) (*ec2.GetEbsEncryptionByDefaultOutput, error) {
	var output ec2.GetEbsEncryptionByDefaultOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetEbsEncryptionByDefault", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetEbsEncryptionByDefaultAsync(ctx workflow.Context, input *ec2.GetEbsEncryptionByDefaultInput) *GetEbsEncryptionByDefaultFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetEbsEncryptionByDefault", input)
	return &GetEbsEncryptionByDefaultFuture{Future: future}
}

func (a *stub) GetGroupsForCapacityReservation(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) (*ec2.GetGroupsForCapacityReservationOutput, error) {
	var output ec2.GetGroupsForCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetGroupsForCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetGroupsForCapacityReservationAsync(ctx workflow.Context, input *ec2.GetGroupsForCapacityReservationInput) *GetGroupsForCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetGroupsForCapacityReservation", input)
	return &GetGroupsForCapacityReservationFuture{Future: future}
}

func (a *stub) GetHostReservationPurchasePreview(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) (*ec2.GetHostReservationPurchasePreviewOutput, error) {
	var output ec2.GetHostReservationPurchasePreviewOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetHostReservationPurchasePreview", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetHostReservationPurchasePreviewAsync(ctx workflow.Context, input *ec2.GetHostReservationPurchasePreviewInput) *GetHostReservationPurchasePreviewFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetHostReservationPurchasePreview", input)
	return &GetHostReservationPurchasePreviewFuture{Future: future}
}

func (a *stub) GetLaunchTemplateData(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) (*ec2.GetLaunchTemplateDataOutput, error) {
	var output ec2.GetLaunchTemplateDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetLaunchTemplateData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetLaunchTemplateDataAsync(ctx workflow.Context, input *ec2.GetLaunchTemplateDataInput) *GetLaunchTemplateDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetLaunchTemplateData", input)
	return &GetLaunchTemplateDataFuture{Future: future}
}

func (a *stub) GetManagedPrefixListAssociations(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) (*ec2.GetManagedPrefixListAssociationsOutput, error) {
	var output ec2.GetManagedPrefixListAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetManagedPrefixListAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetManagedPrefixListAssociationsAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListAssociationsInput) *GetManagedPrefixListAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetManagedPrefixListAssociations", input)
	return &GetManagedPrefixListAssociationsFuture{Future: future}
}

func (a *stub) GetManagedPrefixListEntries(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) (*ec2.GetManagedPrefixListEntriesOutput, error) {
	var output ec2.GetManagedPrefixListEntriesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetManagedPrefixListEntries", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetManagedPrefixListEntriesAsync(ctx workflow.Context, input *ec2.GetManagedPrefixListEntriesInput) *GetManagedPrefixListEntriesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetManagedPrefixListEntries", input)
	return &GetManagedPrefixListEntriesFuture{Future: future}
}

func (a *stub) GetPasswordData(ctx workflow.Context, input *ec2.GetPasswordDataInput) (*ec2.GetPasswordDataOutput, error) {
	var output ec2.GetPasswordDataOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetPasswordData", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetPasswordDataAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *GetPasswordDataFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetPasswordData", input)
	return &GetPasswordDataFuture{Future: future}
}

func (a *stub) GetReservedInstancesExchangeQuote(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) (*ec2.GetReservedInstancesExchangeQuoteOutput, error) {
	var output ec2.GetReservedInstancesExchangeQuoteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetReservedInstancesExchangeQuote", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetReservedInstancesExchangeQuoteAsync(ctx workflow.Context, input *ec2.GetReservedInstancesExchangeQuoteInput) *GetReservedInstancesExchangeQuoteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetReservedInstancesExchangeQuote", input)
	return &GetReservedInstancesExchangeQuoteFuture{Future: future}
}

func (a *stub) GetTransitGatewayAttachmentPropagations(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) (*ec2.GetTransitGatewayAttachmentPropagationsOutput, error) {
	var output ec2.GetTransitGatewayAttachmentPropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayAttachmentPropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayAttachmentPropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayAttachmentPropagationsInput) *GetTransitGatewayAttachmentPropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayAttachmentPropagations", input)
	return &GetTransitGatewayAttachmentPropagationsFuture{Future: future}
}

func (a *stub) GetTransitGatewayMulticastDomainAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, error) {
	var output ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayMulticastDomainAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayMulticastDomainAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayMulticastDomainAssociationsInput) *GetTransitGatewayMulticastDomainAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayMulticastDomainAssociations", input)
	return &GetTransitGatewayMulticastDomainAssociationsFuture{Future: future}
}

func (a *stub) GetTransitGatewayPrefixListReferences(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) (*ec2.GetTransitGatewayPrefixListReferencesOutput, error) {
	var output ec2.GetTransitGatewayPrefixListReferencesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayPrefixListReferences", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayPrefixListReferencesAsync(ctx workflow.Context, input *ec2.GetTransitGatewayPrefixListReferencesInput) *GetTransitGatewayPrefixListReferencesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayPrefixListReferences", input)
	return &GetTransitGatewayPrefixListReferencesFuture{Future: future}
}

func (a *stub) GetTransitGatewayRouteTableAssociations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) (*ec2.GetTransitGatewayRouteTableAssociationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTableAssociationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayRouteTableAssociations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayRouteTableAssociationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTableAssociationsInput) *GetTransitGatewayRouteTableAssociationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayRouteTableAssociations", input)
	return &GetTransitGatewayRouteTableAssociationsFuture{Future: future}
}

func (a *stub) GetTransitGatewayRouteTablePropagations(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) (*ec2.GetTransitGatewayRouteTablePropagationsOutput, error) {
	var output ec2.GetTransitGatewayRouteTablePropagationsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayRouteTablePropagations", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) GetTransitGatewayRouteTablePropagationsAsync(ctx workflow.Context, input *ec2.GetTransitGatewayRouteTablePropagationsInput) *GetTransitGatewayRouteTablePropagationsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-GetTransitGatewayRouteTablePropagations", input)
	return &GetTransitGatewayRouteTablePropagationsFuture{Future: future}
}

func (a *stub) ImportClientVpnClientCertificateRevocationList(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) (*ec2.ImportClientVpnClientCertificateRevocationListOutput, error) {
	var output ec2.ImportClientVpnClientCertificateRevocationListOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportClientVpnClientCertificateRevocationList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportClientVpnClientCertificateRevocationListAsync(ctx workflow.Context, input *ec2.ImportClientVpnClientCertificateRevocationListInput) *ImportClientVpnClientCertificateRevocationListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportClientVpnClientCertificateRevocationList", input)
	return &ImportClientVpnClientCertificateRevocationListFuture{Future: future}
}

func (a *stub) ImportImage(ctx workflow.Context, input *ec2.ImportImageInput) (*ec2.ImportImageOutput, error) {
	var output ec2.ImportImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportImageAsync(ctx workflow.Context, input *ec2.ImportImageInput) *ImportImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportImage", input)
	return &ImportImageFuture{Future: future}
}

func (a *stub) ImportInstance(ctx workflow.Context, input *ec2.ImportInstanceInput) (*ec2.ImportInstanceOutput, error) {
	var output ec2.ImportInstanceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportInstance", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportInstanceAsync(ctx workflow.Context, input *ec2.ImportInstanceInput) *ImportInstanceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportInstance", input)
	return &ImportInstanceFuture{Future: future}
}

func (a *stub) ImportKeyPair(ctx workflow.Context, input *ec2.ImportKeyPairInput) (*ec2.ImportKeyPairOutput, error) {
	var output ec2.ImportKeyPairOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportKeyPair", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportKeyPairAsync(ctx workflow.Context, input *ec2.ImportKeyPairInput) *ImportKeyPairFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportKeyPair", input)
	return &ImportKeyPairFuture{Future: future}
}

func (a *stub) ImportSnapshot(ctx workflow.Context, input *ec2.ImportSnapshotInput) (*ec2.ImportSnapshotOutput, error) {
	var output ec2.ImportSnapshotOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportSnapshot", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportSnapshotAsync(ctx workflow.Context, input *ec2.ImportSnapshotInput) *ImportSnapshotFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportSnapshot", input)
	return &ImportSnapshotFuture{Future: future}
}

func (a *stub) ImportVolume(ctx workflow.Context, input *ec2.ImportVolumeInput) (*ec2.ImportVolumeOutput, error) {
	var output ec2.ImportVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ImportVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ImportVolumeAsync(ctx workflow.Context, input *ec2.ImportVolumeInput) *ImportVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ImportVolume", input)
	return &ImportVolumeFuture{Future: future}
}

func (a *stub) ModifyAvailabilityZoneGroup(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) (*ec2.ModifyAvailabilityZoneGroupOutput, error) {
	var output ec2.ModifyAvailabilityZoneGroupOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyAvailabilityZoneGroup", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyAvailabilityZoneGroupAsync(ctx workflow.Context, input *ec2.ModifyAvailabilityZoneGroupInput) *ModifyAvailabilityZoneGroupFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyAvailabilityZoneGroup", input)
	return &ModifyAvailabilityZoneGroupFuture{Future: future}
}

func (a *stub) ModifyCapacityReservation(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) (*ec2.ModifyCapacityReservationOutput, error) {
	var output ec2.ModifyCapacityReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyCapacityReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyCapacityReservationAsync(ctx workflow.Context, input *ec2.ModifyCapacityReservationInput) *ModifyCapacityReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyCapacityReservation", input)
	return &ModifyCapacityReservationFuture{Future: future}
}

func (a *stub) ModifyClientVpnEndpoint(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) (*ec2.ModifyClientVpnEndpointOutput, error) {
	var output ec2.ModifyClientVpnEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyClientVpnEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyClientVpnEndpointAsync(ctx workflow.Context, input *ec2.ModifyClientVpnEndpointInput) *ModifyClientVpnEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyClientVpnEndpoint", input)
	return &ModifyClientVpnEndpointFuture{Future: future}
}

func (a *stub) ModifyDefaultCreditSpecification(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) (*ec2.ModifyDefaultCreditSpecificationOutput, error) {
	var output ec2.ModifyDefaultCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyDefaultCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyDefaultCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyDefaultCreditSpecificationInput) *ModifyDefaultCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyDefaultCreditSpecification", input)
	return &ModifyDefaultCreditSpecificationFuture{Future: future}
}

func (a *stub) ModifyEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) (*ec2.ModifyEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ModifyEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ModifyEbsDefaultKmsKeyIdInput) *ModifyEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyEbsDefaultKmsKeyId", input)
	return &ModifyEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *stub) ModifyFleet(ctx workflow.Context, input *ec2.ModifyFleetInput) (*ec2.ModifyFleetOutput, error) {
	var output ec2.ModifyFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyFleetAsync(ctx workflow.Context, input *ec2.ModifyFleetInput) *ModifyFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyFleet", input)
	return &ModifyFleetFuture{Future: future}
}

func (a *stub) ModifyFpgaImageAttribute(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) (*ec2.ModifyFpgaImageAttributeOutput, error) {
	var output ec2.ModifyFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyFpgaImageAttributeInput) *ModifyFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyFpgaImageAttribute", input)
	return &ModifyFpgaImageAttributeFuture{Future: future}
}

func (a *stub) ModifyHosts(ctx workflow.Context, input *ec2.ModifyHostsInput) (*ec2.ModifyHostsOutput, error) {
	var output ec2.ModifyHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyHostsAsync(ctx workflow.Context, input *ec2.ModifyHostsInput) *ModifyHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyHosts", input)
	return &ModifyHostsFuture{Future: future}
}

func (a *stub) ModifyIdFormat(ctx workflow.Context, input *ec2.ModifyIdFormatInput) (*ec2.ModifyIdFormatOutput, error) {
	var output ec2.ModifyIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdFormatInput) *ModifyIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyIdFormat", input)
	return &ModifyIdFormatFuture{Future: future}
}

func (a *stub) ModifyIdentityIdFormat(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) (*ec2.ModifyIdentityIdFormatOutput, error) {
	var output ec2.ModifyIdentityIdFormatOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyIdentityIdFormat", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyIdentityIdFormatAsync(ctx workflow.Context, input *ec2.ModifyIdentityIdFormatInput) *ModifyIdentityIdFormatFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyIdentityIdFormat", input)
	return &ModifyIdentityIdFormatFuture{Future: future}
}

func (a *stub) ModifyImageAttribute(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) (*ec2.ModifyImageAttributeOutput, error) {
	var output ec2.ModifyImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyImageAttributeAsync(ctx workflow.Context, input *ec2.ModifyImageAttributeInput) *ModifyImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyImageAttribute", input)
	return &ModifyImageAttributeFuture{Future: future}
}

func (a *stub) ModifyInstanceAttribute(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) (*ec2.ModifyInstanceAttributeOutput, error) {
	var output ec2.ModifyInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceAttributeAsync(ctx workflow.Context, input *ec2.ModifyInstanceAttributeInput) *ModifyInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceAttribute", input)
	return &ModifyInstanceAttributeFuture{Future: future}
}

func (a *stub) ModifyInstanceCapacityReservationAttributes(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) (*ec2.ModifyInstanceCapacityReservationAttributesOutput, error) {
	var output ec2.ModifyInstanceCapacityReservationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceCapacityReservationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceCapacityReservationAttributesAsync(ctx workflow.Context, input *ec2.ModifyInstanceCapacityReservationAttributesInput) *ModifyInstanceCapacityReservationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceCapacityReservationAttributes", input)
	return &ModifyInstanceCapacityReservationAttributesFuture{Future: future}
}

func (a *stub) ModifyInstanceCreditSpecification(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) (*ec2.ModifyInstanceCreditSpecificationOutput, error) {
	var output ec2.ModifyInstanceCreditSpecificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceCreditSpecification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceCreditSpecificationAsync(ctx workflow.Context, input *ec2.ModifyInstanceCreditSpecificationInput) *ModifyInstanceCreditSpecificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceCreditSpecification", input)
	return &ModifyInstanceCreditSpecificationFuture{Future: future}
}

func (a *stub) ModifyInstanceEventStartTime(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) (*ec2.ModifyInstanceEventStartTimeOutput, error) {
	var output ec2.ModifyInstanceEventStartTimeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceEventStartTime", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceEventStartTimeAsync(ctx workflow.Context, input *ec2.ModifyInstanceEventStartTimeInput) *ModifyInstanceEventStartTimeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceEventStartTime", input)
	return &ModifyInstanceEventStartTimeFuture{Future: future}
}

func (a *stub) ModifyInstanceMetadataOptions(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) (*ec2.ModifyInstanceMetadataOptionsOutput, error) {
	var output ec2.ModifyInstanceMetadataOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceMetadataOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstanceMetadataOptionsAsync(ctx workflow.Context, input *ec2.ModifyInstanceMetadataOptionsInput) *ModifyInstanceMetadataOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstanceMetadataOptions", input)
	return &ModifyInstanceMetadataOptionsFuture{Future: future}
}

func (a *stub) ModifyInstancePlacement(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) (*ec2.ModifyInstancePlacementOutput, error) {
	var output ec2.ModifyInstancePlacementOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstancePlacement", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyInstancePlacementAsync(ctx workflow.Context, input *ec2.ModifyInstancePlacementInput) *ModifyInstancePlacementFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyInstancePlacement", input)
	return &ModifyInstancePlacementFuture{Future: future}
}

func (a *stub) ModifyLaunchTemplate(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) (*ec2.ModifyLaunchTemplateOutput, error) {
	var output ec2.ModifyLaunchTemplateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyLaunchTemplate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyLaunchTemplateAsync(ctx workflow.Context, input *ec2.ModifyLaunchTemplateInput) *ModifyLaunchTemplateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyLaunchTemplate", input)
	return &ModifyLaunchTemplateFuture{Future: future}
}

func (a *stub) ModifyManagedPrefixList(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) (*ec2.ModifyManagedPrefixListOutput, error) {
	var output ec2.ModifyManagedPrefixListOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyManagedPrefixList", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyManagedPrefixListAsync(ctx workflow.Context, input *ec2.ModifyManagedPrefixListInput) *ModifyManagedPrefixListFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyManagedPrefixList", input)
	return &ModifyManagedPrefixListFuture{Future: future}
}

func (a *stub) ModifyNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) (*ec2.ModifyNetworkInterfaceAttributeOutput, error) {
	var output ec2.ModifyNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ModifyNetworkInterfaceAttributeInput) *ModifyNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyNetworkInterfaceAttribute", input)
	return &ModifyNetworkInterfaceAttributeFuture{Future: future}
}

func (a *stub) ModifyReservedInstances(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) (*ec2.ModifyReservedInstancesOutput, error) {
	var output ec2.ModifyReservedInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyReservedInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyReservedInstancesAsync(ctx workflow.Context, input *ec2.ModifyReservedInstancesInput) *ModifyReservedInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyReservedInstances", input)
	return &ModifyReservedInstancesFuture{Future: future}
}

func (a *stub) ModifySnapshotAttribute(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) (*ec2.ModifySnapshotAttributeOutput, error) {
	var output ec2.ModifySnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifySnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySnapshotAttributeAsync(ctx workflow.Context, input *ec2.ModifySnapshotAttributeInput) *ModifySnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifySnapshotAttribute", input)
	return &ModifySnapshotAttributeFuture{Future: future}
}

func (a *stub) ModifySubnetAttribute(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) (*ec2.ModifySubnetAttributeOutput, error) {
	var output ec2.ModifySubnetAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifySubnetAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifySubnetAttributeAsync(ctx workflow.Context, input *ec2.ModifySubnetAttributeInput) *ModifySubnetAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifySubnetAttribute", input)
	return &ModifySubnetAttributeFuture{Future: future}
}

func (a *stub) ModifyTrafficMirrorFilterNetworkServices(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorFilterNetworkServices", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTrafficMirrorFilterNetworkServicesAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *ModifyTrafficMirrorFilterNetworkServicesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorFilterNetworkServices", input)
	return &ModifyTrafficMirrorFilterNetworkServicesFuture{Future: future}
}

func (a *stub) ModifyTrafficMirrorFilterRule(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) (*ec2.ModifyTrafficMirrorFilterRuleOutput, error) {
	var output ec2.ModifyTrafficMirrorFilterRuleOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorFilterRule", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTrafficMirrorFilterRuleAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorFilterRuleInput) *ModifyTrafficMirrorFilterRuleFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorFilterRule", input)
	return &ModifyTrafficMirrorFilterRuleFuture{Future: future}
}

func (a *stub) ModifyTrafficMirrorSession(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) (*ec2.ModifyTrafficMirrorSessionOutput, error) {
	var output ec2.ModifyTrafficMirrorSessionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorSession", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTrafficMirrorSessionAsync(ctx workflow.Context, input *ec2.ModifyTrafficMirrorSessionInput) *ModifyTrafficMirrorSessionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTrafficMirrorSession", input)
	return &ModifyTrafficMirrorSessionFuture{Future: future}
}

func (a *stub) ModifyTransitGateway(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) (*ec2.ModifyTransitGatewayOutput, error) {
	var output ec2.ModifyTransitGatewayOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGateway", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTransitGatewayAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayInput) *ModifyTransitGatewayFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGateway", input)
	return &ModifyTransitGatewayFuture{Future: future}
}

func (a *stub) ModifyTransitGatewayPrefixListReference(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) (*ec2.ModifyTransitGatewayPrefixListReferenceOutput, error) {
	var output ec2.ModifyTransitGatewayPrefixListReferenceOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGatewayPrefixListReference", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTransitGatewayPrefixListReferenceAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayPrefixListReferenceInput) *ModifyTransitGatewayPrefixListReferenceFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGatewayPrefixListReference", input)
	return &ModifyTransitGatewayPrefixListReferenceFuture{Future: future}
}

func (a *stub) ModifyTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) (*ec2.ModifyTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.ModifyTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.ModifyTransitGatewayVpcAttachmentInput) *ModifyTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyTransitGatewayVpcAttachment", input)
	return &ModifyTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *stub) ModifyVolume(ctx workflow.Context, input *ec2.ModifyVolumeInput) (*ec2.ModifyVolumeOutput, error) {
	var output ec2.ModifyVolumeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVolume", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVolumeAsync(ctx workflow.Context, input *ec2.ModifyVolumeInput) *ModifyVolumeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVolume", input)
	return &ModifyVolumeFuture{Future: future}
}

func (a *stub) ModifyVolumeAttribute(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) (*ec2.ModifyVolumeAttributeOutput, error) {
	var output ec2.ModifyVolumeAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVolumeAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVolumeAttributeAsync(ctx workflow.Context, input *ec2.ModifyVolumeAttributeInput) *ModifyVolumeAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVolumeAttribute", input)
	return &ModifyVolumeAttributeFuture{Future: future}
}

func (a *stub) ModifyVpcAttribute(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) (*ec2.ModifyVpcAttributeOutput, error) {
	var output ec2.ModifyVpcAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcAttributeAsync(ctx workflow.Context, input *ec2.ModifyVpcAttributeInput) *ModifyVpcAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcAttribute", input)
	return &ModifyVpcAttributeFuture{Future: future}
}

func (a *stub) ModifyVpcEndpoint(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) (*ec2.ModifyVpcEndpointOutput, error) {
	var output ec2.ModifyVpcEndpointOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpoint", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcEndpointAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointInput) *ModifyVpcEndpointFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpoint", input)
	return &ModifyVpcEndpointFuture{Future: future}
}

func (a *stub) ModifyVpcEndpointConnectionNotification(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) (*ec2.ModifyVpcEndpointConnectionNotificationOutput, error) {
	var output ec2.ModifyVpcEndpointConnectionNotificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointConnectionNotification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcEndpointConnectionNotificationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointConnectionNotificationInput) *ModifyVpcEndpointConnectionNotificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointConnectionNotification", input)
	return &ModifyVpcEndpointConnectionNotificationFuture{Future: future}
}

func (a *stub) ModifyVpcEndpointServiceConfiguration(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) (*ec2.ModifyVpcEndpointServiceConfigurationOutput, error) {
	var output ec2.ModifyVpcEndpointServiceConfigurationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointServiceConfiguration", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcEndpointServiceConfigurationAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServiceConfigurationInput) *ModifyVpcEndpointServiceConfigurationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointServiceConfiguration", input)
	return &ModifyVpcEndpointServiceConfigurationFuture{Future: future}
}

func (a *stub) ModifyVpcEndpointServicePermissions(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	var output ec2.ModifyVpcEndpointServicePermissionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointServicePermissions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcEndpointServicePermissionsAsync(ctx workflow.Context, input *ec2.ModifyVpcEndpointServicePermissionsInput) *ModifyVpcEndpointServicePermissionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcEndpointServicePermissions", input)
	return &ModifyVpcEndpointServicePermissionsFuture{Future: future}
}

func (a *stub) ModifyVpcPeeringConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) (*ec2.ModifyVpcPeeringConnectionOptionsOutput, error) {
	var output ec2.ModifyVpcPeeringConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcPeeringConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcPeeringConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpcPeeringConnectionOptionsInput) *ModifyVpcPeeringConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcPeeringConnectionOptions", input)
	return &ModifyVpcPeeringConnectionOptionsFuture{Future: future}
}

func (a *stub) ModifyVpcTenancy(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) (*ec2.ModifyVpcTenancyOutput, error) {
	var output ec2.ModifyVpcTenancyOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcTenancy", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpcTenancyAsync(ctx workflow.Context, input *ec2.ModifyVpcTenancyInput) *ModifyVpcTenancyFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpcTenancy", input)
	return &ModifyVpcTenancyFuture{Future: future}
}

func (a *stub) ModifyVpnConnection(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) (*ec2.ModifyVpnConnectionOutput, error) {
	var output ec2.ModifyVpnConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpnConnectionAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionInput) *ModifyVpnConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnConnection", input)
	return &ModifyVpnConnectionFuture{Future: future}
}

func (a *stub) ModifyVpnConnectionOptions(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) (*ec2.ModifyVpnConnectionOptionsOutput, error) {
	var output ec2.ModifyVpnConnectionOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnConnectionOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpnConnectionOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnConnectionOptionsInput) *ModifyVpnConnectionOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnConnectionOptions", input)
	return &ModifyVpnConnectionOptionsFuture{Future: future}
}

func (a *stub) ModifyVpnTunnelCertificate(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) (*ec2.ModifyVpnTunnelCertificateOutput, error) {
	var output ec2.ModifyVpnTunnelCertificateOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnTunnelCertificate", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpnTunnelCertificateAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelCertificateInput) *ModifyVpnTunnelCertificateFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnTunnelCertificate", input)
	return &ModifyVpnTunnelCertificateFuture{Future: future}
}

func (a *stub) ModifyVpnTunnelOptions(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) (*ec2.ModifyVpnTunnelOptionsOutput, error) {
	var output ec2.ModifyVpnTunnelOptionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnTunnelOptions", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ModifyVpnTunnelOptionsAsync(ctx workflow.Context, input *ec2.ModifyVpnTunnelOptionsInput) *ModifyVpnTunnelOptionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ModifyVpnTunnelOptions", input)
	return &ModifyVpnTunnelOptionsFuture{Future: future}
}

func (a *stub) MonitorInstances(ctx workflow.Context, input *ec2.MonitorInstancesInput) (*ec2.MonitorInstancesOutput, error) {
	var output ec2.MonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-MonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MonitorInstancesAsync(ctx workflow.Context, input *ec2.MonitorInstancesInput) *MonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-MonitorInstances", input)
	return &MonitorInstancesFuture{Future: future}
}

func (a *stub) MoveAddressToVpc(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) (*ec2.MoveAddressToVpcOutput, error) {
	var output ec2.MoveAddressToVpcOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-MoveAddressToVpc", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) MoveAddressToVpcAsync(ctx workflow.Context, input *ec2.MoveAddressToVpcInput) *MoveAddressToVpcFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-MoveAddressToVpc", input)
	return &MoveAddressToVpcFuture{Future: future}
}

func (a *stub) ProvisionByoipCidr(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) (*ec2.ProvisionByoipCidrOutput, error) {
	var output ec2.ProvisionByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ProvisionByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ProvisionByoipCidrAsync(ctx workflow.Context, input *ec2.ProvisionByoipCidrInput) *ProvisionByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ProvisionByoipCidr", input)
	return &ProvisionByoipCidrFuture{Future: future}
}

func (a *stub) PurchaseHostReservation(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) (*ec2.PurchaseHostReservationOutput, error) {
	var output ec2.PurchaseHostReservationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseHostReservation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseHostReservationAsync(ctx workflow.Context, input *ec2.PurchaseHostReservationInput) *PurchaseHostReservationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseHostReservation", input)
	return &PurchaseHostReservationFuture{Future: future}
}

func (a *stub) PurchaseReservedInstancesOffering(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) (*ec2.PurchaseReservedInstancesOfferingOutput, error) {
	var output ec2.PurchaseReservedInstancesOfferingOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseReservedInstancesOffering", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseReservedInstancesOfferingAsync(ctx workflow.Context, input *ec2.PurchaseReservedInstancesOfferingInput) *PurchaseReservedInstancesOfferingFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseReservedInstancesOffering", input)
	return &PurchaseReservedInstancesOfferingFuture{Future: future}
}

func (a *stub) PurchaseScheduledInstances(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) (*ec2.PurchaseScheduledInstancesOutput, error) {
	var output ec2.PurchaseScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) PurchaseScheduledInstancesAsync(ctx workflow.Context, input *ec2.PurchaseScheduledInstancesInput) *PurchaseScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-PurchaseScheduledInstances", input)
	return &PurchaseScheduledInstancesFuture{Future: future}
}

func (a *stub) RebootInstances(ctx workflow.Context, input *ec2.RebootInstancesInput) (*ec2.RebootInstancesOutput, error) {
	var output ec2.RebootInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RebootInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RebootInstancesAsync(ctx workflow.Context, input *ec2.RebootInstancesInput) *RebootInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RebootInstances", input)
	return &RebootInstancesFuture{Future: future}
}

func (a *stub) RegisterImage(ctx workflow.Context, input *ec2.RegisterImageInput) (*ec2.RegisterImageOutput, error) {
	var output ec2.RegisterImageOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterImage", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterImageAsync(ctx workflow.Context, input *ec2.RegisterImageInput) *RegisterImageFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterImage", input)
	return &RegisterImageFuture{Future: future}
}

func (a *stub) RegisterInstanceEventNotificationAttributes(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) (*ec2.RegisterInstanceEventNotificationAttributesOutput, error) {
	var output ec2.RegisterInstanceEventNotificationAttributesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterInstanceEventNotificationAttributes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterInstanceEventNotificationAttributesAsync(ctx workflow.Context, input *ec2.RegisterInstanceEventNotificationAttributesInput) *RegisterInstanceEventNotificationAttributesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterInstanceEventNotificationAttributes", input)
	return &RegisterInstanceEventNotificationAttributesFuture{Future: future}
}

func (a *stub) RegisterTransitGatewayMulticastGroupMembers(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (*ec2.RegisterTransitGatewayMulticastGroupMembersOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterTransitGatewayMulticastGroupMembers", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTransitGatewayMulticastGroupMembersAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupMembersInput) *RegisterTransitGatewayMulticastGroupMembersFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterTransitGatewayMulticastGroupMembers", input)
	return &RegisterTransitGatewayMulticastGroupMembersFuture{Future: future}
}

func (a *stub) RegisterTransitGatewayMulticastGroupSources(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, error) {
	var output ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterTransitGatewayMulticastGroupSources", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RegisterTransitGatewayMulticastGroupSourcesAsync(ctx workflow.Context, input *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *RegisterTransitGatewayMulticastGroupSourcesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RegisterTransitGatewayMulticastGroupSources", input)
	return &RegisterTransitGatewayMulticastGroupSourcesFuture{Future: future}
}

func (a *stub) RejectTransitGatewayPeeringAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) (*ec2.RejectTransitGatewayPeeringAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayPeeringAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RejectTransitGatewayPeeringAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectTransitGatewayPeeringAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayPeeringAttachmentInput) *RejectTransitGatewayPeeringAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RejectTransitGatewayPeeringAttachment", input)
	return &RejectTransitGatewayPeeringAttachmentFuture{Future: future}
}

func (a *stub) RejectTransitGatewayVpcAttachment(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) (*ec2.RejectTransitGatewayVpcAttachmentOutput, error) {
	var output ec2.RejectTransitGatewayVpcAttachmentOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RejectTransitGatewayVpcAttachment", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectTransitGatewayVpcAttachmentAsync(ctx workflow.Context, input *ec2.RejectTransitGatewayVpcAttachmentInput) *RejectTransitGatewayVpcAttachmentFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RejectTransitGatewayVpcAttachment", input)
	return &RejectTransitGatewayVpcAttachmentFuture{Future: future}
}

func (a *stub) RejectVpcEndpointConnections(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) (*ec2.RejectVpcEndpointConnectionsOutput, error) {
	var output ec2.RejectVpcEndpointConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RejectVpcEndpointConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectVpcEndpointConnectionsAsync(ctx workflow.Context, input *ec2.RejectVpcEndpointConnectionsInput) *RejectVpcEndpointConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RejectVpcEndpointConnections", input)
	return &RejectVpcEndpointConnectionsFuture{Future: future}
}

func (a *stub) RejectVpcPeeringConnection(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) (*ec2.RejectVpcPeeringConnectionOutput, error) {
	var output ec2.RejectVpcPeeringConnectionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RejectVpcPeeringConnection", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RejectVpcPeeringConnectionAsync(ctx workflow.Context, input *ec2.RejectVpcPeeringConnectionInput) *RejectVpcPeeringConnectionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RejectVpcPeeringConnection", input)
	return &RejectVpcPeeringConnectionFuture{Future: future}
}

func (a *stub) ReleaseAddress(ctx workflow.Context, input *ec2.ReleaseAddressInput) (*ec2.ReleaseAddressOutput, error) {
	var output ec2.ReleaseAddressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReleaseAddress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReleaseAddressAsync(ctx workflow.Context, input *ec2.ReleaseAddressInput) *ReleaseAddressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReleaseAddress", input)
	return &ReleaseAddressFuture{Future: future}
}

func (a *stub) ReleaseHosts(ctx workflow.Context, input *ec2.ReleaseHostsInput) (*ec2.ReleaseHostsOutput, error) {
	var output ec2.ReleaseHostsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReleaseHosts", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReleaseHostsAsync(ctx workflow.Context, input *ec2.ReleaseHostsInput) *ReleaseHostsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReleaseHosts", input)
	return &ReleaseHostsFuture{Future: future}
}

func (a *stub) ReplaceIamInstanceProfileAssociation(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) (*ec2.ReplaceIamInstanceProfileAssociationOutput, error) {
	var output ec2.ReplaceIamInstanceProfileAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceIamInstanceProfileAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceIamInstanceProfileAssociationAsync(ctx workflow.Context, input *ec2.ReplaceIamInstanceProfileAssociationInput) *ReplaceIamInstanceProfileAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceIamInstanceProfileAssociation", input)
	return &ReplaceIamInstanceProfileAssociationFuture{Future: future}
}

func (a *stub) ReplaceNetworkAclAssociation(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) (*ec2.ReplaceNetworkAclAssociationOutput, error) {
	var output ec2.ReplaceNetworkAclAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceNetworkAclAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceNetworkAclAssociationAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclAssociationInput) *ReplaceNetworkAclAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceNetworkAclAssociation", input)
	return &ReplaceNetworkAclAssociationFuture{Future: future}
}

func (a *stub) ReplaceNetworkAclEntry(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) (*ec2.ReplaceNetworkAclEntryOutput, error) {
	var output ec2.ReplaceNetworkAclEntryOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceNetworkAclEntry", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceNetworkAclEntryAsync(ctx workflow.Context, input *ec2.ReplaceNetworkAclEntryInput) *ReplaceNetworkAclEntryFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceNetworkAclEntry", input)
	return &ReplaceNetworkAclEntryFuture{Future: future}
}

func (a *stub) ReplaceRoute(ctx workflow.Context, input *ec2.ReplaceRouteInput) (*ec2.ReplaceRouteOutput, error) {
	var output ec2.ReplaceRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceRouteAsync(ctx workflow.Context, input *ec2.ReplaceRouteInput) *ReplaceRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceRoute", input)
	return &ReplaceRouteFuture{Future: future}
}

func (a *stub) ReplaceRouteTableAssociation(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) (*ec2.ReplaceRouteTableAssociationOutput, error) {
	var output ec2.ReplaceRouteTableAssociationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceRouteTableAssociation", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceRouteTableAssociationAsync(ctx workflow.Context, input *ec2.ReplaceRouteTableAssociationInput) *ReplaceRouteTableAssociationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceRouteTableAssociation", input)
	return &ReplaceRouteTableAssociationFuture{Future: future}
}

func (a *stub) ReplaceTransitGatewayRoute(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) (*ec2.ReplaceTransitGatewayRouteOutput, error) {
	var output ec2.ReplaceTransitGatewayRouteOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceTransitGatewayRoute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReplaceTransitGatewayRouteAsync(ctx workflow.Context, input *ec2.ReplaceTransitGatewayRouteInput) *ReplaceTransitGatewayRouteFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReplaceTransitGatewayRoute", input)
	return &ReplaceTransitGatewayRouteFuture{Future: future}
}

func (a *stub) ReportInstanceStatus(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) (*ec2.ReportInstanceStatusOutput, error) {
	var output ec2.ReportInstanceStatusOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ReportInstanceStatus", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ReportInstanceStatusAsync(ctx workflow.Context, input *ec2.ReportInstanceStatusInput) *ReportInstanceStatusFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ReportInstanceStatus", input)
	return &ReportInstanceStatusFuture{Future: future}
}

func (a *stub) RequestSpotFleet(ctx workflow.Context, input *ec2.RequestSpotFleetInput) (*ec2.RequestSpotFleetOutput, error) {
	var output ec2.RequestSpotFleetOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RequestSpotFleet", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestSpotFleetAsync(ctx workflow.Context, input *ec2.RequestSpotFleetInput) *RequestSpotFleetFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RequestSpotFleet", input)
	return &RequestSpotFleetFuture{Future: future}
}

func (a *stub) RequestSpotInstances(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) (*ec2.RequestSpotInstancesOutput, error) {
	var output ec2.RequestSpotInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RequestSpotInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RequestSpotInstancesAsync(ctx workflow.Context, input *ec2.RequestSpotInstancesInput) *RequestSpotInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RequestSpotInstances", input)
	return &RequestSpotInstancesFuture{Future: future}
}

func (a *stub) ResetEbsDefaultKmsKeyId(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) (*ec2.ResetEbsDefaultKmsKeyIdOutput, error) {
	var output ec2.ResetEbsDefaultKmsKeyIdOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetEbsDefaultKmsKeyId", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetEbsDefaultKmsKeyIdAsync(ctx workflow.Context, input *ec2.ResetEbsDefaultKmsKeyIdInput) *ResetEbsDefaultKmsKeyIdFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetEbsDefaultKmsKeyId", input)
	return &ResetEbsDefaultKmsKeyIdFuture{Future: future}
}

func (a *stub) ResetFpgaImageAttribute(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) (*ec2.ResetFpgaImageAttributeOutput, error) {
	var output ec2.ResetFpgaImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetFpgaImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetFpgaImageAttributeAsync(ctx workflow.Context, input *ec2.ResetFpgaImageAttributeInput) *ResetFpgaImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetFpgaImageAttribute", input)
	return &ResetFpgaImageAttributeFuture{Future: future}
}

func (a *stub) ResetImageAttribute(ctx workflow.Context, input *ec2.ResetImageAttributeInput) (*ec2.ResetImageAttributeOutput, error) {
	var output ec2.ResetImageAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetImageAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetImageAttributeAsync(ctx workflow.Context, input *ec2.ResetImageAttributeInput) *ResetImageAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetImageAttribute", input)
	return &ResetImageAttributeFuture{Future: future}
}

func (a *stub) ResetInstanceAttribute(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) (*ec2.ResetInstanceAttributeOutput, error) {
	var output ec2.ResetInstanceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetInstanceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetInstanceAttributeAsync(ctx workflow.Context, input *ec2.ResetInstanceAttributeInput) *ResetInstanceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetInstanceAttribute", input)
	return &ResetInstanceAttributeFuture{Future: future}
}

func (a *stub) ResetNetworkInterfaceAttribute(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) (*ec2.ResetNetworkInterfaceAttributeOutput, error) {
	var output ec2.ResetNetworkInterfaceAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetNetworkInterfaceAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetNetworkInterfaceAttributeAsync(ctx workflow.Context, input *ec2.ResetNetworkInterfaceAttributeInput) *ResetNetworkInterfaceAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetNetworkInterfaceAttribute", input)
	return &ResetNetworkInterfaceAttributeFuture{Future: future}
}

func (a *stub) ResetSnapshotAttribute(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) (*ec2.ResetSnapshotAttributeOutput, error) {
	var output ec2.ResetSnapshotAttributeOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-ResetSnapshotAttribute", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) ResetSnapshotAttributeAsync(ctx workflow.Context, input *ec2.ResetSnapshotAttributeInput) *ResetSnapshotAttributeFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-ResetSnapshotAttribute", input)
	return &ResetSnapshotAttributeFuture{Future: future}
}

func (a *stub) RestoreAddressToClassic(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) (*ec2.RestoreAddressToClassicOutput, error) {
	var output ec2.RestoreAddressToClassicOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RestoreAddressToClassic", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreAddressToClassicAsync(ctx workflow.Context, input *ec2.RestoreAddressToClassicInput) *RestoreAddressToClassicFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RestoreAddressToClassic", input)
	return &RestoreAddressToClassicFuture{Future: future}
}

func (a *stub) RestoreManagedPrefixListVersion(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) (*ec2.RestoreManagedPrefixListVersionOutput, error) {
	var output ec2.RestoreManagedPrefixListVersionOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RestoreManagedPrefixListVersion", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RestoreManagedPrefixListVersionAsync(ctx workflow.Context, input *ec2.RestoreManagedPrefixListVersionInput) *RestoreManagedPrefixListVersionFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RestoreManagedPrefixListVersion", input)
	return &RestoreManagedPrefixListVersionFuture{Future: future}
}

func (a *stub) RevokeClientVpnIngress(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) (*ec2.RevokeClientVpnIngressOutput, error) {
	var output ec2.RevokeClientVpnIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeClientVpnIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeClientVpnIngressAsync(ctx workflow.Context, input *ec2.RevokeClientVpnIngressInput) *RevokeClientVpnIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeClientVpnIngress", input)
	return &RevokeClientVpnIngressFuture{Future: future}
}

func (a *stub) RevokeSecurityGroupEgress(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) (*ec2.RevokeSecurityGroupEgressOutput, error) {
	var output ec2.RevokeSecurityGroupEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeSecurityGroupEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeSecurityGroupEgressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupEgressInput) *RevokeSecurityGroupEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeSecurityGroupEgress", input)
	return &RevokeSecurityGroupEgressFuture{Future: future}
}

func (a *stub) RevokeSecurityGroupIngress(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) (*ec2.RevokeSecurityGroupIngressOutput, error) {
	var output ec2.RevokeSecurityGroupIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeSecurityGroupIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RevokeSecurityGroupIngressAsync(ctx workflow.Context, input *ec2.RevokeSecurityGroupIngressInput) *RevokeSecurityGroupIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RevokeSecurityGroupIngress", input)
	return &RevokeSecurityGroupIngressFuture{Future: future}
}

func (a *stub) RunInstances(ctx workflow.Context, input *ec2.RunInstancesInput) (*ec2.Reservation, error) {
	var output ec2.Reservation
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RunInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunInstancesAsync(ctx workflow.Context, input *ec2.RunInstancesInput) *RunInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RunInstances", input)
	return &RunInstancesFuture{Future: future}
}

func (a *stub) RunScheduledInstances(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) (*ec2.RunScheduledInstancesOutput, error) {
	var output ec2.RunScheduledInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-RunScheduledInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) RunScheduledInstancesAsync(ctx workflow.Context, input *ec2.RunScheduledInstancesInput) *RunScheduledInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-RunScheduledInstances", input)
	return &RunScheduledInstancesFuture{Future: future}
}

func (a *stub) SearchLocalGatewayRoutes(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) (*ec2.SearchLocalGatewayRoutesOutput, error) {
	var output ec2.SearchLocalGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-SearchLocalGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchLocalGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchLocalGatewayRoutesInput) *SearchLocalGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-SearchLocalGatewayRoutes", input)
	return &SearchLocalGatewayRoutesFuture{Future: future}
}

func (a *stub) SearchTransitGatewayMulticastGroups(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) (*ec2.SearchTransitGatewayMulticastGroupsOutput, error) {
	var output ec2.SearchTransitGatewayMulticastGroupsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-SearchTransitGatewayMulticastGroups", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchTransitGatewayMulticastGroupsAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayMulticastGroupsInput) *SearchTransitGatewayMulticastGroupsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-SearchTransitGatewayMulticastGroups", input)
	return &SearchTransitGatewayMulticastGroupsFuture{Future: future}
}

func (a *stub) SearchTransitGatewayRoutes(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) (*ec2.SearchTransitGatewayRoutesOutput, error) {
	var output ec2.SearchTransitGatewayRoutesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-SearchTransitGatewayRoutes", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SearchTransitGatewayRoutesAsync(ctx workflow.Context, input *ec2.SearchTransitGatewayRoutesInput) *SearchTransitGatewayRoutesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-SearchTransitGatewayRoutes", input)
	return &SearchTransitGatewayRoutesFuture{Future: future}
}

func (a *stub) SendDiagnosticInterrupt(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) (*ec2.SendDiagnosticInterruptOutput, error) {
	var output ec2.SendDiagnosticInterruptOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-SendDiagnosticInterrupt", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) SendDiagnosticInterruptAsync(ctx workflow.Context, input *ec2.SendDiagnosticInterruptInput) *SendDiagnosticInterruptFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-SendDiagnosticInterrupt", input)
	return &SendDiagnosticInterruptFuture{Future: future}
}

func (a *stub) StartInstances(ctx workflow.Context, input *ec2.StartInstancesInput) (*ec2.StartInstancesOutput, error) {
	var output ec2.StartInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-StartInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartInstancesAsync(ctx workflow.Context, input *ec2.StartInstancesInput) *StartInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-StartInstances", input)
	return &StartInstancesFuture{Future: future}
}

func (a *stub) StartVpcEndpointServicePrivateDnsVerification(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, error) {
	var output ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-StartVpcEndpointServicePrivateDnsVerification", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StartVpcEndpointServicePrivateDnsVerificationAsync(ctx workflow.Context, input *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *StartVpcEndpointServicePrivateDnsVerificationFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-StartVpcEndpointServicePrivateDnsVerification", input)
	return &StartVpcEndpointServicePrivateDnsVerificationFuture{Future: future}
}

func (a *stub) StopInstances(ctx workflow.Context, input *ec2.StopInstancesInput) (*ec2.StopInstancesOutput, error) {
	var output ec2.StopInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-StopInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) StopInstancesAsync(ctx workflow.Context, input *ec2.StopInstancesInput) *StopInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-StopInstances", input)
	return &StopInstancesFuture{Future: future}
}

func (a *stub) TerminateClientVpnConnections(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) (*ec2.TerminateClientVpnConnectionsOutput, error) {
	var output ec2.TerminateClientVpnConnectionsOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-TerminateClientVpnConnections", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateClientVpnConnectionsAsync(ctx workflow.Context, input *ec2.TerminateClientVpnConnectionsInput) *TerminateClientVpnConnectionsFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-TerminateClientVpnConnections", input)
	return &TerminateClientVpnConnectionsFuture{Future: future}
}

func (a *stub) TerminateInstances(ctx workflow.Context, input *ec2.TerminateInstancesInput) (*ec2.TerminateInstancesOutput, error) {
	var output ec2.TerminateInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-TerminateInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) TerminateInstancesAsync(ctx workflow.Context, input *ec2.TerminateInstancesInput) *TerminateInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-TerminateInstances", input)
	return &TerminateInstancesFuture{Future: future}
}

func (a *stub) UnassignIpv6Addresses(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) (*ec2.UnassignIpv6AddressesOutput, error) {
	var output ec2.UnassignIpv6AddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-UnassignIpv6Addresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnassignIpv6AddressesAsync(ctx workflow.Context, input *ec2.UnassignIpv6AddressesInput) *UnassignIpv6AddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-UnassignIpv6Addresses", input)
	return &UnassignIpv6AddressesFuture{Future: future}
}

func (a *stub) UnassignPrivateIpAddresses(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) (*ec2.UnassignPrivateIpAddressesOutput, error) {
	var output ec2.UnassignPrivateIpAddressesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-UnassignPrivateIpAddresses", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnassignPrivateIpAddressesAsync(ctx workflow.Context, input *ec2.UnassignPrivateIpAddressesInput) *UnassignPrivateIpAddressesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-UnassignPrivateIpAddresses", input)
	return &UnassignPrivateIpAddressesFuture{Future: future}
}

func (a *stub) UnmonitorInstances(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) (*ec2.UnmonitorInstancesOutput, error) {
	var output ec2.UnmonitorInstancesOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-UnmonitorInstances", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UnmonitorInstancesAsync(ctx workflow.Context, input *ec2.UnmonitorInstancesInput) *UnmonitorInstancesFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-UnmonitorInstances", input)
	return &UnmonitorInstancesFuture{Future: future}
}

func (a *stub) UpdateSecurityGroupRuleDescriptionsEgress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-UpdateSecurityGroupRuleDescriptionsEgress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecurityGroupRuleDescriptionsEgressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *UpdateSecurityGroupRuleDescriptionsEgressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-UpdateSecurityGroupRuleDescriptionsEgress", input)
	return &UpdateSecurityGroupRuleDescriptionsEgressFuture{Future: future}
}

func (a *stub) UpdateSecurityGroupRuleDescriptionsIngress(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, error) {
	var output ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-UpdateSecurityGroupRuleDescriptionsIngress", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) UpdateSecurityGroupRuleDescriptionsIngressAsync(ctx workflow.Context, input *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *UpdateSecurityGroupRuleDescriptionsIngressFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-UpdateSecurityGroupRuleDescriptionsIngress", input)
	return &UpdateSecurityGroupRuleDescriptionsIngressFuture{Future: future}
}

func (a *stub) WithdrawByoipCidr(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) (*ec2.WithdrawByoipCidrOutput, error) {
	var output ec2.WithdrawByoipCidrOutput
	err := workflow.ExecuteActivity(ctx, "aws-ec2-WithdrawByoipCidr", input).Get(ctx, &output)
	return &output, err
}

func (a *stub) WithdrawByoipCidrAsync(ctx workflow.Context, input *ec2.WithdrawByoipCidrInput) *WithdrawByoipCidrFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WithdrawByoipCidr", input)
	return &WithdrawByoipCidrFuture{Future: future}
}

func (a *stub) WaitUntilBundleTaskComplete(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilBundleTaskComplete", input).Get(ctx, nil)
}

func (a *stub) WaitUntilBundleTaskCompleteAsync(ctx workflow.Context, input *ec2.DescribeBundleTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilBundleTaskComplete", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilConversionTaskCancelled(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskCancelled", input).Get(ctx, nil)
}

func (a *stub) WaitUntilConversionTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskCancelled", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilConversionTaskCompleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilConversionTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskCompleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilConversionTaskDeleted(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilConversionTaskDeletedAsync(ctx workflow.Context, input *ec2.DescribeConversionTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilConversionTaskDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilCustomerGatewayAvailable(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilCustomerGatewayAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilCustomerGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeCustomerGatewaysInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilCustomerGatewayAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilExportTaskCancelled(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilExportTaskCancelled", input).Get(ctx, nil)
}

func (a *stub) WaitUntilExportTaskCancelledAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilExportTaskCancelled", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilExportTaskCompleted(ctx workflow.Context, input *ec2.DescribeExportTasksInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilExportTaskCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilExportTaskCompletedAsync(ctx workflow.Context, input *ec2.DescribeExportTasksInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilExportTaskCompleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilImageAvailable(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilImageAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilImageAvailableAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilImageAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilImageExists(ctx workflow.Context, input *ec2.DescribeImagesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilImageExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilImageExistsAsync(ctx workflow.Context, input *ec2.DescribeImagesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilImageExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceExists(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceExistsAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceRunning(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceRunning", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceRunningAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceRunning", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceStatusOk", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceStatusOk", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceStopped(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceStopped", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceStoppedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceStopped", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilInstanceTerminated(ctx workflow.Context, input *ec2.DescribeInstancesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceTerminated", input).Get(ctx, nil)
}

func (a *stub) WaitUntilInstanceTerminatedAsync(ctx workflow.Context, input *ec2.DescribeInstancesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilInstanceTerminated", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilKeyPairExists(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilKeyPairExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilKeyPairExistsAsync(ctx workflow.Context, input *ec2.DescribeKeyPairsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilKeyPairExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNatGatewayAvailable(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilNatGatewayAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNatGatewayAvailableAsync(ctx workflow.Context, input *ec2.DescribeNatGatewaysInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilNatGatewayAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilNetworkInterfaceAvailable(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilNetworkInterfaceAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilNetworkInterfaceAvailableAsync(ctx workflow.Context, input *ec2.DescribeNetworkInterfacesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilNetworkInterfaceAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilPasswordDataAvailable(ctx workflow.Context, input *ec2.GetPasswordDataInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilPasswordDataAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilPasswordDataAvailableAsync(ctx workflow.Context, input *ec2.GetPasswordDataInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilPasswordDataAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSecurityGroupExists(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSecurityGroupExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSecurityGroupExistsAsync(ctx workflow.Context, input *ec2.DescribeSecurityGroupsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSecurityGroupExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSnapshotCompleted(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSnapshotCompleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSnapshotCompletedAsync(ctx workflow.Context, input *ec2.DescribeSnapshotsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSnapshotCompleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSpotInstanceRequestFulfilled(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSpotInstanceRequestFulfilled", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSpotInstanceRequestFulfilledAsync(ctx workflow.Context, input *ec2.DescribeSpotInstanceRequestsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSpotInstanceRequestFulfilled", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSubnetAvailable(ctx workflow.Context, input *ec2.DescribeSubnetsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSubnetAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSubnetAvailableAsync(ctx workflow.Context, input *ec2.DescribeSubnetsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSubnetAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilSystemStatusOk(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSystemStatusOk", input).Get(ctx, nil)
}

func (a *stub) WaitUntilSystemStatusOkAsync(ctx workflow.Context, input *ec2.DescribeInstanceStatusInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilSystemStatusOk", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVolumeAvailable(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVolumeAvailableAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVolumeDeleted(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVolumeDeletedAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVolumeInUse(ctx workflow.Context, input *ec2.DescribeVolumesInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeInUse", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVolumeInUseAsync(ctx workflow.Context, input *ec2.DescribeVolumesInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVolumeInUse", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpcAvailable(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpcAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpcExists(ctx workflow.Context, input *ec2.DescribeVpcsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpcExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpcPeeringConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcPeeringConnectionDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpcPeeringConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcPeeringConnectionDeleted", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpcPeeringConnectionExists(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcPeeringConnectionExists", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpcPeeringConnectionExistsAsync(ctx workflow.Context, input *ec2.DescribeVpcPeeringConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpcPeeringConnectionExists", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpnConnectionAvailable(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpnConnectionAvailable", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpnConnectionAvailableAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpnConnectionAvailable", input)
	return clients.NewVoidFuture(future)
}

func (a *stub) WaitUntilVpnConnectionDeleted(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) error {
	return workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpnConnectionDeleted", input).Get(ctx, nil)
}

func (a *stub) WaitUntilVpnConnectionDeletedAsync(ctx workflow.Context, input *ec2.DescribeVpnConnectionsInput) *clients.VoidFuture {
	future := workflow.ExecuteActivity(ctx, "aws-ec2-WaitUntilVpnConnectionDeleted", input)
	return clients.NewVoidFuture(future)
}
