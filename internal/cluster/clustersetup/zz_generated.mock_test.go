// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package clustersetup

import (
	"context"
	"github.com/banzaicloud/pipeline/pkg/helm"
	kubernetes1 "github.com/banzaicloud/pipeline/pkg/kubernetes"
	"github.com/stretchr/testify/mock"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
)

// MockClientFactory is an autogenerated mock for the ClientFactory type.
type MockClientFactory struct {
	mock.Mock
}

// FromSecret provides a mock function.
func (_m *MockClientFactory) FromSecret(ctx context.Context, secretID string) (kubernetes.Interface, error) {
	ret := _m.Called(ctx, secretID)

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func(context.Context, string) kubernetes.Interface); ok {
		r0 = rf(ctx, secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicClientFactory is an autogenerated mock for the DynamicClientFactory type.
type MockDynamicClientFactory struct {
	mock.Mock
}

// FromSecret provides a mock function.
func (_m *MockDynamicClientFactory) FromSecret(ctx context.Context, secretID string) (dynamic.Interface, error) {
	ret := _m.Called(ctx, secretID)

	var r0 dynamic.Interface
	if rf, ok := ret.Get(0).(func(context.Context, string) dynamic.Interface); ok {
		r0 = rf(ctx, secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamic.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelmClientFactory is an autogenerated mock for the HelmClientFactory type.
type MockHelmClientFactory struct {
	mock.Mock
}

// FromSecret provides a mock function.
func (_m *MockHelmClientFactory) FromSecret(ctx context.Context, secretID string) (*helm.Client, error) {
	ret := _m.Called(ctx, secretID)

	var r0 *helm.Client
	if rf, ok := ret.Get(0).(func(context.Context, string) *helm.Client); ok {
		r0 = rf(ctx, secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamicFileClientFactory is an autogenerated mock for the DynamicFileClientFactory type.
type MockDynamicFileClientFactory struct {
	mock.Mock
}

// FromSecret provides a mock function.
func (_m *MockDynamicFileClientFactory) FromSecret(ctx context.Context, secretID string) (kubernetes1.DynamicFileClient, error) {
	ret := _m.Called(ctx, secretID)

	var r0 kubernetes1.DynamicFileClient
	if rf, ok := ret.Get(0).(func(context.Context, string) kubernetes1.DynamicFileClient); ok {
		r0 = rf(ctx, secretID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes1.DynamicFileClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
