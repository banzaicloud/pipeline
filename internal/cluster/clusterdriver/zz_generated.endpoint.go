// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package clusterdriver

import (
	"context"
	"errors"
	"github.com/banzaicloud/pipeline/internal/cluster"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CreateNodePool endpoint.Endpoint
	DeleteCluster  endpoint.Endpoint
	DeleteNodePool endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service cluster.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		CreateNodePool: kitxendpoint.OperationNameMiddleware("cluster.CreateNodePool")(mw(MakeCreateNodePoolEndpoint(service))),
		DeleteCluster:  kitxendpoint.OperationNameMiddleware("cluster.DeleteCluster")(mw(MakeDeleteClusterEndpoint(service))),
		DeleteNodePool: kitxendpoint.OperationNameMiddleware("cluster.DeleteNodePool")(mw(MakeDeleteNodePoolEndpoint(service))),
	}
}

// CreateNodePoolRequest is a request struct for CreateNodePool endpoint.
type CreateNodePoolRequest struct {
	ClusterID   uint
	RawNodePool cluster.NewRawNodePool
}

// CreateNodePoolResponse is a response struct for CreateNodePool endpoint.
type CreateNodePoolResponse struct {
	Err error
}

func (r CreateNodePoolResponse) Failed() error {
	return r.Err
}

// MakeCreateNodePoolEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCreateNodePoolEndpoint(service cluster.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateNodePoolRequest)

		err := service.CreateNodePool(ctx, req.ClusterID, req.RawNodePool)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return CreateNodePoolResponse{Err: err}, nil
			}

			return CreateNodePoolResponse{Err: err}, err
		}

		return CreateNodePoolResponse{}, nil
	}
}

// DeleteClusterRequest is a request struct for DeleteCluster endpoint.
type DeleteClusterRequest struct {
	ClusterIdentifier cluster.Identifier
	Options           cluster.DeleteClusterOptions
}

// DeleteClusterResponse is a response struct for DeleteCluster endpoint.
type DeleteClusterResponse struct {
	Deleted bool
	Err     error
}

func (r DeleteClusterResponse) Failed() error {
	return r.Err
}

// MakeDeleteClusterEndpoint returns an endpoint for the matching method of the underlying service.
func MakeDeleteClusterEndpoint(service cluster.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteClusterRequest)

		deleted, err := service.DeleteCluster(ctx, req.ClusterIdentifier, req.Options)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return DeleteClusterResponse{
					Deleted: deleted,
					Err:     err,
				}, nil
			}

			return DeleteClusterResponse{
				Deleted: deleted,
				Err:     err,
			}, err
		}

		return DeleteClusterResponse{Deleted: deleted}, nil
	}
}

// DeleteNodePoolRequest is a request struct for DeleteNodePool endpoint.
type DeleteNodePoolRequest struct {
	ClusterID uint
	Name      string
}

// DeleteNodePoolResponse is a response struct for DeleteNodePool endpoint.
type DeleteNodePoolResponse struct {
	Deleted bool
	Err     error
}

func (r DeleteNodePoolResponse) Failed() error {
	return r.Err
}

// MakeDeleteNodePoolEndpoint returns an endpoint for the matching method of the underlying service.
func MakeDeleteNodePoolEndpoint(service cluster.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteNodePoolRequest)

		deleted, err := service.DeleteNodePool(ctx, req.ClusterID, req.Name)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return DeleteNodePoolResponse{
					Deleted: deleted,
					Err:     err,
				}, nil
			}

			return DeleteNodePoolResponse{
				Deleted: deleted,
				Err:     err,
			}, err
		}

		return DeleteNodePoolResponse{Deleted: deleted}, nil
	}
}
