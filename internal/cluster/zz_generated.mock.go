// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package cluster

import (
	"context"
	"github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock for the Service type.
type MockService struct {
	mock.Mock
}

// CreateNodePool provides a mock function.
func (_m *MockService) CreateNodePool(ctx context.Context, clusterID uint, rawNodePool NewRawNodePool) error {
	ret := _m.Called(ctx, clusterID, rawNodePool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, NewRawNodePool) error); ok {
		r0 = rf(ctx, clusterID, rawNodePool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCluster provides a mock function.
func (_m *MockService) DeleteCluster(ctx context.Context, clusterIdentifier Identifier, options DeleteClusterOptions) (deleted bool, err error) {
	ret := _m.Called(ctx, clusterIdentifier, options)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, Identifier, DeleteClusterOptions) bool); ok {
		r0 = rf(ctx, clusterIdentifier, options)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Identifier, DeleteClusterOptions) error); ok {
		r1 = rf(ctx, clusterIdentifier, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodePool provides a mock function.
func (_m *MockService) DeleteNodePool(ctx context.Context, clusterID uint, name string) (deleted bool, err error) {
	ret := _m.Called(ctx, clusterID, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) bool); ok {
		r0 = rf(ctx, clusterID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, clusterID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
