// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package workflow

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/client"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	"github.com/stretchr/testify/mock"
)

// Mockec2API is an autogenerated mock for the ec2API type.
type Mockec2API struct {
	mock.Mock
}

// AcceptReservedInstancesExchangeQuote provides a mock function.
func (_m *Mockec2API) AcceptReservedInstancesExchangeQuote(_parameter_0 *ec2.AcceptReservedInstancesExchangeQuoteInput) (_result_0 *ec2.AcceptReservedInstancesExchangeQuoteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(0).(func(*ec2.AcceptReservedInstancesExchangeQuoteInput) *ec2.AcceptReservedInstancesExchangeQuoteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AcceptReservedInstancesExchangeQuoteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptReservedInstancesExchangeQuoteRequest provides a mock function.
func (_m *Mockec2API) AcceptReservedInstancesExchangeQuoteRequest(_parameter_0 *ec2.AcceptReservedInstancesExchangeQuoteInput) (_result_0 *request.Request, _result_1 *ec2.AcceptReservedInstancesExchangeQuoteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AcceptReservedInstancesExchangeQuoteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(1).(func(*ec2.AcceptReservedInstancesExchangeQuoteInput) *ec2.AcceptReservedInstancesExchangeQuoteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
		}
	}

	return r0, r1
}

// AcceptReservedInstancesExchangeQuoteWithContext provides a mock function.
func (_m *Mockec2API) AcceptReservedInstancesExchangeQuoteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AcceptReservedInstancesExchangeQuoteInput, _parameter_2 ...request.Option) (_result_0 *ec2.AcceptReservedInstancesExchangeQuoteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AcceptReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AcceptReservedInstancesExchangeQuoteInput, ...request.Option) *ec2.AcceptReservedInstancesExchangeQuoteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptReservedInstancesExchangeQuoteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AcceptReservedInstancesExchangeQuoteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTransitGatewayPeeringAttachment provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayPeeringAttachment(_parameter_0 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (_result_0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.AcceptTransitGatewayPeeringAttachmentInput) *ec2.AcceptTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AcceptTransitGatewayPeeringAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTransitGatewayPeeringAttachmentRequest provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayPeeringAttachmentRequest(_parameter_0 *ec2.AcceptTransitGatewayPeeringAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.AcceptTransitGatewayPeeringAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AcceptTransitGatewayPeeringAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AcceptTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.AcceptTransitGatewayPeeringAttachmentInput) *ec2.AcceptTransitGatewayPeeringAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
		}
	}

	return r0, r1
}

// AcceptTransitGatewayPeeringAttachmentWithContext provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayPeeringAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AcceptTransitGatewayPeeringAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AcceptTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AcceptTransitGatewayPeeringAttachmentInput, ...request.Option) *ec2.AcceptTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AcceptTransitGatewayPeeringAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTransitGatewayVpcAttachment provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayVpcAttachment(_parameter_0 *ec2.AcceptTransitGatewayVpcAttachmentInput) (_result_0 *ec2.AcceptTransitGatewayVpcAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.AcceptTransitGatewayVpcAttachmentInput) *ec2.AcceptTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AcceptTransitGatewayVpcAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptTransitGatewayVpcAttachmentRequest provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayVpcAttachmentRequest(_parameter_0 *ec2.AcceptTransitGatewayVpcAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.AcceptTransitGatewayVpcAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AcceptTransitGatewayVpcAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.AcceptTransitGatewayVpcAttachmentInput) *ec2.AcceptTransitGatewayVpcAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
		}
	}

	return r0, r1
}

// AcceptTransitGatewayVpcAttachmentWithContext provides a mock function.
func (_m *Mockec2API) AcceptTransitGatewayVpcAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AcceptTransitGatewayVpcAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.AcceptTransitGatewayVpcAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AcceptTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AcceptTransitGatewayVpcAttachmentInput, ...request.Option) *ec2.AcceptTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AcceptTransitGatewayVpcAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptVpcEndpointConnections provides a mock function.
func (_m *Mockec2API) AcceptVpcEndpointConnections(_parameter_0 *ec2.AcceptVpcEndpointConnectionsInput) (_result_0 *ec2.AcceptVpcEndpointConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AcceptVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.AcceptVpcEndpointConnectionsInput) *ec2.AcceptVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AcceptVpcEndpointConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptVpcEndpointConnectionsRequest provides a mock function.
func (_m *Mockec2API) AcceptVpcEndpointConnectionsRequest(_parameter_0 *ec2.AcceptVpcEndpointConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.AcceptVpcEndpointConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AcceptVpcEndpointConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AcceptVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.AcceptVpcEndpointConnectionsInput) *ec2.AcceptVpcEndpointConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AcceptVpcEndpointConnectionsOutput)
		}
	}

	return r0, r1
}

// AcceptVpcEndpointConnectionsWithContext provides a mock function.
func (_m *Mockec2API) AcceptVpcEndpointConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AcceptVpcEndpointConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.AcceptVpcEndpointConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AcceptVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AcceptVpcEndpointConnectionsInput, ...request.Option) *ec2.AcceptVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AcceptVpcEndpointConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptVpcPeeringConnection provides a mock function.
func (_m *Mockec2API) AcceptVpcPeeringConnection(_parameter_0 *ec2.AcceptVpcPeeringConnectionInput) (_result_0 *ec2.AcceptVpcPeeringConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AcceptVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.AcceptVpcPeeringConnectionInput) *ec2.AcceptVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AcceptVpcPeeringConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptVpcPeeringConnectionRequest provides a mock function.
func (_m *Mockec2API) AcceptVpcPeeringConnectionRequest(_parameter_0 *ec2.AcceptVpcPeeringConnectionInput) (_result_0 *request.Request, _result_1 *ec2.AcceptVpcPeeringConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AcceptVpcPeeringConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AcceptVpcPeeringConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.AcceptVpcPeeringConnectionInput) *ec2.AcceptVpcPeeringConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AcceptVpcPeeringConnectionOutput)
		}
	}

	return r0, r1
}

// AcceptVpcPeeringConnectionWithContext provides a mock function.
func (_m *Mockec2API) AcceptVpcPeeringConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AcceptVpcPeeringConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.AcceptVpcPeeringConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AcceptVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AcceptVpcPeeringConnectionInput, ...request.Option) *ec2.AcceptVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AcceptVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AcceptVpcPeeringConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdvertiseByoipCidr provides a mock function.
func (_m *Mockec2API) AdvertiseByoipCidr(_parameter_0 *ec2.AdvertiseByoipCidrInput) (_result_0 *ec2.AdvertiseByoipCidrOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AdvertiseByoipCidrOutput
	if rf, ok := ret.Get(0).(func(*ec2.AdvertiseByoipCidrInput) *ec2.AdvertiseByoipCidrOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AdvertiseByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AdvertiseByoipCidrInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdvertiseByoipCidrRequest provides a mock function.
func (_m *Mockec2API) AdvertiseByoipCidrRequest(_parameter_0 *ec2.AdvertiseByoipCidrInput) (_result_0 *request.Request, _result_1 *ec2.AdvertiseByoipCidrOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AdvertiseByoipCidrInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AdvertiseByoipCidrOutput
	if rf, ok := ret.Get(1).(func(*ec2.AdvertiseByoipCidrInput) *ec2.AdvertiseByoipCidrOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AdvertiseByoipCidrOutput)
		}
	}

	return r0, r1
}

// AdvertiseByoipCidrWithContext provides a mock function.
func (_m *Mockec2API) AdvertiseByoipCidrWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AdvertiseByoipCidrInput, _parameter_2 ...request.Option) (_result_0 *ec2.AdvertiseByoipCidrOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AdvertiseByoipCidrOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AdvertiseByoipCidrInput, ...request.Option) *ec2.AdvertiseByoipCidrOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AdvertiseByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AdvertiseByoipCidrInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateAddress provides a mock function.
func (_m *Mockec2API) AllocateAddress(_parameter_0 *ec2.AllocateAddressInput) (_result_0 *ec2.AllocateAddressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AllocateAddressOutput
	if rf, ok := ret.Get(0).(func(*ec2.AllocateAddressInput) *ec2.AllocateAddressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AllocateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AllocateAddressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateAddressRequest provides a mock function.
func (_m *Mockec2API) AllocateAddressRequest(_parameter_0 *ec2.AllocateAddressInput) (_result_0 *request.Request, _result_1 *ec2.AllocateAddressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AllocateAddressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AllocateAddressOutput
	if rf, ok := ret.Get(1).(func(*ec2.AllocateAddressInput) *ec2.AllocateAddressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AllocateAddressOutput)
		}
	}

	return r0, r1
}

// AllocateAddressWithContext provides a mock function.
func (_m *Mockec2API) AllocateAddressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AllocateAddressInput, _parameter_2 ...request.Option) (_result_0 *ec2.AllocateAddressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AllocateAddressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AllocateAddressInput, ...request.Option) *ec2.AllocateAddressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AllocateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AllocateAddressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateHosts provides a mock function.
func (_m *Mockec2API) AllocateHosts(_parameter_0 *ec2.AllocateHostsInput) (_result_0 *ec2.AllocateHostsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AllocateHostsOutput
	if rf, ok := ret.Get(0).(func(*ec2.AllocateHostsInput) *ec2.AllocateHostsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AllocateHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AllocateHostsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocateHostsRequest provides a mock function.
func (_m *Mockec2API) AllocateHostsRequest(_parameter_0 *ec2.AllocateHostsInput) (_result_0 *request.Request, _result_1 *ec2.AllocateHostsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AllocateHostsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AllocateHostsOutput
	if rf, ok := ret.Get(1).(func(*ec2.AllocateHostsInput) *ec2.AllocateHostsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AllocateHostsOutput)
		}
	}

	return r0, r1
}

// AllocateHostsWithContext provides a mock function.
func (_m *Mockec2API) AllocateHostsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AllocateHostsInput, _parameter_2 ...request.Option) (_result_0 *ec2.AllocateHostsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AllocateHostsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AllocateHostsInput, ...request.Option) *ec2.AllocateHostsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AllocateHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AllocateHostsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplySecurityGroupsToClientVpnTargetNetwork provides a mock function.
func (_m *Mockec2API) ApplySecurityGroupsToClientVpnTargetNetwork(_parameter_0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (_result_0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplySecurityGroupsToClientVpnTargetNetworkRequest provides a mock function.
func (_m *Mockec2API) ApplySecurityGroupsToClientVpnTargetNetworkRequest(_parameter_0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) (_result_0 *request.Request, _result_1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(1).(func(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput) *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
		}
	}

	return r0, r1
}

// ApplySecurityGroupsToClientVpnTargetNetworkWithContext provides a mock function.
func (_m *Mockec2API) ApplySecurityGroupsToClientVpnTargetNetworkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, _parameter_2 ...request.Option) (_result_0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, ...request.Option) *ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ApplySecurityGroupsToClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ApplySecurityGroupsToClientVpnTargetNetworkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignIpv6Addresses provides a mock function.
func (_m *Mockec2API) AssignIpv6Addresses(_parameter_0 *ec2.AssignIpv6AddressesInput) (_result_0 *ec2.AssignIpv6AddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssignIpv6AddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssignIpv6AddressesInput) *ec2.AssignIpv6AddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssignIpv6AddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssignIpv6AddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignIpv6AddressesRequest provides a mock function.
func (_m *Mockec2API) AssignIpv6AddressesRequest(_parameter_0 *ec2.AssignIpv6AddressesInput) (_result_0 *request.Request, _result_1 *ec2.AssignIpv6AddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssignIpv6AddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssignIpv6AddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssignIpv6AddressesInput) *ec2.AssignIpv6AddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssignIpv6AddressesOutput)
		}
	}

	return r0, r1
}

// AssignIpv6AddressesWithContext provides a mock function.
func (_m *Mockec2API) AssignIpv6AddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssignIpv6AddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssignIpv6AddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssignIpv6AddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssignIpv6AddressesInput, ...request.Option) *ec2.AssignIpv6AddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssignIpv6AddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssignIpv6AddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPrivateIpAddresses provides a mock function.
func (_m *Mockec2API) AssignPrivateIpAddresses(_parameter_0 *ec2.AssignPrivateIpAddressesInput) (_result_0 *ec2.AssignPrivateIpAddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssignPrivateIpAddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssignPrivateIpAddressesInput) *ec2.AssignPrivateIpAddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssignPrivateIpAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssignPrivateIpAddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignPrivateIpAddressesRequest provides a mock function.
func (_m *Mockec2API) AssignPrivateIpAddressesRequest(_parameter_0 *ec2.AssignPrivateIpAddressesInput) (_result_0 *request.Request, _result_1 *ec2.AssignPrivateIpAddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssignPrivateIpAddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssignPrivateIpAddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssignPrivateIpAddressesInput) *ec2.AssignPrivateIpAddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssignPrivateIpAddressesOutput)
		}
	}

	return r0, r1
}

// AssignPrivateIpAddressesWithContext provides a mock function.
func (_m *Mockec2API) AssignPrivateIpAddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssignPrivateIpAddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssignPrivateIpAddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssignPrivateIpAddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssignPrivateIpAddressesInput, ...request.Option) *ec2.AssignPrivateIpAddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssignPrivateIpAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssignPrivateIpAddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateAddress provides a mock function.
func (_m *Mockec2API) AssociateAddress(_parameter_0 *ec2.AssociateAddressInput) (_result_0 *ec2.AssociateAddressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateAddressOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateAddressInput) *ec2.AssociateAddressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateAddressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateAddressRequest provides a mock function.
func (_m *Mockec2API) AssociateAddressRequest(_parameter_0 *ec2.AssociateAddressInput) (_result_0 *request.Request, _result_1 *ec2.AssociateAddressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateAddressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateAddressOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateAddressInput) *ec2.AssociateAddressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateAddressOutput)
		}
	}

	return r0, r1
}

// AssociateAddressWithContext provides a mock function.
func (_m *Mockec2API) AssociateAddressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateAddressInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateAddressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateAddressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateAddressInput, ...request.Option) *ec2.AssociateAddressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateAddressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateClientVpnTargetNetwork provides a mock function.
func (_m *Mockec2API) AssociateClientVpnTargetNetwork(_parameter_0 *ec2.AssociateClientVpnTargetNetworkInput) (_result_0 *ec2.AssociateClientVpnTargetNetworkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateClientVpnTargetNetworkInput) *ec2.AssociateClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateClientVpnTargetNetworkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateClientVpnTargetNetworkRequest provides a mock function.
func (_m *Mockec2API) AssociateClientVpnTargetNetworkRequest(_parameter_0 *ec2.AssociateClientVpnTargetNetworkInput) (_result_0 *request.Request, _result_1 *ec2.AssociateClientVpnTargetNetworkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateClientVpnTargetNetworkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateClientVpnTargetNetworkInput) *ec2.AssociateClientVpnTargetNetworkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateClientVpnTargetNetworkOutput)
		}
	}

	return r0, r1
}

// AssociateClientVpnTargetNetworkWithContext provides a mock function.
func (_m *Mockec2API) AssociateClientVpnTargetNetworkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateClientVpnTargetNetworkInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateClientVpnTargetNetworkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateClientVpnTargetNetworkInput, ...request.Option) *ec2.AssociateClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateClientVpnTargetNetworkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDhcpOptions provides a mock function.
func (_m *Mockec2API) AssociateDhcpOptions(_parameter_0 *ec2.AssociateDhcpOptionsInput) (_result_0 *ec2.AssociateDhcpOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateDhcpOptionsInput) *ec2.AssociateDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateDhcpOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDhcpOptionsRequest provides a mock function.
func (_m *Mockec2API) AssociateDhcpOptionsRequest(_parameter_0 *ec2.AssociateDhcpOptionsInput) (_result_0 *request.Request, _result_1 *ec2.AssociateDhcpOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateDhcpOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateDhcpOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateDhcpOptionsInput) *ec2.AssociateDhcpOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateDhcpOptionsOutput)
		}
	}

	return r0, r1
}

// AssociateDhcpOptionsWithContext provides a mock function.
func (_m *Mockec2API) AssociateDhcpOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateDhcpOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateDhcpOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateDhcpOptionsInput, ...request.Option) *ec2.AssociateDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateDhcpOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateEnclaveCertificateIamRole provides a mock function.
func (_m *Mockec2API) AssociateEnclaveCertificateIamRole(_parameter_0 *ec2.AssociateEnclaveCertificateIamRoleInput) (_result_0 *ec2.AssociateEnclaveCertificateIamRoleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateEnclaveCertificateIamRoleInput) *ec2.AssociateEnclaveCertificateIamRoleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateEnclaveCertificateIamRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateEnclaveCertificateIamRoleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateEnclaveCertificateIamRoleRequest provides a mock function.
func (_m *Mockec2API) AssociateEnclaveCertificateIamRoleRequest(_parameter_0 *ec2.AssociateEnclaveCertificateIamRoleInput) (_result_0 *request.Request, _result_1 *ec2.AssociateEnclaveCertificateIamRoleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateEnclaveCertificateIamRoleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateEnclaveCertificateIamRoleInput) *ec2.AssociateEnclaveCertificateIamRoleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateEnclaveCertificateIamRoleOutput)
		}
	}

	return r0, r1
}

// AssociateEnclaveCertificateIamRoleWithContext provides a mock function.
func (_m *Mockec2API) AssociateEnclaveCertificateIamRoleWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateEnclaveCertificateIamRoleInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateEnclaveCertificateIamRoleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateEnclaveCertificateIamRoleInput, ...request.Option) *ec2.AssociateEnclaveCertificateIamRoleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateEnclaveCertificateIamRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateEnclaveCertificateIamRoleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateIamInstanceProfile provides a mock function.
func (_m *Mockec2API) AssociateIamInstanceProfile(_parameter_0 *ec2.AssociateIamInstanceProfileInput) (_result_0 *ec2.AssociateIamInstanceProfileOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateIamInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateIamInstanceProfileInput) *ec2.AssociateIamInstanceProfileOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateIamInstanceProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateIamInstanceProfileInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateIamInstanceProfileRequest provides a mock function.
func (_m *Mockec2API) AssociateIamInstanceProfileRequest(_parameter_0 *ec2.AssociateIamInstanceProfileInput) (_result_0 *request.Request, _result_1 *ec2.AssociateIamInstanceProfileOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateIamInstanceProfileInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateIamInstanceProfileOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateIamInstanceProfileInput) *ec2.AssociateIamInstanceProfileOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateIamInstanceProfileOutput)
		}
	}

	return r0, r1
}

// AssociateIamInstanceProfileWithContext provides a mock function.
func (_m *Mockec2API) AssociateIamInstanceProfileWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateIamInstanceProfileInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateIamInstanceProfileOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateIamInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateIamInstanceProfileInput, ...request.Option) *ec2.AssociateIamInstanceProfileOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateIamInstanceProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateIamInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateRouteTable provides a mock function.
func (_m *Mockec2API) AssociateRouteTable(_parameter_0 *ec2.AssociateRouteTableInput) (_result_0 *ec2.AssociateRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateRouteTableInput) *ec2.AssociateRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateRouteTableRequest provides a mock function.
func (_m *Mockec2API) AssociateRouteTableRequest(_parameter_0 *ec2.AssociateRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.AssociateRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateRouteTableInput) *ec2.AssociateRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateRouteTableOutput)
		}
	}

	return r0, r1
}

// AssociateRouteTableWithContext provides a mock function.
func (_m *Mockec2API) AssociateRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateRouteTableInput, ...request.Option) *ec2.AssociateRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSubnetCidrBlock provides a mock function.
func (_m *Mockec2API) AssociateSubnetCidrBlock(_parameter_0 *ec2.AssociateSubnetCidrBlockInput) (_result_0 *ec2.AssociateSubnetCidrBlockOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateSubnetCidrBlockInput) *ec2.AssociateSubnetCidrBlockOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateSubnetCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateSubnetCidrBlockInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSubnetCidrBlockRequest provides a mock function.
func (_m *Mockec2API) AssociateSubnetCidrBlockRequest(_parameter_0 *ec2.AssociateSubnetCidrBlockInput) (_result_0 *request.Request, _result_1 *ec2.AssociateSubnetCidrBlockOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateSubnetCidrBlockInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateSubnetCidrBlockInput) *ec2.AssociateSubnetCidrBlockOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateSubnetCidrBlockOutput)
		}
	}

	return r0, r1
}

// AssociateSubnetCidrBlockWithContext provides a mock function.
func (_m *Mockec2API) AssociateSubnetCidrBlockWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateSubnetCidrBlockInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateSubnetCidrBlockOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateSubnetCidrBlockInput, ...request.Option) *ec2.AssociateSubnetCidrBlockOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateSubnetCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateSubnetCidrBlockInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTransitGatewayMulticastDomain provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayMulticastDomain(_parameter_0 *ec2.AssociateTransitGatewayMulticastDomainInput) (_result_0 *ec2.AssociateTransitGatewayMulticastDomainOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateTransitGatewayMulticastDomainInput) *ec2.AssociateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateTransitGatewayMulticastDomainInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTransitGatewayMulticastDomainRequest provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayMulticastDomainRequest(_parameter_0 *ec2.AssociateTransitGatewayMulticastDomainInput) (_result_0 *request.Request, _result_1 *ec2.AssociateTransitGatewayMulticastDomainOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateTransitGatewayMulticastDomainInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateTransitGatewayMulticastDomainInput) *ec2.AssociateTransitGatewayMulticastDomainOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateTransitGatewayMulticastDomainOutput)
		}
	}

	return r0, r1
}

// AssociateTransitGatewayMulticastDomainWithContext provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayMulticastDomainWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateTransitGatewayMulticastDomainInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateTransitGatewayMulticastDomainOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateTransitGatewayMulticastDomainInput, ...request.Option) *ec2.AssociateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateTransitGatewayMulticastDomainInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTransitGatewayRouteTable provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayRouteTable(_parameter_0 *ec2.AssociateTransitGatewayRouteTableInput) (_result_0 *ec2.AssociateTransitGatewayRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateTransitGatewayRouteTableInput) *ec2.AssociateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateTransitGatewayRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTransitGatewayRouteTableRequest provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayRouteTableRequest(_parameter_0 *ec2.AssociateTransitGatewayRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.AssociateTransitGatewayRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateTransitGatewayRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateTransitGatewayRouteTableInput) *ec2.AssociateTransitGatewayRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateTransitGatewayRouteTableOutput)
		}
	}

	return r0, r1
}

// AssociateTransitGatewayRouteTableWithContext provides a mock function.
func (_m *Mockec2API) AssociateTransitGatewayRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateTransitGatewayRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateTransitGatewayRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateTransitGatewayRouteTableInput, ...request.Option) *ec2.AssociateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateTransitGatewayRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVpcCidrBlock provides a mock function.
func (_m *Mockec2API) AssociateVpcCidrBlock(_parameter_0 *ec2.AssociateVpcCidrBlockInput) (_result_0 *ec2.AssociateVpcCidrBlockOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AssociateVpcCidrBlockOutput
	if rf, ok := ret.Get(0).(func(*ec2.AssociateVpcCidrBlockInput) *ec2.AssociateVpcCidrBlockOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateVpcCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AssociateVpcCidrBlockInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVpcCidrBlockRequest provides a mock function.
func (_m *Mockec2API) AssociateVpcCidrBlockRequest(_parameter_0 *ec2.AssociateVpcCidrBlockInput) (_result_0 *request.Request, _result_1 *ec2.AssociateVpcCidrBlockOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AssociateVpcCidrBlockInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AssociateVpcCidrBlockOutput
	if rf, ok := ret.Get(1).(func(*ec2.AssociateVpcCidrBlockInput) *ec2.AssociateVpcCidrBlockOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AssociateVpcCidrBlockOutput)
		}
	}

	return r0, r1
}

// AssociateVpcCidrBlockWithContext provides a mock function.
func (_m *Mockec2API) AssociateVpcCidrBlockWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AssociateVpcCidrBlockInput, _parameter_2 ...request.Option) (_result_0 *ec2.AssociateVpcCidrBlockOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AssociateVpcCidrBlockOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AssociateVpcCidrBlockInput, ...request.Option) *ec2.AssociateVpcCidrBlockOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AssociateVpcCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AssociateVpcCidrBlockInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachClassicLinkVpc provides a mock function.
func (_m *Mockec2API) AttachClassicLinkVpc(_parameter_0 *ec2.AttachClassicLinkVpcInput) (_result_0 *ec2.AttachClassicLinkVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AttachClassicLinkVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.AttachClassicLinkVpcInput) *ec2.AttachClassicLinkVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachClassicLinkVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AttachClassicLinkVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachClassicLinkVpcRequest provides a mock function.
func (_m *Mockec2API) AttachClassicLinkVpcRequest(_parameter_0 *ec2.AttachClassicLinkVpcInput) (_result_0 *request.Request, _result_1 *ec2.AttachClassicLinkVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AttachClassicLinkVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AttachClassicLinkVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.AttachClassicLinkVpcInput) *ec2.AttachClassicLinkVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AttachClassicLinkVpcOutput)
		}
	}

	return r0, r1
}

// AttachClassicLinkVpcWithContext provides a mock function.
func (_m *Mockec2API) AttachClassicLinkVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AttachClassicLinkVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.AttachClassicLinkVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AttachClassicLinkVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AttachClassicLinkVpcInput, ...request.Option) *ec2.AttachClassicLinkVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachClassicLinkVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AttachClassicLinkVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInternetGateway provides a mock function.
func (_m *Mockec2API) AttachInternetGateway(_parameter_0 *ec2.AttachInternetGatewayInput) (_result_0 *ec2.AttachInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AttachInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.AttachInternetGatewayInput) *ec2.AttachInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AttachInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) AttachInternetGatewayRequest(_parameter_0 *ec2.AttachInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.AttachInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AttachInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AttachInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.AttachInternetGatewayInput) *ec2.AttachInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AttachInternetGatewayOutput)
		}
	}

	return r0, r1
}

// AttachInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) AttachInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AttachInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.AttachInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AttachInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AttachInternetGatewayInput, ...request.Option) *ec2.AttachInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AttachInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNetworkInterface provides a mock function.
func (_m *Mockec2API) AttachNetworkInterface(_parameter_0 *ec2.AttachNetworkInterfaceInput) (_result_0 *ec2.AttachNetworkInterfaceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AttachNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(*ec2.AttachNetworkInterfaceInput) *ec2.AttachNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AttachNetworkInterfaceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachNetworkInterfaceRequest provides a mock function.
func (_m *Mockec2API) AttachNetworkInterfaceRequest(_parameter_0 *ec2.AttachNetworkInterfaceInput) (_result_0 *request.Request, _result_1 *ec2.AttachNetworkInterfaceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AttachNetworkInterfaceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AttachNetworkInterfaceOutput
	if rf, ok := ret.Get(1).(func(*ec2.AttachNetworkInterfaceInput) *ec2.AttachNetworkInterfaceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AttachNetworkInterfaceOutput)
		}
	}

	return r0, r1
}

// AttachNetworkInterfaceWithContext provides a mock function.
func (_m *Mockec2API) AttachNetworkInterfaceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AttachNetworkInterfaceInput, _parameter_2 ...request.Option) (_result_0 *ec2.AttachNetworkInterfaceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AttachNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AttachNetworkInterfaceInput, ...request.Option) *ec2.AttachNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AttachNetworkInterfaceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolume provides a mock function.
func (_m *Mockec2API) AttachVolume(_parameter_0 *ec2.AttachVolumeInput) (_result_0 *ec2.VolumeAttachment, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.VolumeAttachment
	if rf, ok := ret.Get(0).(func(*ec2.AttachVolumeInput) *ec2.VolumeAttachment); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AttachVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolumeRequest provides a mock function.
func (_m *Mockec2API) AttachVolumeRequest(_parameter_0 *ec2.AttachVolumeInput) (_result_0 *request.Request, _result_1 *ec2.VolumeAttachment) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AttachVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.VolumeAttachment
	if rf, ok := ret.Get(1).(func(*ec2.AttachVolumeInput) *ec2.VolumeAttachment); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.VolumeAttachment)
		}
	}

	return r0, r1
}

// AttachVolumeWithContext provides a mock function.
func (_m *Mockec2API) AttachVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AttachVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.VolumeAttachment, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.VolumeAttachment
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AttachVolumeInput, ...request.Option) *ec2.VolumeAttachment); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AttachVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVpnGateway provides a mock function.
func (_m *Mockec2API) AttachVpnGateway(_parameter_0 *ec2.AttachVpnGatewayInput) (_result_0 *ec2.AttachVpnGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AttachVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.AttachVpnGatewayInput) *ec2.AttachVpnGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AttachVpnGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVpnGatewayRequest provides a mock function.
func (_m *Mockec2API) AttachVpnGatewayRequest(_parameter_0 *ec2.AttachVpnGatewayInput) (_result_0 *request.Request, _result_1 *ec2.AttachVpnGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AttachVpnGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AttachVpnGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.AttachVpnGatewayInput) *ec2.AttachVpnGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AttachVpnGatewayOutput)
		}
	}

	return r0, r1
}

// AttachVpnGatewayWithContext provides a mock function.
func (_m *Mockec2API) AttachVpnGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AttachVpnGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.AttachVpnGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AttachVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AttachVpnGatewayInput, ...request.Option) *ec2.AttachVpnGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AttachVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AttachVpnGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeClientVpnIngress provides a mock function.
func (_m *Mockec2API) AuthorizeClientVpnIngress(_parameter_0 *ec2.AuthorizeClientVpnIngressInput) (_result_0 *ec2.AuthorizeClientVpnIngressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AuthorizeClientVpnIngressOutput
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeClientVpnIngressInput) *ec2.AuthorizeClientVpnIngressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeClientVpnIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeClientVpnIngressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeClientVpnIngressRequest provides a mock function.
func (_m *Mockec2API) AuthorizeClientVpnIngressRequest(_parameter_0 *ec2.AuthorizeClientVpnIngressInput) (_result_0 *request.Request, _result_1 *ec2.AuthorizeClientVpnIngressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeClientVpnIngressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AuthorizeClientVpnIngressOutput
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeClientVpnIngressInput) *ec2.AuthorizeClientVpnIngressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AuthorizeClientVpnIngressOutput)
		}
	}

	return r0, r1
}

// AuthorizeClientVpnIngressWithContext provides a mock function.
func (_m *Mockec2API) AuthorizeClientVpnIngressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AuthorizeClientVpnIngressInput, _parameter_2 ...request.Option) (_result_0 *ec2.AuthorizeClientVpnIngressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AuthorizeClientVpnIngressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AuthorizeClientVpnIngressInput, ...request.Option) *ec2.AuthorizeClientVpnIngressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeClientVpnIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AuthorizeClientVpnIngressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeSecurityGroupEgress provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupEgress(_parameter_0 *ec2.AuthorizeSecurityGroupEgressInput) (_result_0 *ec2.AuthorizeSecurityGroupEgressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AuthorizeSecurityGroupEgressOutput
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeSecurityGroupEgressInput) *ec2.AuthorizeSecurityGroupEgressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeSecurityGroupEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeSecurityGroupEgressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeSecurityGroupEgressRequest provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupEgressRequest(_parameter_0 *ec2.AuthorizeSecurityGroupEgressInput) (_result_0 *request.Request, _result_1 *ec2.AuthorizeSecurityGroupEgressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeSecurityGroupEgressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AuthorizeSecurityGroupEgressOutput
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeSecurityGroupEgressInput) *ec2.AuthorizeSecurityGroupEgressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AuthorizeSecurityGroupEgressOutput)
		}
	}

	return r0, r1
}

// AuthorizeSecurityGroupEgressWithContext provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupEgressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AuthorizeSecurityGroupEgressInput, _parameter_2 ...request.Option) (_result_0 *ec2.AuthorizeSecurityGroupEgressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AuthorizeSecurityGroupEgressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AuthorizeSecurityGroupEgressInput, ...request.Option) *ec2.AuthorizeSecurityGroupEgressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeSecurityGroupEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AuthorizeSecurityGroupEgressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeSecurityGroupIngress provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupIngress(_parameter_0 *ec2.AuthorizeSecurityGroupIngressInput) (_result_0 *ec2.AuthorizeSecurityGroupIngressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.AuthorizeSecurityGroupIngressOutput
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeSecurityGroupIngressInput) *ec2.AuthorizeSecurityGroupIngressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeSecurityGroupIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeSecurityGroupIngressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeSecurityGroupIngressRequest provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupIngressRequest(_parameter_0 *ec2.AuthorizeSecurityGroupIngressInput) (_result_0 *request.Request, _result_1 *ec2.AuthorizeSecurityGroupIngressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.AuthorizeSecurityGroupIngressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.AuthorizeSecurityGroupIngressOutput
	if rf, ok := ret.Get(1).(func(*ec2.AuthorizeSecurityGroupIngressInput) *ec2.AuthorizeSecurityGroupIngressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.AuthorizeSecurityGroupIngressOutput)
		}
	}

	return r0, r1
}

// AuthorizeSecurityGroupIngressWithContext provides a mock function.
func (_m *Mockec2API) AuthorizeSecurityGroupIngressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.AuthorizeSecurityGroupIngressInput, _parameter_2 ...request.Option) (_result_0 *ec2.AuthorizeSecurityGroupIngressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.AuthorizeSecurityGroupIngressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.AuthorizeSecurityGroupIngressInput, ...request.Option) *ec2.AuthorizeSecurityGroupIngressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.AuthorizeSecurityGroupIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.AuthorizeSecurityGroupIngressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BundleInstance provides a mock function.
func (_m *Mockec2API) BundleInstance(_parameter_0 *ec2.BundleInstanceInput) (_result_0 *ec2.BundleInstanceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.BundleInstanceOutput
	if rf, ok := ret.Get(0).(func(*ec2.BundleInstanceInput) *ec2.BundleInstanceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.BundleInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.BundleInstanceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BundleInstanceRequest provides a mock function.
func (_m *Mockec2API) BundleInstanceRequest(_parameter_0 *ec2.BundleInstanceInput) (_result_0 *request.Request, _result_1 *ec2.BundleInstanceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.BundleInstanceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.BundleInstanceOutput
	if rf, ok := ret.Get(1).(func(*ec2.BundleInstanceInput) *ec2.BundleInstanceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.BundleInstanceOutput)
		}
	}

	return r0, r1
}

// BundleInstanceWithContext provides a mock function.
func (_m *Mockec2API) BundleInstanceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.BundleInstanceInput, _parameter_2 ...request.Option) (_result_0 *ec2.BundleInstanceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.BundleInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.BundleInstanceInput, ...request.Option) *ec2.BundleInstanceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.BundleInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.BundleInstanceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBundleTask provides a mock function.
func (_m *Mockec2API) CancelBundleTask(_parameter_0 *ec2.CancelBundleTaskInput) (_result_0 *ec2.CancelBundleTaskOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelBundleTaskOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelBundleTaskInput) *ec2.CancelBundleTaskOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelBundleTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelBundleTaskInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelBundleTaskRequest provides a mock function.
func (_m *Mockec2API) CancelBundleTaskRequest(_parameter_0 *ec2.CancelBundleTaskInput) (_result_0 *request.Request, _result_1 *ec2.CancelBundleTaskOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelBundleTaskInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelBundleTaskOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelBundleTaskInput) *ec2.CancelBundleTaskOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelBundleTaskOutput)
		}
	}

	return r0, r1
}

// CancelBundleTaskWithContext provides a mock function.
func (_m *Mockec2API) CancelBundleTaskWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelBundleTaskInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelBundleTaskOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelBundleTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelBundleTaskInput, ...request.Option) *ec2.CancelBundleTaskOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelBundleTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelBundleTaskInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCapacityReservation provides a mock function.
func (_m *Mockec2API) CancelCapacityReservation(_parameter_0 *ec2.CancelCapacityReservationInput) (_result_0 *ec2.CancelCapacityReservationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelCapacityReservationInput) *ec2.CancelCapacityReservationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelCapacityReservationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCapacityReservationRequest provides a mock function.
func (_m *Mockec2API) CancelCapacityReservationRequest(_parameter_0 *ec2.CancelCapacityReservationInput) (_result_0 *request.Request, _result_1 *ec2.CancelCapacityReservationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelCapacityReservationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelCapacityReservationOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelCapacityReservationInput) *ec2.CancelCapacityReservationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelCapacityReservationOutput)
		}
	}

	return r0, r1
}

// CancelCapacityReservationWithContext provides a mock function.
func (_m *Mockec2API) CancelCapacityReservationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelCapacityReservationInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelCapacityReservationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelCapacityReservationInput, ...request.Option) *ec2.CancelCapacityReservationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelConversionTask provides a mock function.
func (_m *Mockec2API) CancelConversionTask(_parameter_0 *ec2.CancelConversionTaskInput) (_result_0 *ec2.CancelConversionTaskOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelConversionTaskOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelConversionTaskInput) *ec2.CancelConversionTaskOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelConversionTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelConversionTaskInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelConversionTaskRequest provides a mock function.
func (_m *Mockec2API) CancelConversionTaskRequest(_parameter_0 *ec2.CancelConversionTaskInput) (_result_0 *request.Request, _result_1 *ec2.CancelConversionTaskOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelConversionTaskInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelConversionTaskOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelConversionTaskInput) *ec2.CancelConversionTaskOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelConversionTaskOutput)
		}
	}

	return r0, r1
}

// CancelConversionTaskWithContext provides a mock function.
func (_m *Mockec2API) CancelConversionTaskWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelConversionTaskInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelConversionTaskOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelConversionTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelConversionTaskInput, ...request.Option) *ec2.CancelConversionTaskOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelConversionTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelConversionTaskInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportTask provides a mock function.
func (_m *Mockec2API) CancelExportTask(_parameter_0 *ec2.CancelExportTaskInput) (_result_0 *ec2.CancelExportTaskOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelExportTaskOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelExportTaskInput) *ec2.CancelExportTaskOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelExportTaskInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportTaskRequest provides a mock function.
func (_m *Mockec2API) CancelExportTaskRequest(_parameter_0 *ec2.CancelExportTaskInput) (_result_0 *request.Request, _result_1 *ec2.CancelExportTaskOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelExportTaskInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelExportTaskOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelExportTaskInput) *ec2.CancelExportTaskOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelExportTaskOutput)
		}
	}

	return r0, r1
}

// CancelExportTaskWithContext provides a mock function.
func (_m *Mockec2API) CancelExportTaskWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelExportTaskInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelExportTaskOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelExportTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelExportTaskInput, ...request.Option) *ec2.CancelExportTaskOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelImportTask provides a mock function.
func (_m *Mockec2API) CancelImportTask(_parameter_0 *ec2.CancelImportTaskInput) (_result_0 *ec2.CancelImportTaskOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelImportTaskOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelImportTaskInput) *ec2.CancelImportTaskOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelImportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelImportTaskInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelImportTaskRequest provides a mock function.
func (_m *Mockec2API) CancelImportTaskRequest(_parameter_0 *ec2.CancelImportTaskInput) (_result_0 *request.Request, _result_1 *ec2.CancelImportTaskOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelImportTaskInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelImportTaskOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelImportTaskInput) *ec2.CancelImportTaskOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelImportTaskOutput)
		}
	}

	return r0, r1
}

// CancelImportTaskWithContext provides a mock function.
func (_m *Mockec2API) CancelImportTaskWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelImportTaskInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelImportTaskOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelImportTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelImportTaskInput, ...request.Option) *ec2.CancelImportTaskOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelImportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelImportTaskInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReservedInstancesListing provides a mock function.
func (_m *Mockec2API) CancelReservedInstancesListing(_parameter_0 *ec2.CancelReservedInstancesListingInput) (_result_0 *ec2.CancelReservedInstancesListingOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelReservedInstancesListingOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelReservedInstancesListingInput) *ec2.CancelReservedInstancesListingOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelReservedInstancesListingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelReservedInstancesListingInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReservedInstancesListingRequest provides a mock function.
func (_m *Mockec2API) CancelReservedInstancesListingRequest(_parameter_0 *ec2.CancelReservedInstancesListingInput) (_result_0 *request.Request, _result_1 *ec2.CancelReservedInstancesListingOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelReservedInstancesListingInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelReservedInstancesListingOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelReservedInstancesListingInput) *ec2.CancelReservedInstancesListingOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelReservedInstancesListingOutput)
		}
	}

	return r0, r1
}

// CancelReservedInstancesListingWithContext provides a mock function.
func (_m *Mockec2API) CancelReservedInstancesListingWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelReservedInstancesListingInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelReservedInstancesListingOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelReservedInstancesListingOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelReservedInstancesListingInput, ...request.Option) *ec2.CancelReservedInstancesListingOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelReservedInstancesListingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelReservedInstancesListingInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSpotFleetRequests provides a mock function.
func (_m *Mockec2API) CancelSpotFleetRequests(_parameter_0 *ec2.CancelSpotFleetRequestsInput) (_result_0 *ec2.CancelSpotFleetRequestsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelSpotFleetRequestsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelSpotFleetRequestsInput) *ec2.CancelSpotFleetRequestsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelSpotFleetRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelSpotFleetRequestsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSpotFleetRequestsRequest provides a mock function.
func (_m *Mockec2API) CancelSpotFleetRequestsRequest(_parameter_0 *ec2.CancelSpotFleetRequestsInput) (_result_0 *request.Request, _result_1 *ec2.CancelSpotFleetRequestsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelSpotFleetRequestsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelSpotFleetRequestsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelSpotFleetRequestsInput) *ec2.CancelSpotFleetRequestsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelSpotFleetRequestsOutput)
		}
	}

	return r0, r1
}

// CancelSpotFleetRequestsWithContext provides a mock function.
func (_m *Mockec2API) CancelSpotFleetRequestsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelSpotFleetRequestsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelSpotFleetRequestsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelSpotFleetRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelSpotFleetRequestsInput, ...request.Option) *ec2.CancelSpotFleetRequestsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelSpotFleetRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelSpotFleetRequestsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSpotInstanceRequests provides a mock function.
func (_m *Mockec2API) CancelSpotInstanceRequests(_parameter_0 *ec2.CancelSpotInstanceRequestsInput) (_result_0 *ec2.CancelSpotInstanceRequestsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CancelSpotInstanceRequestsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CancelSpotInstanceRequestsInput) *ec2.CancelSpotInstanceRequestsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelSpotInstanceRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CancelSpotInstanceRequestsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSpotInstanceRequestsRequest provides a mock function.
func (_m *Mockec2API) CancelSpotInstanceRequestsRequest(_parameter_0 *ec2.CancelSpotInstanceRequestsInput) (_result_0 *request.Request, _result_1 *ec2.CancelSpotInstanceRequestsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CancelSpotInstanceRequestsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CancelSpotInstanceRequestsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CancelSpotInstanceRequestsInput) *ec2.CancelSpotInstanceRequestsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CancelSpotInstanceRequestsOutput)
		}
	}

	return r0, r1
}

// CancelSpotInstanceRequestsWithContext provides a mock function.
func (_m *Mockec2API) CancelSpotInstanceRequestsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CancelSpotInstanceRequestsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CancelSpotInstanceRequestsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CancelSpotInstanceRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CancelSpotInstanceRequestsInput, ...request.Option) *ec2.CancelSpotInstanceRequestsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CancelSpotInstanceRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CancelSpotInstanceRequestsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmProductInstance provides a mock function.
func (_m *Mockec2API) ConfirmProductInstance(_parameter_0 *ec2.ConfirmProductInstanceInput) (_result_0 *ec2.ConfirmProductInstanceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ConfirmProductInstanceOutput
	if rf, ok := ret.Get(0).(func(*ec2.ConfirmProductInstanceInput) *ec2.ConfirmProductInstanceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ConfirmProductInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ConfirmProductInstanceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmProductInstanceRequest provides a mock function.
func (_m *Mockec2API) ConfirmProductInstanceRequest(_parameter_0 *ec2.ConfirmProductInstanceInput) (_result_0 *request.Request, _result_1 *ec2.ConfirmProductInstanceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ConfirmProductInstanceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ConfirmProductInstanceOutput
	if rf, ok := ret.Get(1).(func(*ec2.ConfirmProductInstanceInput) *ec2.ConfirmProductInstanceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ConfirmProductInstanceOutput)
		}
	}

	return r0, r1
}

// ConfirmProductInstanceWithContext provides a mock function.
func (_m *Mockec2API) ConfirmProductInstanceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ConfirmProductInstanceInput, _parameter_2 ...request.Option) (_result_0 *ec2.ConfirmProductInstanceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ConfirmProductInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ConfirmProductInstanceInput, ...request.Option) *ec2.ConfirmProductInstanceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ConfirmProductInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ConfirmProductInstanceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFpgaImage provides a mock function.
func (_m *Mockec2API) CopyFpgaImage(_parameter_0 *ec2.CopyFpgaImageInput) (_result_0 *ec2.CopyFpgaImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CopyFpgaImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.CopyFpgaImageInput) *ec2.CopyFpgaImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopyFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CopyFpgaImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFpgaImageRequest provides a mock function.
func (_m *Mockec2API) CopyFpgaImageRequest(_parameter_0 *ec2.CopyFpgaImageInput) (_result_0 *request.Request, _result_1 *ec2.CopyFpgaImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CopyFpgaImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CopyFpgaImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.CopyFpgaImageInput) *ec2.CopyFpgaImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CopyFpgaImageOutput)
		}
	}

	return r0, r1
}

// CopyFpgaImageWithContext provides a mock function.
func (_m *Mockec2API) CopyFpgaImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CopyFpgaImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.CopyFpgaImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CopyFpgaImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CopyFpgaImageInput, ...request.Option) *ec2.CopyFpgaImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopyFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CopyFpgaImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyImage provides a mock function.
func (_m *Mockec2API) CopyImage(_parameter_0 *ec2.CopyImageInput) (_result_0 *ec2.CopyImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CopyImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.CopyImageInput) *ec2.CopyImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopyImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CopyImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyImageRequest provides a mock function.
func (_m *Mockec2API) CopyImageRequest(_parameter_0 *ec2.CopyImageInput) (_result_0 *request.Request, _result_1 *ec2.CopyImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CopyImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CopyImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.CopyImageInput) *ec2.CopyImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CopyImageOutput)
		}
	}

	return r0, r1
}

// CopyImageWithContext provides a mock function.
func (_m *Mockec2API) CopyImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CopyImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.CopyImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CopyImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CopyImageInput, ...request.Option) *ec2.CopyImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopyImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CopyImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopySnapshot provides a mock function.
func (_m *Mockec2API) CopySnapshot(_parameter_0 *ec2.CopySnapshotInput) (_result_0 *ec2.CopySnapshotOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CopySnapshotOutput
	if rf, ok := ret.Get(0).(func(*ec2.CopySnapshotInput) *ec2.CopySnapshotOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopySnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CopySnapshotInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopySnapshotRequest provides a mock function.
func (_m *Mockec2API) CopySnapshotRequest(_parameter_0 *ec2.CopySnapshotInput) (_result_0 *request.Request, _result_1 *ec2.CopySnapshotOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CopySnapshotInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CopySnapshotOutput
	if rf, ok := ret.Get(1).(func(*ec2.CopySnapshotInput) *ec2.CopySnapshotOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CopySnapshotOutput)
		}
	}

	return r0, r1
}

// CopySnapshotWithContext provides a mock function.
func (_m *Mockec2API) CopySnapshotWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CopySnapshotInput, _parameter_2 ...request.Option) (_result_0 *ec2.CopySnapshotOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CopySnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CopySnapshotInput, ...request.Option) *ec2.CopySnapshotOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CopySnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CopySnapshotInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCapacityReservation provides a mock function.
func (_m *Mockec2API) CreateCapacityReservation(_parameter_0 *ec2.CreateCapacityReservationInput) (_result_0 *ec2.CreateCapacityReservationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateCapacityReservationInput) *ec2.CreateCapacityReservationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateCapacityReservationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCapacityReservationRequest provides a mock function.
func (_m *Mockec2API) CreateCapacityReservationRequest(_parameter_0 *ec2.CreateCapacityReservationInput) (_result_0 *request.Request, _result_1 *ec2.CreateCapacityReservationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateCapacityReservationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateCapacityReservationOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateCapacityReservationInput) *ec2.CreateCapacityReservationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateCapacityReservationOutput)
		}
	}

	return r0, r1
}

// CreateCapacityReservationWithContext provides a mock function.
func (_m *Mockec2API) CreateCapacityReservationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateCapacityReservationInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateCapacityReservationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateCapacityReservationInput, ...request.Option) *ec2.CreateCapacityReservationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCarrierGateway provides a mock function.
func (_m *Mockec2API) CreateCarrierGateway(_parameter_0 *ec2.CreateCarrierGatewayInput) (_result_0 *ec2.CreateCarrierGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateCarrierGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateCarrierGatewayInput) *ec2.CreateCarrierGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCarrierGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateCarrierGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCarrierGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateCarrierGatewayRequest(_parameter_0 *ec2.CreateCarrierGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateCarrierGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateCarrierGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateCarrierGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateCarrierGatewayInput) *ec2.CreateCarrierGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateCarrierGatewayOutput)
		}
	}

	return r0, r1
}

// CreateCarrierGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateCarrierGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateCarrierGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateCarrierGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateCarrierGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateCarrierGatewayInput, ...request.Option) *ec2.CreateCarrierGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCarrierGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateCarrierGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClientVpnEndpoint provides a mock function.
func (_m *Mockec2API) CreateClientVpnEndpoint(_parameter_0 *ec2.CreateClientVpnEndpointInput) (_result_0 *ec2.CreateClientVpnEndpointOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateClientVpnEndpointInput) *ec2.CreateClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateClientVpnEndpointInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClientVpnEndpointRequest provides a mock function.
func (_m *Mockec2API) CreateClientVpnEndpointRequest(_parameter_0 *ec2.CreateClientVpnEndpointInput) (_result_0 *request.Request, _result_1 *ec2.CreateClientVpnEndpointOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateClientVpnEndpointInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateClientVpnEndpointOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateClientVpnEndpointInput) *ec2.CreateClientVpnEndpointOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateClientVpnEndpointOutput)
		}
	}

	return r0, r1
}

// CreateClientVpnEndpointWithContext provides a mock function.
func (_m *Mockec2API) CreateClientVpnEndpointWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateClientVpnEndpointInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateClientVpnEndpointOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateClientVpnEndpointInput, ...request.Option) *ec2.CreateClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateClientVpnEndpointInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClientVpnRoute provides a mock function.
func (_m *Mockec2API) CreateClientVpnRoute(_parameter_0 *ec2.CreateClientVpnRouteInput) (_result_0 *ec2.CreateClientVpnRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateClientVpnRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateClientVpnRouteInput) *ec2.CreateClientVpnRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateClientVpnRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateClientVpnRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClientVpnRouteRequest provides a mock function.
func (_m *Mockec2API) CreateClientVpnRouteRequest(_parameter_0 *ec2.CreateClientVpnRouteInput) (_result_0 *request.Request, _result_1 *ec2.CreateClientVpnRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateClientVpnRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateClientVpnRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateClientVpnRouteInput) *ec2.CreateClientVpnRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateClientVpnRouteOutput)
		}
	}

	return r0, r1
}

// CreateClientVpnRouteWithContext provides a mock function.
func (_m *Mockec2API) CreateClientVpnRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateClientVpnRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateClientVpnRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateClientVpnRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateClientVpnRouteInput, ...request.Option) *ec2.CreateClientVpnRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateClientVpnRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateClientVpnRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomerGateway provides a mock function.
func (_m *Mockec2API) CreateCustomerGateway(_parameter_0 *ec2.CreateCustomerGatewayInput) (_result_0 *ec2.CreateCustomerGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateCustomerGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateCustomerGatewayInput) *ec2.CreateCustomerGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCustomerGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateCustomerGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomerGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateCustomerGatewayRequest(_parameter_0 *ec2.CreateCustomerGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateCustomerGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateCustomerGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateCustomerGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateCustomerGatewayInput) *ec2.CreateCustomerGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateCustomerGatewayOutput)
		}
	}

	return r0, r1
}

// CreateCustomerGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateCustomerGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateCustomerGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateCustomerGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateCustomerGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateCustomerGatewayInput, ...request.Option) *ec2.CreateCustomerGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateCustomerGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateCustomerGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefaultSubnet provides a mock function.
func (_m *Mockec2API) CreateDefaultSubnet(_parameter_0 *ec2.CreateDefaultSubnetInput) (_result_0 *ec2.CreateDefaultSubnetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateDefaultSubnetOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateDefaultSubnetInput) *ec2.CreateDefaultSubnetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDefaultSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateDefaultSubnetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefaultSubnetRequest provides a mock function.
func (_m *Mockec2API) CreateDefaultSubnetRequest(_parameter_0 *ec2.CreateDefaultSubnetInput) (_result_0 *request.Request, _result_1 *ec2.CreateDefaultSubnetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateDefaultSubnetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateDefaultSubnetOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateDefaultSubnetInput) *ec2.CreateDefaultSubnetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateDefaultSubnetOutput)
		}
	}

	return r0, r1
}

// CreateDefaultSubnetWithContext provides a mock function.
func (_m *Mockec2API) CreateDefaultSubnetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateDefaultSubnetInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateDefaultSubnetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateDefaultSubnetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateDefaultSubnetInput, ...request.Option) *ec2.CreateDefaultSubnetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDefaultSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateDefaultSubnetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefaultVpc provides a mock function.
func (_m *Mockec2API) CreateDefaultVpc(_parameter_0 *ec2.CreateDefaultVpcInput) (_result_0 *ec2.CreateDefaultVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateDefaultVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateDefaultVpcInput) *ec2.CreateDefaultVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDefaultVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateDefaultVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefaultVpcRequest provides a mock function.
func (_m *Mockec2API) CreateDefaultVpcRequest(_parameter_0 *ec2.CreateDefaultVpcInput) (_result_0 *request.Request, _result_1 *ec2.CreateDefaultVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateDefaultVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateDefaultVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateDefaultVpcInput) *ec2.CreateDefaultVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateDefaultVpcOutput)
		}
	}

	return r0, r1
}

// CreateDefaultVpcWithContext provides a mock function.
func (_m *Mockec2API) CreateDefaultVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateDefaultVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateDefaultVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateDefaultVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateDefaultVpcInput, ...request.Option) *ec2.CreateDefaultVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDefaultVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateDefaultVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDhcpOptions provides a mock function.
func (_m *Mockec2API) CreateDhcpOptions(_parameter_0 *ec2.CreateDhcpOptionsInput) (_result_0 *ec2.CreateDhcpOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateDhcpOptionsInput) *ec2.CreateDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateDhcpOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDhcpOptionsRequest provides a mock function.
func (_m *Mockec2API) CreateDhcpOptionsRequest(_parameter_0 *ec2.CreateDhcpOptionsInput) (_result_0 *request.Request, _result_1 *ec2.CreateDhcpOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateDhcpOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateDhcpOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateDhcpOptionsInput) *ec2.CreateDhcpOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateDhcpOptionsOutput)
		}
	}

	return r0, r1
}

// CreateDhcpOptionsWithContext provides a mock function.
func (_m *Mockec2API) CreateDhcpOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateDhcpOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateDhcpOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateDhcpOptionsInput, ...request.Option) *ec2.CreateDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateDhcpOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEgressOnlyInternetGateway provides a mock function.
func (_m *Mockec2API) CreateEgressOnlyInternetGateway(_parameter_0 *ec2.CreateEgressOnlyInternetGatewayInput) (_result_0 *ec2.CreateEgressOnlyInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateEgressOnlyInternetGatewayInput) *ec2.CreateEgressOnlyInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateEgressOnlyInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateEgressOnlyInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEgressOnlyInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateEgressOnlyInternetGatewayRequest(_parameter_0 *ec2.CreateEgressOnlyInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateEgressOnlyInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateEgressOnlyInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateEgressOnlyInternetGatewayInput) *ec2.CreateEgressOnlyInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateEgressOnlyInternetGatewayOutput)
		}
	}

	return r0, r1
}

// CreateEgressOnlyInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateEgressOnlyInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateEgressOnlyInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateEgressOnlyInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateEgressOnlyInternetGatewayInput, ...request.Option) *ec2.CreateEgressOnlyInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateEgressOnlyInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateEgressOnlyInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleet provides a mock function.
func (_m *Mockec2API) CreateFleet(_parameter_0 *ec2.CreateFleetInput) (_result_0 *ec2.CreateFleetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateFleetOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateFleetInput) *ec2.CreateFleetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateFleetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleetRequest provides a mock function.
func (_m *Mockec2API) CreateFleetRequest(_parameter_0 *ec2.CreateFleetInput) (_result_0 *request.Request, _result_1 *ec2.CreateFleetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateFleetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateFleetOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateFleetInput) *ec2.CreateFleetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateFleetOutput)
		}
	}

	return r0, r1
}

// CreateFleetWithContext provides a mock function.
func (_m *Mockec2API) CreateFleetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateFleetInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateFleetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateFleetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateFleetInput, ...request.Option) *ec2.CreateFleetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateFleetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFlowLogs provides a mock function.
func (_m *Mockec2API) CreateFlowLogs(_parameter_0 *ec2.CreateFlowLogsInput) (_result_0 *ec2.CreateFlowLogsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateFlowLogsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateFlowLogsInput) *ec2.CreateFlowLogsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateFlowLogsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFlowLogsRequest provides a mock function.
func (_m *Mockec2API) CreateFlowLogsRequest(_parameter_0 *ec2.CreateFlowLogsInput) (_result_0 *request.Request, _result_1 *ec2.CreateFlowLogsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateFlowLogsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateFlowLogsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateFlowLogsInput) *ec2.CreateFlowLogsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateFlowLogsOutput)
		}
	}

	return r0, r1
}

// CreateFlowLogsWithContext provides a mock function.
func (_m *Mockec2API) CreateFlowLogsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateFlowLogsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateFlowLogsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateFlowLogsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateFlowLogsInput, ...request.Option) *ec2.CreateFlowLogsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateFlowLogsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFpgaImage provides a mock function.
func (_m *Mockec2API) CreateFpgaImage(_parameter_0 *ec2.CreateFpgaImageInput) (_result_0 *ec2.CreateFpgaImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateFpgaImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateFpgaImageInput) *ec2.CreateFpgaImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateFpgaImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFpgaImageRequest provides a mock function.
func (_m *Mockec2API) CreateFpgaImageRequest(_parameter_0 *ec2.CreateFpgaImageInput) (_result_0 *request.Request, _result_1 *ec2.CreateFpgaImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateFpgaImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateFpgaImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateFpgaImageInput) *ec2.CreateFpgaImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateFpgaImageOutput)
		}
	}

	return r0, r1
}

// CreateFpgaImageWithContext provides a mock function.
func (_m *Mockec2API) CreateFpgaImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateFpgaImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateFpgaImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateFpgaImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateFpgaImageInput, ...request.Option) *ec2.CreateFpgaImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateFpgaImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function.
func (_m *Mockec2API) CreateImage(_parameter_0 *ec2.CreateImageInput) (_result_0 *ec2.CreateImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateImageInput) *ec2.CreateImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageRequest provides a mock function.
func (_m *Mockec2API) CreateImageRequest(_parameter_0 *ec2.CreateImageInput) (_result_0 *request.Request, _result_1 *ec2.CreateImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateImageInput) *ec2.CreateImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateImageOutput)
		}
	}

	return r0, r1
}

// CreateImageWithContext provides a mock function.
func (_m *Mockec2API) CreateImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateImageInput, ...request.Option) *ec2.CreateImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceExportTask provides a mock function.
func (_m *Mockec2API) CreateInstanceExportTask(_parameter_0 *ec2.CreateInstanceExportTaskInput) (_result_0 *ec2.CreateInstanceExportTaskOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateInstanceExportTaskOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateInstanceExportTaskInput) *ec2.CreateInstanceExportTaskOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateInstanceExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateInstanceExportTaskInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceExportTaskRequest provides a mock function.
func (_m *Mockec2API) CreateInstanceExportTaskRequest(_parameter_0 *ec2.CreateInstanceExportTaskInput) (_result_0 *request.Request, _result_1 *ec2.CreateInstanceExportTaskOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateInstanceExportTaskInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateInstanceExportTaskOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateInstanceExportTaskInput) *ec2.CreateInstanceExportTaskOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateInstanceExportTaskOutput)
		}
	}

	return r0, r1
}

// CreateInstanceExportTaskWithContext provides a mock function.
func (_m *Mockec2API) CreateInstanceExportTaskWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateInstanceExportTaskInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateInstanceExportTaskOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateInstanceExportTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateInstanceExportTaskInput, ...request.Option) *ec2.CreateInstanceExportTaskOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateInstanceExportTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateInstanceExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInternetGateway provides a mock function.
func (_m *Mockec2API) CreateInternetGateway(_parameter_0 *ec2.CreateInternetGatewayInput) (_result_0 *ec2.CreateInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateInternetGatewayInput) *ec2.CreateInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateInternetGatewayRequest(_parameter_0 *ec2.CreateInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateInternetGatewayInput) *ec2.CreateInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateInternetGatewayOutput)
		}
	}

	return r0, r1
}

// CreateInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateInternetGatewayInput, ...request.Option) *ec2.CreateInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPair provides a mock function.
func (_m *Mockec2API) CreateKeyPair(_parameter_0 *ec2.CreateKeyPairInput) (_result_0 *ec2.CreateKeyPairOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateKeyPairOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateKeyPairInput) *ec2.CreateKeyPairOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateKeyPairInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPairRequest provides a mock function.
func (_m *Mockec2API) CreateKeyPairRequest(_parameter_0 *ec2.CreateKeyPairInput) (_result_0 *request.Request, _result_1 *ec2.CreateKeyPairOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateKeyPairInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateKeyPairOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateKeyPairInput) *ec2.CreateKeyPairOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateKeyPairOutput)
		}
	}

	return r0, r1
}

// CreateKeyPairWithContext provides a mock function.
func (_m *Mockec2API) CreateKeyPairWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateKeyPairInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateKeyPairOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateKeyPairInput, ...request.Option) *ec2.CreateKeyPairOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchTemplate provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplate(_parameter_0 *ec2.CreateLaunchTemplateInput) (_result_0 *ec2.CreateLaunchTemplateOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateLaunchTemplateInput) *ec2.CreateLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateLaunchTemplateInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchTemplateRequest provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplateRequest(_parameter_0 *ec2.CreateLaunchTemplateInput) (_result_0 *request.Request, _result_1 *ec2.CreateLaunchTemplateOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateLaunchTemplateInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateLaunchTemplateOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateLaunchTemplateInput) *ec2.CreateLaunchTemplateOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateLaunchTemplateOutput)
		}
	}

	return r0, r1
}

// CreateLaunchTemplateVersion provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplateVersion(_parameter_0 *ec2.CreateLaunchTemplateVersionInput) (_result_0 *ec2.CreateLaunchTemplateVersionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateLaunchTemplateVersionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateLaunchTemplateVersionInput) *ec2.CreateLaunchTemplateVersionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLaunchTemplateVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateLaunchTemplateVersionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchTemplateVersionRequest provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplateVersionRequest(_parameter_0 *ec2.CreateLaunchTemplateVersionInput) (_result_0 *request.Request, _result_1 *ec2.CreateLaunchTemplateVersionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateLaunchTemplateVersionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateLaunchTemplateVersionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateLaunchTemplateVersionInput) *ec2.CreateLaunchTemplateVersionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateLaunchTemplateVersionOutput)
		}
	}

	return r0, r1
}

// CreateLaunchTemplateVersionWithContext provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplateVersionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateLaunchTemplateVersionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateLaunchTemplateVersionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateLaunchTemplateVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateLaunchTemplateVersionInput, ...request.Option) *ec2.CreateLaunchTemplateVersionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLaunchTemplateVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateLaunchTemplateVersionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchTemplateWithContext provides a mock function.
func (_m *Mockec2API) CreateLaunchTemplateWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateLaunchTemplateInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateLaunchTemplateOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateLaunchTemplateInput, ...request.Option) *ec2.CreateLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateLaunchTemplateInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocalGatewayRoute provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRoute(_parameter_0 *ec2.CreateLocalGatewayRouteInput) (_result_0 *ec2.CreateLocalGatewayRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateLocalGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateLocalGatewayRouteInput) *ec2.CreateLocalGatewayRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLocalGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateLocalGatewayRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocalGatewayRouteRequest provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRouteRequest(_parameter_0 *ec2.CreateLocalGatewayRouteInput) (_result_0 *request.Request, _result_1 *ec2.CreateLocalGatewayRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateLocalGatewayRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateLocalGatewayRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateLocalGatewayRouteInput) *ec2.CreateLocalGatewayRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateLocalGatewayRouteOutput)
		}
	}

	return r0, r1
}

// CreateLocalGatewayRouteTableVpcAssociation provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRouteTableVpcAssociation(_parameter_0 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (_result_0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateLocalGatewayRouteTableVpcAssociationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocalGatewayRouteTableVpcAssociationRequest provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRouteTableVpcAssociationRequest(_parameter_0 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput) (_result_0 *request.Request, _result_1 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateLocalGatewayRouteTableVpcAssociationInput) *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	return r0, r1
}

// CreateLocalGatewayRouteTableVpcAssociationWithContext provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRouteTableVpcAssociationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, ...request.Option) *ec2.CreateLocalGatewayRouteTableVpcAssociationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateLocalGatewayRouteTableVpcAssociationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocalGatewayRouteWithContext provides a mock function.
func (_m *Mockec2API) CreateLocalGatewayRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateLocalGatewayRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateLocalGatewayRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateLocalGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateLocalGatewayRouteInput, ...request.Option) *ec2.CreateLocalGatewayRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateLocalGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateLocalGatewayRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManagedPrefixList provides a mock function.
func (_m *Mockec2API) CreateManagedPrefixList(_parameter_0 *ec2.CreateManagedPrefixListInput) (_result_0 *ec2.CreateManagedPrefixListOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateManagedPrefixListInput) *ec2.CreateManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateManagedPrefixListInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateManagedPrefixListRequest provides a mock function.
func (_m *Mockec2API) CreateManagedPrefixListRequest(_parameter_0 *ec2.CreateManagedPrefixListInput) (_result_0 *request.Request, _result_1 *ec2.CreateManagedPrefixListOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateManagedPrefixListInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateManagedPrefixListOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateManagedPrefixListInput) *ec2.CreateManagedPrefixListOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateManagedPrefixListOutput)
		}
	}

	return r0, r1
}

// CreateManagedPrefixListWithContext provides a mock function.
func (_m *Mockec2API) CreateManagedPrefixListWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateManagedPrefixListInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateManagedPrefixListOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateManagedPrefixListInput, ...request.Option) *ec2.CreateManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateManagedPrefixListInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNatGateway provides a mock function.
func (_m *Mockec2API) CreateNatGateway(_parameter_0 *ec2.CreateNatGatewayInput) (_result_0 *ec2.CreateNatGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateNatGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateNatGatewayInput) *ec2.CreateNatGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNatGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateNatGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNatGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateNatGatewayRequest(_parameter_0 *ec2.CreateNatGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateNatGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateNatGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateNatGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateNatGatewayInput) *ec2.CreateNatGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateNatGatewayOutput)
		}
	}

	return r0, r1
}

// CreateNatGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateNatGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateNatGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateNatGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateNatGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateNatGatewayInput, ...request.Option) *ec2.CreateNatGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNatGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateNatGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkAcl provides a mock function.
func (_m *Mockec2API) CreateNetworkAcl(_parameter_0 *ec2.CreateNetworkAclInput) (_result_0 *ec2.CreateNetworkAclOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateNetworkAclOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkAclInput) *ec2.CreateNetworkAclOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkAclOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkAclInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkAclEntry provides a mock function.
func (_m *Mockec2API) CreateNetworkAclEntry(_parameter_0 *ec2.CreateNetworkAclEntryInput) (_result_0 *ec2.CreateNetworkAclEntryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkAclEntryInput) *ec2.CreateNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkAclEntryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkAclEntryRequest provides a mock function.
func (_m *Mockec2API) CreateNetworkAclEntryRequest(_parameter_0 *ec2.CreateNetworkAclEntryInput) (_result_0 *request.Request, _result_1 *ec2.CreateNetworkAclEntryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkAclEntryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateNetworkAclEntryOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkAclEntryInput) *ec2.CreateNetworkAclEntryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateNetworkAclEntryOutput)
		}
	}

	return r0, r1
}

// CreateNetworkAclEntryWithContext provides a mock function.
func (_m *Mockec2API) CreateNetworkAclEntryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateNetworkAclEntryInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateNetworkAclEntryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateNetworkAclEntryInput, ...request.Option) *ec2.CreateNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateNetworkAclEntryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkAclRequest provides a mock function.
func (_m *Mockec2API) CreateNetworkAclRequest(_parameter_0 *ec2.CreateNetworkAclInput) (_result_0 *request.Request, _result_1 *ec2.CreateNetworkAclOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkAclInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateNetworkAclOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkAclInput) *ec2.CreateNetworkAclOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateNetworkAclOutput)
		}
	}

	return r0, r1
}

// CreateNetworkAclWithContext provides a mock function.
func (_m *Mockec2API) CreateNetworkAclWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateNetworkAclInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateNetworkAclOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateNetworkAclOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateNetworkAclInput, ...request.Option) *ec2.CreateNetworkAclOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkAclOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateNetworkAclInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkInterface provides a mock function.
func (_m *Mockec2API) CreateNetworkInterface(_parameter_0 *ec2.CreateNetworkInterfaceInput) (_result_0 *ec2.CreateNetworkInterfaceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkInterfaceInput) *ec2.CreateNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkInterfaceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkInterfacePermission provides a mock function.
func (_m *Mockec2API) CreateNetworkInterfacePermission(_parameter_0 *ec2.CreateNetworkInterfacePermissionInput) (_result_0 *ec2.CreateNetworkInterfacePermissionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkInterfacePermissionInput) *ec2.CreateNetworkInterfacePermissionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkInterfacePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkInterfacePermissionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkInterfacePermissionRequest provides a mock function.
func (_m *Mockec2API) CreateNetworkInterfacePermissionRequest(_parameter_0 *ec2.CreateNetworkInterfacePermissionInput) (_result_0 *request.Request, _result_1 *ec2.CreateNetworkInterfacePermissionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkInterfacePermissionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkInterfacePermissionInput) *ec2.CreateNetworkInterfacePermissionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateNetworkInterfacePermissionOutput)
		}
	}

	return r0, r1
}

// CreateNetworkInterfacePermissionWithContext provides a mock function.
func (_m *Mockec2API) CreateNetworkInterfacePermissionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateNetworkInterfacePermissionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateNetworkInterfacePermissionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateNetworkInterfacePermissionInput, ...request.Option) *ec2.CreateNetworkInterfacePermissionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkInterfacePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateNetworkInterfacePermissionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkInterfaceRequest provides a mock function.
func (_m *Mockec2API) CreateNetworkInterfaceRequest(_parameter_0 *ec2.CreateNetworkInterfaceInput) (_result_0 *request.Request, _result_1 *ec2.CreateNetworkInterfaceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateNetworkInterfaceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateNetworkInterfaceOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateNetworkInterfaceInput) *ec2.CreateNetworkInterfaceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateNetworkInterfaceOutput)
		}
	}

	return r0, r1
}

// CreateNetworkInterfaceWithContext provides a mock function.
func (_m *Mockec2API) CreateNetworkInterfaceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateNetworkInterfaceInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateNetworkInterfaceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateNetworkInterfaceInput, ...request.Option) *ec2.CreateNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateNetworkInterfaceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlacementGroup provides a mock function.
func (_m *Mockec2API) CreatePlacementGroup(_parameter_0 *ec2.CreatePlacementGroupInput) (_result_0 *ec2.CreatePlacementGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreatePlacementGroupOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreatePlacementGroupInput) *ec2.CreatePlacementGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreatePlacementGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreatePlacementGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlacementGroupRequest provides a mock function.
func (_m *Mockec2API) CreatePlacementGroupRequest(_parameter_0 *ec2.CreatePlacementGroupInput) (_result_0 *request.Request, _result_1 *ec2.CreatePlacementGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreatePlacementGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreatePlacementGroupOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreatePlacementGroupInput) *ec2.CreatePlacementGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreatePlacementGroupOutput)
		}
	}

	return r0, r1
}

// CreatePlacementGroupWithContext provides a mock function.
func (_m *Mockec2API) CreatePlacementGroupWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreatePlacementGroupInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreatePlacementGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreatePlacementGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreatePlacementGroupInput, ...request.Option) *ec2.CreatePlacementGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreatePlacementGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreatePlacementGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReservedInstancesListing provides a mock function.
func (_m *Mockec2API) CreateReservedInstancesListing(_parameter_0 *ec2.CreateReservedInstancesListingInput) (_result_0 *ec2.CreateReservedInstancesListingOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateReservedInstancesListingOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateReservedInstancesListingInput) *ec2.CreateReservedInstancesListingOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateReservedInstancesListingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateReservedInstancesListingInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReservedInstancesListingRequest provides a mock function.
func (_m *Mockec2API) CreateReservedInstancesListingRequest(_parameter_0 *ec2.CreateReservedInstancesListingInput) (_result_0 *request.Request, _result_1 *ec2.CreateReservedInstancesListingOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateReservedInstancesListingInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateReservedInstancesListingOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateReservedInstancesListingInput) *ec2.CreateReservedInstancesListingOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateReservedInstancesListingOutput)
		}
	}

	return r0, r1
}

// CreateReservedInstancesListingWithContext provides a mock function.
func (_m *Mockec2API) CreateReservedInstancesListingWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateReservedInstancesListingInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateReservedInstancesListingOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateReservedInstancesListingOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateReservedInstancesListingInput, ...request.Option) *ec2.CreateReservedInstancesListingOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateReservedInstancesListingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateReservedInstancesListingInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoute provides a mock function.
func (_m *Mockec2API) CreateRoute(_parameter_0 *ec2.CreateRouteInput) (_result_0 *ec2.CreateRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateRouteInput) *ec2.CreateRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteRequest provides a mock function.
func (_m *Mockec2API) CreateRouteRequest(_parameter_0 *ec2.CreateRouteInput) (_result_0 *request.Request, _result_1 *ec2.CreateRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateRouteInput) *ec2.CreateRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateRouteOutput)
		}
	}

	return r0, r1
}

// CreateRouteTable provides a mock function.
func (_m *Mockec2API) CreateRouteTable(_parameter_0 *ec2.CreateRouteTableInput) (_result_0 *ec2.CreateRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateRouteTableInput) *ec2.CreateRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteTableRequest provides a mock function.
func (_m *Mockec2API) CreateRouteTableRequest(_parameter_0 *ec2.CreateRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.CreateRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateRouteTableInput) *ec2.CreateRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateRouteTableOutput)
		}
	}

	return r0, r1
}

// CreateRouteTableWithContext provides a mock function.
func (_m *Mockec2API) CreateRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateRouteTableInput, ...request.Option) *ec2.CreateRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteWithContext provides a mock function.
func (_m *Mockec2API) CreateRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateRouteInput, ...request.Option) *ec2.CreateRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityGroup provides a mock function.
func (_m *Mockec2API) CreateSecurityGroup(_parameter_0 *ec2.CreateSecurityGroupInput) (_result_0 *ec2.CreateSecurityGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateSecurityGroupOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateSecurityGroupInput) *ec2.CreateSecurityGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSecurityGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateSecurityGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityGroupRequest provides a mock function.
func (_m *Mockec2API) CreateSecurityGroupRequest(_parameter_0 *ec2.CreateSecurityGroupInput) (_result_0 *request.Request, _result_1 *ec2.CreateSecurityGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateSecurityGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateSecurityGroupOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateSecurityGroupInput) *ec2.CreateSecurityGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateSecurityGroupOutput)
		}
	}

	return r0, r1
}

// CreateSecurityGroupWithContext provides a mock function.
func (_m *Mockec2API) CreateSecurityGroupWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateSecurityGroupInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateSecurityGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateSecurityGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateSecurityGroupInput, ...request.Option) *ec2.CreateSecurityGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSecurityGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateSecurityGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function.
func (_m *Mockec2API) CreateSnapshot(_parameter_0 *ec2.CreateSnapshotInput) (_result_0 *ec2.Snapshot, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.Snapshot
	if rf, ok := ret.Get(0).(func(*ec2.CreateSnapshotInput) *ec2.Snapshot); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateSnapshotInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotRequest provides a mock function.
func (_m *Mockec2API) CreateSnapshotRequest(_parameter_0 *ec2.CreateSnapshotInput) (_result_0 *request.Request, _result_1 *ec2.Snapshot) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateSnapshotInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.Snapshot
	if rf, ok := ret.Get(1).(func(*ec2.CreateSnapshotInput) *ec2.Snapshot); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.Snapshot)
		}
	}

	return r0, r1
}

// CreateSnapshotWithContext provides a mock function.
func (_m *Mockec2API) CreateSnapshotWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateSnapshotInput, _parameter_2 ...request.Option) (_result_0 *ec2.Snapshot, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateSnapshotInput, ...request.Option) *ec2.Snapshot); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshots provides a mock function.
func (_m *Mockec2API) CreateSnapshots(_parameter_0 *ec2.CreateSnapshotsInput) (_result_0 *ec2.CreateSnapshotsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateSnapshotsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateSnapshotsInput) *ec2.CreateSnapshotsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateSnapshotsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotsRequest provides a mock function.
func (_m *Mockec2API) CreateSnapshotsRequest(_parameter_0 *ec2.CreateSnapshotsInput) (_result_0 *request.Request, _result_1 *ec2.CreateSnapshotsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateSnapshotsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateSnapshotsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateSnapshotsInput) *ec2.CreateSnapshotsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateSnapshotsOutput)
		}
	}

	return r0, r1
}

// CreateSnapshotsWithContext provides a mock function.
func (_m *Mockec2API) CreateSnapshotsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateSnapshotsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateSnapshotsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateSnapshotsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateSnapshotsInput, ...request.Option) *ec2.CreateSnapshotsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateSnapshotsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpotDatafeedSubscription provides a mock function.
func (_m *Mockec2API) CreateSpotDatafeedSubscription(_parameter_0 *ec2.CreateSpotDatafeedSubscriptionInput) (_result_0 *ec2.CreateSpotDatafeedSubscriptionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateSpotDatafeedSubscriptionInput) *ec2.CreateSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateSpotDatafeedSubscriptionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpotDatafeedSubscriptionRequest provides a mock function.
func (_m *Mockec2API) CreateSpotDatafeedSubscriptionRequest(_parameter_0 *ec2.CreateSpotDatafeedSubscriptionInput) (_result_0 *request.Request, _result_1 *ec2.CreateSpotDatafeedSubscriptionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateSpotDatafeedSubscriptionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateSpotDatafeedSubscriptionInput) *ec2.CreateSpotDatafeedSubscriptionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateSpotDatafeedSubscriptionOutput)
		}
	}

	return r0, r1
}

// CreateSpotDatafeedSubscriptionWithContext provides a mock function.
func (_m *Mockec2API) CreateSpotDatafeedSubscriptionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateSpotDatafeedSubscriptionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateSpotDatafeedSubscriptionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateSpotDatafeedSubscriptionInput, ...request.Option) *ec2.CreateSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateSpotDatafeedSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubnet provides a mock function.
func (_m *Mockec2API) CreateSubnet(_parameter_0 *ec2.CreateSubnetInput) (_result_0 *ec2.CreateSubnetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateSubnetOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateSubnetInput) *ec2.CreateSubnetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateSubnetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubnetRequest provides a mock function.
func (_m *Mockec2API) CreateSubnetRequest(_parameter_0 *ec2.CreateSubnetInput) (_result_0 *request.Request, _result_1 *ec2.CreateSubnetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateSubnetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateSubnetOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateSubnetInput) *ec2.CreateSubnetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateSubnetOutput)
		}
	}

	return r0, r1
}

// CreateSubnetWithContext provides a mock function.
func (_m *Mockec2API) CreateSubnetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateSubnetInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateSubnetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateSubnetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateSubnetInput, ...request.Option) *ec2.CreateSubnetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateSubnetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function.
func (_m *Mockec2API) CreateTags(_parameter_0 *ec2.CreateTagsInput) (_result_0 *ec2.CreateTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTagsInput) *ec2.CreateTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagsRequest provides a mock function.
func (_m *Mockec2API) CreateTagsRequest(_parameter_0 *ec2.CreateTagsInput) (_result_0 *request.Request, _result_1 *ec2.CreateTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTagsOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTagsInput) *ec2.CreateTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTagsOutput)
		}
	}

	return r0, r1
}

// CreateTagsWithContext provides a mock function.
func (_m *Mockec2API) CreateTagsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTagsInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTagsInput, ...request.Option) *ec2.CreateTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorFilter provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilter(_parameter_0 *ec2.CreateTrafficMirrorFilterInput) (_result_0 *ec2.CreateTrafficMirrorFilterOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTrafficMirrorFilterOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorFilterInput) *ec2.CreateTrafficMirrorFilterOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorFilterInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorFilterRequest provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilterRequest(_parameter_0 *ec2.CreateTrafficMirrorFilterInput) (_result_0 *request.Request, _result_1 *ec2.CreateTrafficMirrorFilterOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorFilterInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTrafficMirrorFilterOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorFilterInput) *ec2.CreateTrafficMirrorFilterOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTrafficMirrorFilterOutput)
		}
	}

	return r0, r1
}

// CreateTrafficMirrorFilterRule provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilterRule(_parameter_0 *ec2.CreateTrafficMirrorFilterRuleInput) (_result_0 *ec2.CreateTrafficMirrorFilterRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorFilterRuleInput) *ec2.CreateTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorFilterRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorFilterRuleRequest provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilterRuleRequest(_parameter_0 *ec2.CreateTrafficMirrorFilterRuleInput) (_result_0 *request.Request, _result_1 *ec2.CreateTrafficMirrorFilterRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorFilterRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorFilterRuleInput) *ec2.CreateTrafficMirrorFilterRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTrafficMirrorFilterRuleOutput)
		}
	}

	return r0, r1
}

// CreateTrafficMirrorFilterRuleWithContext provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilterRuleWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTrafficMirrorFilterRuleInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTrafficMirrorFilterRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTrafficMirrorFilterRuleInput, ...request.Option) *ec2.CreateTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTrafficMirrorFilterRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorFilterWithContext provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorFilterWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTrafficMirrorFilterInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTrafficMirrorFilterOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTrafficMirrorFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTrafficMirrorFilterInput, ...request.Option) *ec2.CreateTrafficMirrorFilterOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTrafficMirrorFilterInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorSession provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorSession(_parameter_0 *ec2.CreateTrafficMirrorSessionInput) (_result_0 *ec2.CreateTrafficMirrorSessionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorSessionInput) *ec2.CreateTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorSessionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorSessionRequest provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorSessionRequest(_parameter_0 *ec2.CreateTrafficMirrorSessionInput) (_result_0 *request.Request, _result_1 *ec2.CreateTrafficMirrorSessionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorSessionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTrafficMirrorSessionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorSessionInput) *ec2.CreateTrafficMirrorSessionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTrafficMirrorSessionOutput)
		}
	}

	return r0, r1
}

// CreateTrafficMirrorSessionWithContext provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorSessionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTrafficMirrorSessionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTrafficMirrorSessionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTrafficMirrorSessionInput, ...request.Option) *ec2.CreateTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTrafficMirrorSessionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorTarget provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorTarget(_parameter_0 *ec2.CreateTrafficMirrorTargetInput) (_result_0 *ec2.CreateTrafficMirrorTargetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTrafficMirrorTargetOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorTargetInput) *ec2.CreateTrafficMirrorTargetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorTargetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficMirrorTargetRequest provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorTargetRequest(_parameter_0 *ec2.CreateTrafficMirrorTargetInput) (_result_0 *request.Request, _result_1 *ec2.CreateTrafficMirrorTargetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTrafficMirrorTargetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTrafficMirrorTargetOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTrafficMirrorTargetInput) *ec2.CreateTrafficMirrorTargetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTrafficMirrorTargetOutput)
		}
	}

	return r0, r1
}

// CreateTrafficMirrorTargetWithContext provides a mock function.
func (_m *Mockec2API) CreateTrafficMirrorTargetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTrafficMirrorTargetInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTrafficMirrorTargetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTrafficMirrorTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTrafficMirrorTargetInput, ...request.Option) *ec2.CreateTrafficMirrorTargetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTrafficMirrorTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTrafficMirrorTargetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGateway provides a mock function.
func (_m *Mockec2API) CreateTransitGateway(_parameter_0 *ec2.CreateTransitGatewayInput) (_result_0 *ec2.CreateTransitGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayInput) *ec2.CreateTransitGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayMulticastDomain provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayMulticastDomain(_parameter_0 *ec2.CreateTransitGatewayMulticastDomainInput) (_result_0 *ec2.CreateTransitGatewayMulticastDomainOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayMulticastDomainInput) *ec2.CreateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayMulticastDomainInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayMulticastDomainRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayMulticastDomainRequest(_parameter_0 *ec2.CreateTransitGatewayMulticastDomainInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayMulticastDomainOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayMulticastDomainInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayMulticastDomainInput) *ec2.CreateTransitGatewayMulticastDomainOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayMulticastDomainOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayMulticastDomainWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayMulticastDomainWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayMulticastDomainInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayMulticastDomainOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayMulticastDomainInput, ...request.Option) *ec2.CreateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayMulticastDomainInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayPeeringAttachment provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPeeringAttachment(_parameter_0 *ec2.CreateTransitGatewayPeeringAttachmentInput) (_result_0 *ec2.CreateTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayPeeringAttachmentInput) *ec2.CreateTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayPeeringAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayPeeringAttachmentRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPeeringAttachmentRequest(_parameter_0 *ec2.CreateTransitGatewayPeeringAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayPeeringAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayPeeringAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayPeeringAttachmentInput) *ec2.CreateTransitGatewayPeeringAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayPeeringAttachmentWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPeeringAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayPeeringAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayPeeringAttachmentInput, ...request.Option) *ec2.CreateTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayPeeringAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayPrefixListReference provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPrefixListReference(_parameter_0 *ec2.CreateTransitGatewayPrefixListReferenceInput) (_result_0 *ec2.CreateTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayPrefixListReferenceInput) *ec2.CreateTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayPrefixListReferenceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayPrefixListReferenceRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPrefixListReferenceRequest(_parameter_0 *ec2.CreateTransitGatewayPrefixListReferenceInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayPrefixListReferenceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayPrefixListReferenceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayPrefixListReferenceInput) *ec2.CreateTransitGatewayPrefixListReferenceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayPrefixListReferenceOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayPrefixListReferenceWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayPrefixListReferenceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayPrefixListReferenceInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayPrefixListReferenceInput, ...request.Option) *ec2.CreateTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayPrefixListReferenceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRequest(_parameter_0 *ec2.CreateTransitGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayInput) *ec2.CreateTransitGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayRoute provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRoute(_parameter_0 *ec2.CreateTransitGatewayRouteInput) (_result_0 *ec2.CreateTransitGatewayRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayRouteInput) *ec2.CreateTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayRouteRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRouteRequest(_parameter_0 *ec2.CreateTransitGatewayRouteInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayRouteInput) *ec2.CreateTransitGatewayRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayRouteOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayRouteTable provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRouteTable(_parameter_0 *ec2.CreateTransitGatewayRouteTableInput) (_result_0 *ec2.CreateTransitGatewayRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayRouteTableInput) *ec2.CreateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayRouteTableRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRouteTableRequest(_parameter_0 *ec2.CreateTransitGatewayRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayRouteTableInput) *ec2.CreateTransitGatewayRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayRouteTableOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayRouteTableWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayRouteTableInput, ...request.Option) *ec2.CreateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayRouteWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayRouteInput, ...request.Option) *ec2.CreateTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayVpcAttachment provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayVpcAttachment(_parameter_0 *ec2.CreateTransitGatewayVpcAttachmentInput) (_result_0 *ec2.CreateTransitGatewayVpcAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayVpcAttachmentInput) *ec2.CreateTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayVpcAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayVpcAttachmentRequest provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayVpcAttachmentRequest(_parameter_0 *ec2.CreateTransitGatewayVpcAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.CreateTransitGatewayVpcAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateTransitGatewayVpcAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateTransitGatewayVpcAttachmentInput) *ec2.CreateTransitGatewayVpcAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateTransitGatewayVpcAttachmentOutput)
		}
	}

	return r0, r1
}

// CreateTransitGatewayVpcAttachmentWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayVpcAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayVpcAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayVpcAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayVpcAttachmentInput, ...request.Option) *ec2.CreateTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayVpcAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateTransitGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateTransitGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateTransitGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateTransitGatewayInput, ...request.Option) *ec2.CreateTransitGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateTransitGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function.
func (_m *Mockec2API) CreateVolume(_parameter_0 *ec2.CreateVolumeInput) (_result_0 *ec2.Volume, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.Volume
	if rf, ok := ret.Get(0).(func(*ec2.CreateVolumeInput) *ec2.Volume); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeRequest provides a mock function.
func (_m *Mockec2API) CreateVolumeRequest(_parameter_0 *ec2.CreateVolumeInput) (_result_0 *request.Request, _result_1 *ec2.Volume) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.Volume
	if rf, ok := ret.Get(1).(func(*ec2.CreateVolumeInput) *ec2.Volume); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.Volume)
		}
	}

	return r0, r1
}

// CreateVolumeWithContext provides a mock function.
func (_m *Mockec2API) CreateVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.Volume, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.Volume
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVolumeInput, ...request.Option) *ec2.Volume); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpc provides a mock function.
func (_m *Mockec2API) CreateVpc(_parameter_0 *ec2.CreateVpcInput) (_result_0 *ec2.CreateVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcInput) *ec2.CreateVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpoint provides a mock function.
func (_m *Mockec2API) CreateVpcEndpoint(_parameter_0 *ec2.CreateVpcEndpointInput) (_result_0 *ec2.CreateVpcEndpointOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpcEndpointOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointInput) *ec2.CreateVpcEndpointOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpointConnectionNotification provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointConnectionNotification(_parameter_0 *ec2.CreateVpcEndpointConnectionNotificationInput) (_result_0 *ec2.CreateVpcEndpointConnectionNotificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointConnectionNotificationInput) *ec2.CreateVpcEndpointConnectionNotificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointConnectionNotificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointConnectionNotificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpointConnectionNotificationRequest provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointConnectionNotificationRequest(_parameter_0 *ec2.CreateVpcEndpointConnectionNotificationInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpcEndpointConnectionNotificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointConnectionNotificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointConnectionNotificationInput) *ec2.CreateVpcEndpointConnectionNotificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpcEndpointConnectionNotificationOutput)
		}
	}

	return r0, r1
}

// CreateVpcEndpointConnectionNotificationWithContext provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointConnectionNotificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpcEndpointConnectionNotificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpcEndpointConnectionNotificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpcEndpointConnectionNotificationInput, ...request.Option) *ec2.CreateVpcEndpointConnectionNotificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointConnectionNotificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpcEndpointConnectionNotificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpointRequest provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointRequest(_parameter_0 *ec2.CreateVpcEndpointInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpcEndpointOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpcEndpointOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointInput) *ec2.CreateVpcEndpointOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpcEndpointOutput)
		}
	}

	return r0, r1
}

// CreateVpcEndpointServiceConfiguration provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointServiceConfiguration(_parameter_0 *ec2.CreateVpcEndpointServiceConfigurationInput) (_result_0 *ec2.CreateVpcEndpointServiceConfigurationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointServiceConfigurationInput) *ec2.CreateVpcEndpointServiceConfigurationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointServiceConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointServiceConfigurationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpointServiceConfigurationRequest provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointServiceConfigurationRequest(_parameter_0 *ec2.CreateVpcEndpointServiceConfigurationInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpcEndpointServiceConfigurationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcEndpointServiceConfigurationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcEndpointServiceConfigurationInput) *ec2.CreateVpcEndpointServiceConfigurationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpcEndpointServiceConfigurationOutput)
		}
	}

	return r0, r1
}

// CreateVpcEndpointServiceConfigurationWithContext provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointServiceConfigurationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpcEndpointServiceConfigurationInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpcEndpointServiceConfigurationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...request.Option) *ec2.CreateVpcEndpointServiceConfigurationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointServiceConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpointWithContext provides a mock function.
func (_m *Mockec2API) CreateVpcEndpointWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpcEndpointInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpcEndpointOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpcEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpcEndpointInput, ...request.Option) *ec2.CreateVpcEndpointOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpcEndpointInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcPeeringConnection provides a mock function.
func (_m *Mockec2API) CreateVpcPeeringConnection(_parameter_0 *ec2.CreateVpcPeeringConnectionInput) (_result_0 *ec2.CreateVpcPeeringConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcPeeringConnectionInput) *ec2.CreateVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcPeeringConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcPeeringConnectionRequest provides a mock function.
func (_m *Mockec2API) CreateVpcPeeringConnectionRequest(_parameter_0 *ec2.CreateVpcPeeringConnectionInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpcPeeringConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcPeeringConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpcPeeringConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcPeeringConnectionInput) *ec2.CreateVpcPeeringConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpcPeeringConnectionOutput)
		}
	}

	return r0, r1
}

// CreateVpcPeeringConnectionWithContext provides a mock function.
func (_m *Mockec2API) CreateVpcPeeringConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpcPeeringConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpcPeeringConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpcPeeringConnectionInput, ...request.Option) *ec2.CreateVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpcPeeringConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcRequest provides a mock function.
func (_m *Mockec2API) CreateVpcRequest(_parameter_0 *ec2.CreateVpcInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpcInput) *ec2.CreateVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpcOutput)
		}
	}

	return r0, r1
}

// CreateVpcWithContext provides a mock function.
func (_m *Mockec2API) CreateVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpcInput, ...request.Option) *ec2.CreateVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnConnection provides a mock function.
func (_m *Mockec2API) CreateVpnConnection(_parameter_0 *ec2.CreateVpnConnectionInput) (_result_0 *ec2.CreateVpnConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnConnectionInput) *ec2.CreateVpnConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnConnectionRequest provides a mock function.
func (_m *Mockec2API) CreateVpnConnectionRequest(_parameter_0 *ec2.CreateVpnConnectionInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpnConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpnConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnConnectionInput) *ec2.CreateVpnConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpnConnectionOutput)
		}
	}

	return r0, r1
}

// CreateVpnConnectionRoute provides a mock function.
func (_m *Mockec2API) CreateVpnConnectionRoute(_parameter_0 *ec2.CreateVpnConnectionRouteInput) (_result_0 *ec2.CreateVpnConnectionRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpnConnectionRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnConnectionRouteInput) *ec2.CreateVpnConnectionRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnConnectionRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnConnectionRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnConnectionRouteRequest provides a mock function.
func (_m *Mockec2API) CreateVpnConnectionRouteRequest(_parameter_0 *ec2.CreateVpnConnectionRouteInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpnConnectionRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnConnectionRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpnConnectionRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnConnectionRouteInput) *ec2.CreateVpnConnectionRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpnConnectionRouteOutput)
		}
	}

	return r0, r1
}

// CreateVpnConnectionRouteWithContext provides a mock function.
func (_m *Mockec2API) CreateVpnConnectionRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpnConnectionRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpnConnectionRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpnConnectionRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpnConnectionRouteInput, ...request.Option) *ec2.CreateVpnConnectionRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnConnectionRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpnConnectionRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnConnectionWithContext provides a mock function.
func (_m *Mockec2API) CreateVpnConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpnConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpnConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpnConnectionInput, ...request.Option) *ec2.CreateVpnConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpnConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnGateway provides a mock function.
func (_m *Mockec2API) CreateVpnGateway(_parameter_0 *ec2.CreateVpnGatewayInput) (_result_0 *ec2.CreateVpnGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.CreateVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnGatewayInput) *ec2.CreateVpnGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpnGatewayRequest provides a mock function.
func (_m *Mockec2API) CreateVpnGatewayRequest(_parameter_0 *ec2.CreateVpnGatewayInput) (_result_0 *request.Request, _result_1 *ec2.CreateVpnGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.CreateVpnGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.CreateVpnGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.CreateVpnGatewayInput) *ec2.CreateVpnGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.CreateVpnGatewayOutput)
		}
	}

	return r0, r1
}

// CreateVpnGatewayWithContext provides a mock function.
func (_m *Mockec2API) CreateVpnGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.CreateVpnGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.CreateVpnGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.CreateVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.CreateVpnGatewayInput, ...request.Option) *ec2.CreateVpnGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.CreateVpnGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCarrierGateway provides a mock function.
func (_m *Mockec2API) DeleteCarrierGateway(_parameter_0 *ec2.DeleteCarrierGatewayInput) (_result_0 *ec2.DeleteCarrierGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteCarrierGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteCarrierGatewayInput) *ec2.DeleteCarrierGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteCarrierGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteCarrierGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCarrierGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteCarrierGatewayRequest(_parameter_0 *ec2.DeleteCarrierGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteCarrierGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteCarrierGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteCarrierGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteCarrierGatewayInput) *ec2.DeleteCarrierGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteCarrierGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteCarrierGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteCarrierGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteCarrierGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteCarrierGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteCarrierGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteCarrierGatewayInput, ...request.Option) *ec2.DeleteCarrierGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteCarrierGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteCarrierGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientVpnEndpoint provides a mock function.
func (_m *Mockec2API) DeleteClientVpnEndpoint(_parameter_0 *ec2.DeleteClientVpnEndpointInput) (_result_0 *ec2.DeleteClientVpnEndpointOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteClientVpnEndpointInput) *ec2.DeleteClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteClientVpnEndpointInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientVpnEndpointRequest provides a mock function.
func (_m *Mockec2API) DeleteClientVpnEndpointRequest(_parameter_0 *ec2.DeleteClientVpnEndpointInput) (_result_0 *request.Request, _result_1 *ec2.DeleteClientVpnEndpointOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteClientVpnEndpointInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteClientVpnEndpointOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteClientVpnEndpointInput) *ec2.DeleteClientVpnEndpointOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteClientVpnEndpointOutput)
		}
	}

	return r0, r1
}

// DeleteClientVpnEndpointWithContext provides a mock function.
func (_m *Mockec2API) DeleteClientVpnEndpointWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteClientVpnEndpointInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteClientVpnEndpointOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteClientVpnEndpointInput, ...request.Option) *ec2.DeleteClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteClientVpnEndpointInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientVpnRoute provides a mock function.
func (_m *Mockec2API) DeleteClientVpnRoute(_parameter_0 *ec2.DeleteClientVpnRouteInput) (_result_0 *ec2.DeleteClientVpnRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteClientVpnRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteClientVpnRouteInput) *ec2.DeleteClientVpnRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteClientVpnRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteClientVpnRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientVpnRouteRequest provides a mock function.
func (_m *Mockec2API) DeleteClientVpnRouteRequest(_parameter_0 *ec2.DeleteClientVpnRouteInput) (_result_0 *request.Request, _result_1 *ec2.DeleteClientVpnRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteClientVpnRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteClientVpnRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteClientVpnRouteInput) *ec2.DeleteClientVpnRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteClientVpnRouteOutput)
		}
	}

	return r0, r1
}

// DeleteClientVpnRouteWithContext provides a mock function.
func (_m *Mockec2API) DeleteClientVpnRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteClientVpnRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteClientVpnRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteClientVpnRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteClientVpnRouteInput, ...request.Option) *ec2.DeleteClientVpnRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteClientVpnRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteClientVpnRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomerGateway provides a mock function.
func (_m *Mockec2API) DeleteCustomerGateway(_parameter_0 *ec2.DeleteCustomerGatewayInput) (_result_0 *ec2.DeleteCustomerGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteCustomerGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteCustomerGatewayInput) *ec2.DeleteCustomerGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteCustomerGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteCustomerGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomerGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteCustomerGatewayRequest(_parameter_0 *ec2.DeleteCustomerGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteCustomerGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteCustomerGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteCustomerGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteCustomerGatewayInput) *ec2.DeleteCustomerGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteCustomerGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteCustomerGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteCustomerGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteCustomerGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteCustomerGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteCustomerGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteCustomerGatewayInput, ...request.Option) *ec2.DeleteCustomerGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteCustomerGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteCustomerGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDhcpOptions provides a mock function.
func (_m *Mockec2API) DeleteDhcpOptions(_parameter_0 *ec2.DeleteDhcpOptionsInput) (_result_0 *ec2.DeleteDhcpOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteDhcpOptionsInput) *ec2.DeleteDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteDhcpOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDhcpOptionsRequest provides a mock function.
func (_m *Mockec2API) DeleteDhcpOptionsRequest(_parameter_0 *ec2.DeleteDhcpOptionsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteDhcpOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteDhcpOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteDhcpOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteDhcpOptionsInput) *ec2.DeleteDhcpOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteDhcpOptionsOutput)
		}
	}

	return r0, r1
}

// DeleteDhcpOptionsWithContext provides a mock function.
func (_m *Mockec2API) DeleteDhcpOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteDhcpOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteDhcpOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteDhcpOptionsInput, ...request.Option) *ec2.DeleteDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteDhcpOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEgressOnlyInternetGateway provides a mock function.
func (_m *Mockec2API) DeleteEgressOnlyInternetGateway(_parameter_0 *ec2.DeleteEgressOnlyInternetGatewayInput) (_result_0 *ec2.DeleteEgressOnlyInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteEgressOnlyInternetGatewayInput) *ec2.DeleteEgressOnlyInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteEgressOnlyInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteEgressOnlyInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEgressOnlyInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteEgressOnlyInternetGatewayRequest(_parameter_0 *ec2.DeleteEgressOnlyInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteEgressOnlyInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteEgressOnlyInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteEgressOnlyInternetGatewayInput) *ec2.DeleteEgressOnlyInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteEgressOnlyInternetGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteEgressOnlyInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteEgressOnlyInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteEgressOnlyInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteEgressOnlyInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteEgressOnlyInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteEgressOnlyInternetGatewayInput, ...request.Option) *ec2.DeleteEgressOnlyInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteEgressOnlyInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteEgressOnlyInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleets provides a mock function.
func (_m *Mockec2API) DeleteFleets(_parameter_0 *ec2.DeleteFleetsInput) (_result_0 *ec2.DeleteFleetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteFleetsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFleetsInput) *ec2.DeleteFleetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFleetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFleetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleetsRequest provides a mock function.
func (_m *Mockec2API) DeleteFleetsRequest(_parameter_0 *ec2.DeleteFleetsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteFleetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFleetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteFleetsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFleetsInput) *ec2.DeleteFleetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteFleetsOutput)
		}
	}

	return r0, r1
}

// DeleteFleetsWithContext provides a mock function.
func (_m *Mockec2API) DeleteFleetsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteFleetsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteFleetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteFleetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteFleetsInput, ...request.Option) *ec2.DeleteFleetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFleetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteFleetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFlowLogs provides a mock function.
func (_m *Mockec2API) DeleteFlowLogs(_parameter_0 *ec2.DeleteFlowLogsInput) (_result_0 *ec2.DeleteFlowLogsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteFlowLogsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFlowLogsInput) *ec2.DeleteFlowLogsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFlowLogsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFlowLogsRequest provides a mock function.
func (_m *Mockec2API) DeleteFlowLogsRequest(_parameter_0 *ec2.DeleteFlowLogsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteFlowLogsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFlowLogsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteFlowLogsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFlowLogsInput) *ec2.DeleteFlowLogsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteFlowLogsOutput)
		}
	}

	return r0, r1
}

// DeleteFlowLogsWithContext provides a mock function.
func (_m *Mockec2API) DeleteFlowLogsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteFlowLogsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteFlowLogsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteFlowLogsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteFlowLogsInput, ...request.Option) *ec2.DeleteFlowLogsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteFlowLogsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFpgaImage provides a mock function.
func (_m *Mockec2API) DeleteFpgaImage(_parameter_0 *ec2.DeleteFpgaImageInput) (_result_0 *ec2.DeleteFpgaImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteFpgaImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFpgaImageInput) *ec2.DeleteFpgaImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFpgaImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFpgaImageRequest provides a mock function.
func (_m *Mockec2API) DeleteFpgaImageRequest(_parameter_0 *ec2.DeleteFpgaImageInput) (_result_0 *request.Request, _result_1 *ec2.DeleteFpgaImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteFpgaImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteFpgaImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteFpgaImageInput) *ec2.DeleteFpgaImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteFpgaImageOutput)
		}
	}

	return r0, r1
}

// DeleteFpgaImageWithContext provides a mock function.
func (_m *Mockec2API) DeleteFpgaImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteFpgaImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteFpgaImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteFpgaImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteFpgaImageInput, ...request.Option) *ec2.DeleteFpgaImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteFpgaImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteFpgaImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInternetGateway provides a mock function.
func (_m *Mockec2API) DeleteInternetGateway(_parameter_0 *ec2.DeleteInternetGatewayInput) (_result_0 *ec2.DeleteInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteInternetGatewayInput) *ec2.DeleteInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteInternetGatewayRequest(_parameter_0 *ec2.DeleteInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteInternetGatewayInput) *ec2.DeleteInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteInternetGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteInternetGatewayInput, ...request.Option) *ec2.DeleteInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPair provides a mock function.
func (_m *Mockec2API) DeleteKeyPair(_parameter_0 *ec2.DeleteKeyPairInput) (_result_0 *ec2.DeleteKeyPairOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteKeyPairOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteKeyPairInput) *ec2.DeleteKeyPairOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteKeyPairInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPairRequest provides a mock function.
func (_m *Mockec2API) DeleteKeyPairRequest(_parameter_0 *ec2.DeleteKeyPairInput) (_result_0 *request.Request, _result_1 *ec2.DeleteKeyPairOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteKeyPairInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteKeyPairOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteKeyPairInput) *ec2.DeleteKeyPairOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteKeyPairOutput)
		}
	}

	return r0, r1
}

// DeleteKeyPairWithContext provides a mock function.
func (_m *Mockec2API) DeleteKeyPairWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteKeyPairInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteKeyPairOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteKeyPairInput, ...request.Option) *ec2.DeleteKeyPairOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchTemplate provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplate(_parameter_0 *ec2.DeleteLaunchTemplateInput) (_result_0 *ec2.DeleteLaunchTemplateOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLaunchTemplateInput) *ec2.DeleteLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLaunchTemplateInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchTemplateRequest provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplateRequest(_parameter_0 *ec2.DeleteLaunchTemplateInput) (_result_0 *request.Request, _result_1 *ec2.DeleteLaunchTemplateOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLaunchTemplateInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteLaunchTemplateOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLaunchTemplateInput) *ec2.DeleteLaunchTemplateOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteLaunchTemplateOutput)
		}
	}

	return r0, r1
}

// DeleteLaunchTemplateVersions provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplateVersions(_parameter_0 *ec2.DeleteLaunchTemplateVersionsInput) (_result_0 *ec2.DeleteLaunchTemplateVersionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLaunchTemplateVersionsInput) *ec2.DeleteLaunchTemplateVersionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLaunchTemplateVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLaunchTemplateVersionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchTemplateVersionsRequest provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplateVersionsRequest(_parameter_0 *ec2.DeleteLaunchTemplateVersionsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteLaunchTemplateVersionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLaunchTemplateVersionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLaunchTemplateVersionsInput) *ec2.DeleteLaunchTemplateVersionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteLaunchTemplateVersionsOutput)
		}
	}

	return r0, r1
}

// DeleteLaunchTemplateVersionsWithContext provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplateVersionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteLaunchTemplateVersionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteLaunchTemplateVersionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteLaunchTemplateVersionsInput, ...request.Option) *ec2.DeleteLaunchTemplateVersionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLaunchTemplateVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteLaunchTemplateVersionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchTemplateWithContext provides a mock function.
func (_m *Mockec2API) DeleteLaunchTemplateWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteLaunchTemplateInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteLaunchTemplateOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteLaunchTemplateInput, ...request.Option) *ec2.DeleteLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteLaunchTemplateInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocalGatewayRoute provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRoute(_parameter_0 *ec2.DeleteLocalGatewayRouteInput) (_result_0 *ec2.DeleteLocalGatewayRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteLocalGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLocalGatewayRouteInput) *ec2.DeleteLocalGatewayRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLocalGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLocalGatewayRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocalGatewayRouteRequest provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRouteRequest(_parameter_0 *ec2.DeleteLocalGatewayRouteInput) (_result_0 *request.Request, _result_1 *ec2.DeleteLocalGatewayRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLocalGatewayRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteLocalGatewayRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLocalGatewayRouteInput) *ec2.DeleteLocalGatewayRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteLocalGatewayRouteOutput)
		}
	}

	return r0, r1
}

// DeleteLocalGatewayRouteTableVpcAssociation provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRouteTableVpcAssociation(_parameter_0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (_result_0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocalGatewayRouteTableVpcAssociationRequest provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRouteTableVpcAssociationRequest(_parameter_0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) (_result_0 *request.Request, _result_1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteLocalGatewayRouteTableVpcAssociationInput) *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	return r0, r1
}

// DeleteLocalGatewayRouteTableVpcAssociationWithContext provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRouteTableVpcAssociationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, ...request.Option) *ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLocalGatewayRouteTableVpcAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteLocalGatewayRouteTableVpcAssociationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocalGatewayRouteWithContext provides a mock function.
func (_m *Mockec2API) DeleteLocalGatewayRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteLocalGatewayRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteLocalGatewayRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteLocalGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteLocalGatewayRouteInput, ...request.Option) *ec2.DeleteLocalGatewayRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteLocalGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteLocalGatewayRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManagedPrefixList provides a mock function.
func (_m *Mockec2API) DeleteManagedPrefixList(_parameter_0 *ec2.DeleteManagedPrefixListInput) (_result_0 *ec2.DeleteManagedPrefixListOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteManagedPrefixListInput) *ec2.DeleteManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteManagedPrefixListInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteManagedPrefixListRequest provides a mock function.
func (_m *Mockec2API) DeleteManagedPrefixListRequest(_parameter_0 *ec2.DeleteManagedPrefixListInput) (_result_0 *request.Request, _result_1 *ec2.DeleteManagedPrefixListOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteManagedPrefixListInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteManagedPrefixListOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteManagedPrefixListInput) *ec2.DeleteManagedPrefixListOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteManagedPrefixListOutput)
		}
	}

	return r0, r1
}

// DeleteManagedPrefixListWithContext provides a mock function.
func (_m *Mockec2API) DeleteManagedPrefixListWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteManagedPrefixListInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteManagedPrefixListOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteManagedPrefixListInput, ...request.Option) *ec2.DeleteManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteManagedPrefixListInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNatGateway provides a mock function.
func (_m *Mockec2API) DeleteNatGateway(_parameter_0 *ec2.DeleteNatGatewayInput) (_result_0 *ec2.DeleteNatGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteNatGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNatGatewayInput) *ec2.DeleteNatGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNatGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNatGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNatGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteNatGatewayRequest(_parameter_0 *ec2.DeleteNatGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteNatGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNatGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteNatGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNatGatewayInput) *ec2.DeleteNatGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteNatGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteNatGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteNatGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteNatGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteNatGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteNatGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteNatGatewayInput, ...request.Option) *ec2.DeleteNatGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNatGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteNatGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkAcl provides a mock function.
func (_m *Mockec2API) DeleteNetworkAcl(_parameter_0 *ec2.DeleteNetworkAclInput) (_result_0 *ec2.DeleteNetworkAclOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteNetworkAclOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkAclInput) *ec2.DeleteNetworkAclOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkAclOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkAclInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkAclEntry provides a mock function.
func (_m *Mockec2API) DeleteNetworkAclEntry(_parameter_0 *ec2.DeleteNetworkAclEntryInput) (_result_0 *ec2.DeleteNetworkAclEntryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkAclEntryInput) *ec2.DeleteNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkAclEntryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkAclEntryRequest provides a mock function.
func (_m *Mockec2API) DeleteNetworkAclEntryRequest(_parameter_0 *ec2.DeleteNetworkAclEntryInput) (_result_0 *request.Request, _result_1 *ec2.DeleteNetworkAclEntryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkAclEntryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteNetworkAclEntryOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkAclEntryInput) *ec2.DeleteNetworkAclEntryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteNetworkAclEntryOutput)
		}
	}

	return r0, r1
}

// DeleteNetworkAclEntryWithContext provides a mock function.
func (_m *Mockec2API) DeleteNetworkAclEntryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteNetworkAclEntryInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteNetworkAclEntryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteNetworkAclEntryInput, ...request.Option) *ec2.DeleteNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteNetworkAclEntryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkAclRequest provides a mock function.
func (_m *Mockec2API) DeleteNetworkAclRequest(_parameter_0 *ec2.DeleteNetworkAclInput) (_result_0 *request.Request, _result_1 *ec2.DeleteNetworkAclOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkAclInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteNetworkAclOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkAclInput) *ec2.DeleteNetworkAclOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteNetworkAclOutput)
		}
	}

	return r0, r1
}

// DeleteNetworkAclWithContext provides a mock function.
func (_m *Mockec2API) DeleteNetworkAclWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteNetworkAclInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteNetworkAclOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteNetworkAclOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteNetworkAclInput, ...request.Option) *ec2.DeleteNetworkAclOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkAclOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteNetworkAclInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterface provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterface(_parameter_0 *ec2.DeleteNetworkInterfaceInput) (_result_0 *ec2.DeleteNetworkInterfaceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkInterfaceInput) *ec2.DeleteNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkInterfaceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterfacePermission provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterfacePermission(_parameter_0 *ec2.DeleteNetworkInterfacePermissionInput) (_result_0 *ec2.DeleteNetworkInterfacePermissionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkInterfacePermissionInput) *ec2.DeleteNetworkInterfacePermissionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkInterfacePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkInterfacePermissionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterfacePermissionRequest provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterfacePermissionRequest(_parameter_0 *ec2.DeleteNetworkInterfacePermissionInput) (_result_0 *request.Request, _result_1 *ec2.DeleteNetworkInterfacePermissionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkInterfacePermissionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkInterfacePermissionInput) *ec2.DeleteNetworkInterfacePermissionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteNetworkInterfacePermissionOutput)
		}
	}

	return r0, r1
}

// DeleteNetworkInterfacePermissionWithContext provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterfacePermissionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteNetworkInterfacePermissionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteNetworkInterfacePermissionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteNetworkInterfacePermissionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteNetworkInterfacePermissionInput, ...request.Option) *ec2.DeleteNetworkInterfacePermissionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkInterfacePermissionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteNetworkInterfacePermissionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkInterfaceRequest provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterfaceRequest(_parameter_0 *ec2.DeleteNetworkInterfaceInput) (_result_0 *request.Request, _result_1 *ec2.DeleteNetworkInterfaceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteNetworkInterfaceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteNetworkInterfaceOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteNetworkInterfaceInput) *ec2.DeleteNetworkInterfaceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteNetworkInterfaceOutput)
		}
	}

	return r0, r1
}

// DeleteNetworkInterfaceWithContext provides a mock function.
func (_m *Mockec2API) DeleteNetworkInterfaceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteNetworkInterfaceInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteNetworkInterfaceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteNetworkInterfaceInput, ...request.Option) *ec2.DeleteNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteNetworkInterfaceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlacementGroup provides a mock function.
func (_m *Mockec2API) DeletePlacementGroup(_parameter_0 *ec2.DeletePlacementGroupInput) (_result_0 *ec2.DeletePlacementGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeletePlacementGroupOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeletePlacementGroupInput) *ec2.DeletePlacementGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeletePlacementGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeletePlacementGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlacementGroupRequest provides a mock function.
func (_m *Mockec2API) DeletePlacementGroupRequest(_parameter_0 *ec2.DeletePlacementGroupInput) (_result_0 *request.Request, _result_1 *ec2.DeletePlacementGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeletePlacementGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeletePlacementGroupOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeletePlacementGroupInput) *ec2.DeletePlacementGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeletePlacementGroupOutput)
		}
	}

	return r0, r1
}

// DeletePlacementGroupWithContext provides a mock function.
func (_m *Mockec2API) DeletePlacementGroupWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeletePlacementGroupInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeletePlacementGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeletePlacementGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeletePlacementGroupInput, ...request.Option) *ec2.DeletePlacementGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeletePlacementGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeletePlacementGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueuedReservedInstances provides a mock function.
func (_m *Mockec2API) DeleteQueuedReservedInstances(_parameter_0 *ec2.DeleteQueuedReservedInstancesInput) (_result_0 *ec2.DeleteQueuedReservedInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteQueuedReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteQueuedReservedInstancesInput) *ec2.DeleteQueuedReservedInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteQueuedReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteQueuedReservedInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueuedReservedInstancesRequest provides a mock function.
func (_m *Mockec2API) DeleteQueuedReservedInstancesRequest(_parameter_0 *ec2.DeleteQueuedReservedInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DeleteQueuedReservedInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteQueuedReservedInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteQueuedReservedInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteQueuedReservedInstancesInput) *ec2.DeleteQueuedReservedInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteQueuedReservedInstancesOutput)
		}
	}

	return r0, r1
}

// DeleteQueuedReservedInstancesWithContext provides a mock function.
func (_m *Mockec2API) DeleteQueuedReservedInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteQueuedReservedInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteQueuedReservedInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteQueuedReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteQueuedReservedInstancesInput, ...request.Option) *ec2.DeleteQueuedReservedInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteQueuedReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteQueuedReservedInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoute provides a mock function.
func (_m *Mockec2API) DeleteRoute(_parameter_0 *ec2.DeleteRouteInput) (_result_0 *ec2.DeleteRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteRouteInput) *ec2.DeleteRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteRequest provides a mock function.
func (_m *Mockec2API) DeleteRouteRequest(_parameter_0 *ec2.DeleteRouteInput) (_result_0 *request.Request, _result_1 *ec2.DeleteRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteRouteInput) *ec2.DeleteRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteRouteOutput)
		}
	}

	return r0, r1
}

// DeleteRouteTable provides a mock function.
func (_m *Mockec2API) DeleteRouteTable(_parameter_0 *ec2.DeleteRouteTableInput) (_result_0 *ec2.DeleteRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteRouteTableInput) *ec2.DeleteRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteTableRequest provides a mock function.
func (_m *Mockec2API) DeleteRouteTableRequest(_parameter_0 *ec2.DeleteRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.DeleteRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteRouteTableInput) *ec2.DeleteRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteRouteTableOutput)
		}
	}

	return r0, r1
}

// DeleteRouteTableWithContext provides a mock function.
func (_m *Mockec2API) DeleteRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteRouteTableInput, ...request.Option) *ec2.DeleteRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteWithContext provides a mock function.
func (_m *Mockec2API) DeleteRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteRouteInput, ...request.Option) *ec2.DeleteRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityGroup provides a mock function.
func (_m *Mockec2API) DeleteSecurityGroup(_parameter_0 *ec2.DeleteSecurityGroupInput) (_result_0 *ec2.DeleteSecurityGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteSecurityGroupOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSecurityGroupInput) *ec2.DeleteSecurityGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSecurityGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSecurityGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityGroupRequest provides a mock function.
func (_m *Mockec2API) DeleteSecurityGroupRequest(_parameter_0 *ec2.DeleteSecurityGroupInput) (_result_0 *request.Request, _result_1 *ec2.DeleteSecurityGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSecurityGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteSecurityGroupOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSecurityGroupInput) *ec2.DeleteSecurityGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteSecurityGroupOutput)
		}
	}

	return r0, r1
}

// DeleteSecurityGroupWithContext provides a mock function.
func (_m *Mockec2API) DeleteSecurityGroupWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteSecurityGroupInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteSecurityGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteSecurityGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSecurityGroupInput, ...request.Option) *ec2.DeleteSecurityGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSecurityGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteSecurityGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function.
func (_m *Mockec2API) DeleteSnapshot(_parameter_0 *ec2.DeleteSnapshotInput) (_result_0 *ec2.DeleteSnapshotOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteSnapshotOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSnapshotInput) *ec2.DeleteSnapshotOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSnapshotInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshotRequest provides a mock function.
func (_m *Mockec2API) DeleteSnapshotRequest(_parameter_0 *ec2.DeleteSnapshotInput) (_result_0 *request.Request, _result_1 *ec2.DeleteSnapshotOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSnapshotInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteSnapshotOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSnapshotInput) *ec2.DeleteSnapshotOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteSnapshotOutput)
		}
	}

	return r0, r1
}

// DeleteSnapshotWithContext provides a mock function.
func (_m *Mockec2API) DeleteSnapshotWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteSnapshotInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteSnapshotOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSnapshotInput, ...request.Option) *ec2.DeleteSnapshotOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpotDatafeedSubscription provides a mock function.
func (_m *Mockec2API) DeleteSpotDatafeedSubscription(_parameter_0 *ec2.DeleteSpotDatafeedSubscriptionInput) (_result_0 *ec2.DeleteSpotDatafeedSubscriptionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSpotDatafeedSubscriptionInput) *ec2.DeleteSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSpotDatafeedSubscriptionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpotDatafeedSubscriptionRequest provides a mock function.
func (_m *Mockec2API) DeleteSpotDatafeedSubscriptionRequest(_parameter_0 *ec2.DeleteSpotDatafeedSubscriptionInput) (_result_0 *request.Request, _result_1 *ec2.DeleteSpotDatafeedSubscriptionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSpotDatafeedSubscriptionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSpotDatafeedSubscriptionInput) *ec2.DeleteSpotDatafeedSubscriptionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteSpotDatafeedSubscriptionOutput)
		}
	}

	return r0, r1
}

// DeleteSpotDatafeedSubscriptionWithContext provides a mock function.
func (_m *Mockec2API) DeleteSpotDatafeedSubscriptionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteSpotDatafeedSubscriptionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteSpotDatafeedSubscriptionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSpotDatafeedSubscriptionInput, ...request.Option) *ec2.DeleteSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteSpotDatafeedSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubnet provides a mock function.
func (_m *Mockec2API) DeleteSubnet(_parameter_0 *ec2.DeleteSubnetInput) (_result_0 *ec2.DeleteSubnetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteSubnetOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSubnetInput) *ec2.DeleteSubnetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSubnetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubnetRequest provides a mock function.
func (_m *Mockec2API) DeleteSubnetRequest(_parameter_0 *ec2.DeleteSubnetInput) (_result_0 *request.Request, _result_1 *ec2.DeleteSubnetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteSubnetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteSubnetOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteSubnetInput) *ec2.DeleteSubnetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteSubnetOutput)
		}
	}

	return r0, r1
}

// DeleteSubnetWithContext provides a mock function.
func (_m *Mockec2API) DeleteSubnetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteSubnetInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteSubnetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteSubnetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteSubnetInput, ...request.Option) *ec2.DeleteSubnetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteSubnetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteSubnetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function.
func (_m *Mockec2API) DeleteTags(_parameter_0 *ec2.DeleteTagsInput) (_result_0 *ec2.DeleteTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTagsInput) *ec2.DeleteTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagsRequest provides a mock function.
func (_m *Mockec2API) DeleteTagsRequest(_parameter_0 *ec2.DeleteTagsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTagsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTagsInput) *ec2.DeleteTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTagsOutput)
		}
	}

	return r0, r1
}

// DeleteTagsWithContext provides a mock function.
func (_m *Mockec2API) DeleteTagsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTagsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTagsInput, ...request.Option) *ec2.DeleteTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorFilter provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilter(_parameter_0 *ec2.DeleteTrafficMirrorFilterInput) (_result_0 *ec2.DeleteTrafficMirrorFilterOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTrafficMirrorFilterOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorFilterInput) *ec2.DeleteTrafficMirrorFilterOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorFilterInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorFilterRequest provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilterRequest(_parameter_0 *ec2.DeleteTrafficMirrorFilterInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTrafficMirrorFilterOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorFilterInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTrafficMirrorFilterOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorFilterInput) *ec2.DeleteTrafficMirrorFilterOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTrafficMirrorFilterOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficMirrorFilterRule provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilterRule(_parameter_0 *ec2.DeleteTrafficMirrorFilterRuleInput) (_result_0 *ec2.DeleteTrafficMirrorFilterRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorFilterRuleInput) *ec2.DeleteTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorFilterRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorFilterRuleRequest provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilterRuleRequest(_parameter_0 *ec2.DeleteTrafficMirrorFilterRuleInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTrafficMirrorFilterRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorFilterRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorFilterRuleInput) *ec2.DeleteTrafficMirrorFilterRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTrafficMirrorFilterRuleOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficMirrorFilterRuleWithContext provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilterRuleWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTrafficMirrorFilterRuleInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTrafficMirrorFilterRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTrafficMirrorFilterRuleInput, ...request.Option) *ec2.DeleteTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTrafficMirrorFilterRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorFilterWithContext provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorFilterWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTrafficMirrorFilterInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTrafficMirrorFilterOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTrafficMirrorFilterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTrafficMirrorFilterInput, ...request.Option) *ec2.DeleteTrafficMirrorFilterOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorFilterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTrafficMirrorFilterInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorSession provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorSession(_parameter_0 *ec2.DeleteTrafficMirrorSessionInput) (_result_0 *ec2.DeleteTrafficMirrorSessionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorSessionInput) *ec2.DeleteTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorSessionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorSessionRequest provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorSessionRequest(_parameter_0 *ec2.DeleteTrafficMirrorSessionInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTrafficMirrorSessionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorSessionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTrafficMirrorSessionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorSessionInput) *ec2.DeleteTrafficMirrorSessionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTrafficMirrorSessionOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficMirrorSessionWithContext provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorSessionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTrafficMirrorSessionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTrafficMirrorSessionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTrafficMirrorSessionInput, ...request.Option) *ec2.DeleteTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTrafficMirrorSessionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorTarget provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorTarget(_parameter_0 *ec2.DeleteTrafficMirrorTargetInput) (_result_0 *ec2.DeleteTrafficMirrorTargetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTrafficMirrorTargetOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorTargetInput) *ec2.DeleteTrafficMirrorTargetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorTargetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficMirrorTargetRequest provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorTargetRequest(_parameter_0 *ec2.DeleteTrafficMirrorTargetInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTrafficMirrorTargetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTrafficMirrorTargetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTrafficMirrorTargetOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTrafficMirrorTargetInput) *ec2.DeleteTrafficMirrorTargetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTrafficMirrorTargetOutput)
		}
	}

	return r0, r1
}

// DeleteTrafficMirrorTargetWithContext provides a mock function.
func (_m *Mockec2API) DeleteTrafficMirrorTargetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTrafficMirrorTargetInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTrafficMirrorTargetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTrafficMirrorTargetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTrafficMirrorTargetInput, ...request.Option) *ec2.DeleteTrafficMirrorTargetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTrafficMirrorTargetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTrafficMirrorTargetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGateway provides a mock function.
func (_m *Mockec2API) DeleteTransitGateway(_parameter_0 *ec2.DeleteTransitGatewayInput) (_result_0 *ec2.DeleteTransitGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayInput) *ec2.DeleteTransitGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayMulticastDomain provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayMulticastDomain(_parameter_0 *ec2.DeleteTransitGatewayMulticastDomainInput) (_result_0 *ec2.DeleteTransitGatewayMulticastDomainOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayMulticastDomainInput) *ec2.DeleteTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayMulticastDomainInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayMulticastDomainRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayMulticastDomainRequest(_parameter_0 *ec2.DeleteTransitGatewayMulticastDomainInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayMulticastDomainOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayMulticastDomainInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayMulticastDomainInput) *ec2.DeleteTransitGatewayMulticastDomainOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayMulticastDomainOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayMulticastDomainWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayMulticastDomainWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayMulticastDomainInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayMulticastDomainOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayMulticastDomainInput, ...request.Option) *ec2.DeleteTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayMulticastDomainInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayPeeringAttachment provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPeeringAttachment(_parameter_0 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (_result_0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayPeeringAttachmentInput) *ec2.DeleteTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayPeeringAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayPeeringAttachmentRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPeeringAttachmentRequest(_parameter_0 *ec2.DeleteTransitGatewayPeeringAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayPeeringAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayPeeringAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayPeeringAttachmentInput) *ec2.DeleteTransitGatewayPeeringAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayPeeringAttachmentWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPeeringAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayPeeringAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayPeeringAttachmentInput, ...request.Option) *ec2.DeleteTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayPeeringAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayPrefixListReference provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPrefixListReference(_parameter_0 *ec2.DeleteTransitGatewayPrefixListReferenceInput) (_result_0 *ec2.DeleteTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayPrefixListReferenceInput) *ec2.DeleteTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayPrefixListReferenceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayPrefixListReferenceRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPrefixListReferenceRequest(_parameter_0 *ec2.DeleteTransitGatewayPrefixListReferenceInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayPrefixListReferenceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayPrefixListReferenceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayPrefixListReferenceInput) *ec2.DeleteTransitGatewayPrefixListReferenceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayPrefixListReferenceOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayPrefixListReferenceWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayPrefixListReferenceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayPrefixListReferenceInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayPrefixListReferenceInput, ...request.Option) *ec2.DeleteTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayPrefixListReferenceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRequest(_parameter_0 *ec2.DeleteTransitGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayInput) *ec2.DeleteTransitGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayRoute provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRoute(_parameter_0 *ec2.DeleteTransitGatewayRouteInput) (_result_0 *ec2.DeleteTransitGatewayRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayRouteInput) *ec2.DeleteTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayRouteRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRouteRequest(_parameter_0 *ec2.DeleteTransitGatewayRouteInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayRouteInput) *ec2.DeleteTransitGatewayRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayRouteOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayRouteTable provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRouteTable(_parameter_0 *ec2.DeleteTransitGatewayRouteTableInput) (_result_0 *ec2.DeleteTransitGatewayRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayRouteTableInput) *ec2.DeleteTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayRouteTableRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRouteTableRequest(_parameter_0 *ec2.DeleteTransitGatewayRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayRouteTableInput) *ec2.DeleteTransitGatewayRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayRouteTableOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayRouteTableWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayRouteTableInput, ...request.Option) *ec2.DeleteTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayRouteWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayRouteInput, ...request.Option) *ec2.DeleteTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayVpcAttachment provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayVpcAttachment(_parameter_0 *ec2.DeleteTransitGatewayVpcAttachmentInput) (_result_0 *ec2.DeleteTransitGatewayVpcAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayVpcAttachmentInput) *ec2.DeleteTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayVpcAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayVpcAttachmentRequest provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayVpcAttachmentRequest(_parameter_0 *ec2.DeleteTransitGatewayVpcAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.DeleteTransitGatewayVpcAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteTransitGatewayVpcAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteTransitGatewayVpcAttachmentInput) *ec2.DeleteTransitGatewayVpcAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
		}
	}

	return r0, r1
}

// DeleteTransitGatewayVpcAttachmentWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayVpcAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayVpcAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayVpcAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayVpcAttachmentInput, ...request.Option) *ec2.DeleteTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayVpcAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTransitGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteTransitGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteTransitGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteTransitGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteTransitGatewayInput, ...request.Option) *ec2.DeleteTransitGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteTransitGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function.
func (_m *Mockec2API) DeleteVolume(_parameter_0 *ec2.DeleteVolumeInput) (_result_0 *ec2.DeleteVolumeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVolumeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVolumeInput) *ec2.DeleteVolumeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolumeRequest provides a mock function.
func (_m *Mockec2API) DeleteVolumeRequest(_parameter_0 *ec2.DeleteVolumeInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVolumeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVolumeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVolumeInput) *ec2.DeleteVolumeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVolumeOutput)
		}
	}

	return r0, r1
}

// DeleteVolumeWithContext provides a mock function.
func (_m *Mockec2API) DeleteVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVolumeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVolumeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVolumeInput, ...request.Option) *ec2.DeleteVolumeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpc provides a mock function.
func (_m *Mockec2API) DeleteVpc(_parameter_0 *ec2.DeleteVpcInput) (_result_0 *ec2.DeleteVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcInput) *ec2.DeleteVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpointConnectionNotifications provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointConnectionNotifications(_parameter_0 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (_result_0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) *ec2.DeleteVpcEndpointConnectionNotificationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpointConnectionNotificationsRequest provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointConnectionNotificationsRequest(_parameter_0 *ec2.DeleteVpcEndpointConnectionNotificationsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointConnectionNotificationsInput) *ec2.DeleteVpcEndpointConnectionNotificationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
		}
	}

	return r0, r1
}

// DeleteVpcEndpointConnectionNotificationsWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointConnectionNotificationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpcEndpointConnectionNotificationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpcEndpointConnectionNotificationsInput, ...request.Option) *ec2.DeleteVpcEndpointConnectionNotificationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointConnectionNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpcEndpointConnectionNotificationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpointServiceConfigurations provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointServiceConfigurations(_parameter_0 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (_result_0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) *ec2.DeleteVpcEndpointServiceConfigurationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpointServiceConfigurationsRequest provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointServiceConfigurationsRequest(_parameter_0 *ec2.DeleteVpcEndpointServiceConfigurationsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointServiceConfigurationsInput) *ec2.DeleteVpcEndpointServiceConfigurationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
		}
	}

	return r0, r1
}

// DeleteVpcEndpointServiceConfigurationsWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointServiceConfigurationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpcEndpointServiceConfigurationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...request.Option) *ec2.DeleteVpcEndpointServiceConfigurationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointServiceConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpoints provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpoints(_parameter_0 *ec2.DeleteVpcEndpointsInput) (_result_0 *ec2.DeleteVpcEndpointsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpcEndpointsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointsInput) *ec2.DeleteVpcEndpointsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpointsRequest provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointsRequest(_parameter_0 *ec2.DeleteVpcEndpointsInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpcEndpointsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcEndpointsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpcEndpointsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcEndpointsInput) *ec2.DeleteVpcEndpointsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpcEndpointsOutput)
		}
	}

	return r0, r1
}

// DeleteVpcEndpointsWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpcEndpointsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpcEndpointsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpcEndpointsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpcEndpointsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpcEndpointsInput, ...request.Option) *ec2.DeleteVpcEndpointsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpcEndpointsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcPeeringConnection provides a mock function.
func (_m *Mockec2API) DeleteVpcPeeringConnection(_parameter_0 *ec2.DeleteVpcPeeringConnectionInput) (_result_0 *ec2.DeleteVpcPeeringConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcPeeringConnectionInput) *ec2.DeleteVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcPeeringConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcPeeringConnectionRequest provides a mock function.
func (_m *Mockec2API) DeleteVpcPeeringConnectionRequest(_parameter_0 *ec2.DeleteVpcPeeringConnectionInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpcPeeringConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcPeeringConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpcPeeringConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcPeeringConnectionInput) *ec2.DeleteVpcPeeringConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpcPeeringConnectionOutput)
		}
	}

	return r0, r1
}

// DeleteVpcPeeringConnectionWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpcPeeringConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpcPeeringConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpcPeeringConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpcPeeringConnectionInput, ...request.Option) *ec2.DeleteVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpcPeeringConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcRequest provides a mock function.
func (_m *Mockec2API) DeleteVpcRequest(_parameter_0 *ec2.DeleteVpcInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpcInput) *ec2.DeleteVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpcOutput)
		}
	}

	return r0, r1
}

// DeleteVpcWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpcInput, ...request.Option) *ec2.DeleteVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnConnection provides a mock function.
func (_m *Mockec2API) DeleteVpnConnection(_parameter_0 *ec2.DeleteVpnConnectionInput) (_result_0 *ec2.DeleteVpnConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnConnectionInput) *ec2.DeleteVpnConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnConnectionRequest provides a mock function.
func (_m *Mockec2API) DeleteVpnConnectionRequest(_parameter_0 *ec2.DeleteVpnConnectionInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpnConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpnConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnConnectionInput) *ec2.DeleteVpnConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpnConnectionOutput)
		}
	}

	return r0, r1
}

// DeleteVpnConnectionRoute provides a mock function.
func (_m *Mockec2API) DeleteVpnConnectionRoute(_parameter_0 *ec2.DeleteVpnConnectionRouteInput) (_result_0 *ec2.DeleteVpnConnectionRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpnConnectionRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnConnectionRouteInput) *ec2.DeleteVpnConnectionRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnConnectionRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnConnectionRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnConnectionRouteRequest provides a mock function.
func (_m *Mockec2API) DeleteVpnConnectionRouteRequest(_parameter_0 *ec2.DeleteVpnConnectionRouteInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpnConnectionRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnConnectionRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpnConnectionRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnConnectionRouteInput) *ec2.DeleteVpnConnectionRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpnConnectionRouteOutput)
		}
	}

	return r0, r1
}

// DeleteVpnConnectionRouteWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpnConnectionRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpnConnectionRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpnConnectionRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpnConnectionRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpnConnectionRouteInput, ...request.Option) *ec2.DeleteVpnConnectionRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnConnectionRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpnConnectionRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnConnectionWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpnConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpnConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpnConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpnConnectionInput, ...request.Option) *ec2.DeleteVpnConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpnConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnGateway provides a mock function.
func (_m *Mockec2API) DeleteVpnGateway(_parameter_0 *ec2.DeleteVpnGatewayInput) (_result_0 *ec2.DeleteVpnGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeleteVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnGatewayInput) *ec2.DeleteVpnGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpnGatewayRequest provides a mock function.
func (_m *Mockec2API) DeleteVpnGatewayRequest(_parameter_0 *ec2.DeleteVpnGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DeleteVpnGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeleteVpnGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeleteVpnGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeleteVpnGatewayInput) *ec2.DeleteVpnGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeleteVpnGatewayOutput)
		}
	}

	return r0, r1
}

// DeleteVpnGatewayWithContext provides a mock function.
func (_m *Mockec2API) DeleteVpnGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeleteVpnGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeleteVpnGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeleteVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeleteVpnGatewayInput, ...request.Option) *ec2.DeleteVpnGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeleteVpnGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeprovisionByoipCidr provides a mock function.
func (_m *Mockec2API) DeprovisionByoipCidr(_parameter_0 *ec2.DeprovisionByoipCidrInput) (_result_0 *ec2.DeprovisionByoipCidrOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeprovisionByoipCidrOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeprovisionByoipCidrInput) *ec2.DeprovisionByoipCidrOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeprovisionByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeprovisionByoipCidrInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeprovisionByoipCidrRequest provides a mock function.
func (_m *Mockec2API) DeprovisionByoipCidrRequest(_parameter_0 *ec2.DeprovisionByoipCidrInput) (_result_0 *request.Request, _result_1 *ec2.DeprovisionByoipCidrOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeprovisionByoipCidrInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeprovisionByoipCidrOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeprovisionByoipCidrInput) *ec2.DeprovisionByoipCidrOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeprovisionByoipCidrOutput)
		}
	}

	return r0, r1
}

// DeprovisionByoipCidrWithContext provides a mock function.
func (_m *Mockec2API) DeprovisionByoipCidrWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeprovisionByoipCidrInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeprovisionByoipCidrOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeprovisionByoipCidrOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeprovisionByoipCidrInput, ...request.Option) *ec2.DeprovisionByoipCidrOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeprovisionByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeprovisionByoipCidrInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterImage provides a mock function.
func (_m *Mockec2API) DeregisterImage(_parameter_0 *ec2.DeregisterImageInput) (_result_0 *ec2.DeregisterImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeregisterImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterImageInput) *ec2.DeregisterImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterImageRequest provides a mock function.
func (_m *Mockec2API) DeregisterImageRequest(_parameter_0 *ec2.DeregisterImageInput) (_result_0 *request.Request, _result_1 *ec2.DeregisterImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeregisterImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterImageInput) *ec2.DeregisterImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeregisterImageOutput)
		}
	}

	return r0, r1
}

// DeregisterImageWithContext provides a mock function.
func (_m *Mockec2API) DeregisterImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeregisterImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeregisterImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeregisterImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeregisterImageInput, ...request.Option) *ec2.DeregisterImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeregisterImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstanceEventNotificationAttributes provides a mock function.
func (_m *Mockec2API) DeregisterInstanceEventNotificationAttributes(_parameter_0 *ec2.DeregisterInstanceEventNotificationAttributesInput) (_result_0 *ec2.DeregisterInstanceEventNotificationAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeregisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterInstanceEventNotificationAttributesInput) *ec2.DeregisterInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterInstanceEventNotificationAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstanceEventNotificationAttributesRequest provides a mock function.
func (_m *Mockec2API) DeregisterInstanceEventNotificationAttributesRequest(_parameter_0 *ec2.DeregisterInstanceEventNotificationAttributesInput) (_result_0 *request.Request, _result_1 *ec2.DeregisterInstanceEventNotificationAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterInstanceEventNotificationAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeregisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterInstanceEventNotificationAttributesInput) *ec2.DeregisterInstanceEventNotificationAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeregisterInstanceEventNotificationAttributesOutput)
		}
	}

	return r0, r1
}

// DeregisterInstanceEventNotificationAttributesWithContext provides a mock function.
func (_m *Mockec2API) DeregisterInstanceEventNotificationAttributesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeregisterInstanceEventNotificationAttributesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeregisterInstanceEventNotificationAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeregisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeregisterInstanceEventNotificationAttributesInput, ...request.Option) *ec2.DeregisterInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeregisterInstanceEventNotificationAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupMembers provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupMembers(_parameter_0 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (_result_0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterTransitGatewayMulticastGroupMembersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupMembersRequest provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupMembersRequest(_parameter_0 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput) (_result_0 *request.Request, _result_1 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterTransitGatewayMulticastGroupMembersInput) *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupMembersWithContext provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupMembersWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, ...request.Option) *ec2.DeregisterTransitGatewayMulticastGroupMembersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeregisterTransitGatewayMulticastGroupMembersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupSources provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupSources(_parameter_0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (_result_0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupSourcesRequest provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupSourcesRequest(_parameter_0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) (_result_0 *request.Request, _result_1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DeregisterTransitGatewayMulticastGroupSourcesInput) *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	return r0, r1
}

// DeregisterTransitGatewayMulticastGroupSourcesWithContext provides a mock function.
func (_m *Mockec2API) DeregisterTransitGatewayMulticastGroupSourcesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, ...request.Option) *ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeregisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DeregisterTransitGatewayMulticastGroupSourcesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function.
func (_m *Mockec2API) DescribeAccountAttributes(_parameter_0 *ec2.DescribeAccountAttributesInput) (_result_0 *ec2.DescribeAccountAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeAccountAttributesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAccountAttributesInput) *ec2.DescribeAccountAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAccountAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAccountAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributesRequest provides a mock function.
func (_m *Mockec2API) DescribeAccountAttributesRequest(_parameter_0 *ec2.DescribeAccountAttributesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeAccountAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAccountAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeAccountAttributesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAccountAttributesInput) *ec2.DescribeAccountAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeAccountAttributesOutput)
		}
	}

	return r0, r1
}

// DescribeAccountAttributesWithContext provides a mock function.
func (_m *Mockec2API) DescribeAccountAttributesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeAccountAttributesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeAccountAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeAccountAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeAccountAttributesInput, ...request.Option) *ec2.DescribeAccountAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAccountAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeAccountAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAddresses provides a mock function.
func (_m *Mockec2API) DescribeAddresses(_parameter_0 *ec2.DescribeAddressesInput) (_result_0 *ec2.DescribeAddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeAddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAddressesInput) *ec2.DescribeAddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAddressesRequest provides a mock function.
func (_m *Mockec2API) DescribeAddressesRequest(_parameter_0 *ec2.DescribeAddressesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeAddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeAddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAddressesInput) *ec2.DescribeAddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeAddressesOutput)
		}
	}

	return r0, r1
}

// DescribeAddressesWithContext provides a mock function.
func (_m *Mockec2API) DescribeAddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeAddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeAddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeAddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeAddressesInput, ...request.Option) *ec2.DescribeAddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeAddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAggregateIdFormat provides a mock function.
func (_m *Mockec2API) DescribeAggregateIdFormat(_parameter_0 *ec2.DescribeAggregateIdFormatInput) (_result_0 *ec2.DescribeAggregateIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeAggregateIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAggregateIdFormatInput) *ec2.DescribeAggregateIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAggregateIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAggregateIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAggregateIdFormatRequest provides a mock function.
func (_m *Mockec2API) DescribeAggregateIdFormatRequest(_parameter_0 *ec2.DescribeAggregateIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.DescribeAggregateIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAggregateIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeAggregateIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAggregateIdFormatInput) *ec2.DescribeAggregateIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeAggregateIdFormatOutput)
		}
	}

	return r0, r1
}

// DescribeAggregateIdFormatWithContext provides a mock function.
func (_m *Mockec2API) DescribeAggregateIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeAggregateIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeAggregateIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeAggregateIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeAggregateIdFormatInput, ...request.Option) *ec2.DescribeAggregateIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAggregateIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeAggregateIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAvailabilityZones provides a mock function.
func (_m *Mockec2API) DescribeAvailabilityZones(_parameter_0 *ec2.DescribeAvailabilityZonesInput) (_result_0 *ec2.DescribeAvailabilityZonesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeAvailabilityZonesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAvailabilityZonesInput) *ec2.DescribeAvailabilityZonesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAvailabilityZonesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAvailabilityZonesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAvailabilityZonesRequest provides a mock function.
func (_m *Mockec2API) DescribeAvailabilityZonesRequest(_parameter_0 *ec2.DescribeAvailabilityZonesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeAvailabilityZonesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeAvailabilityZonesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeAvailabilityZonesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeAvailabilityZonesInput) *ec2.DescribeAvailabilityZonesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeAvailabilityZonesOutput)
		}
	}

	return r0, r1
}

// DescribeAvailabilityZonesWithContext provides a mock function.
func (_m *Mockec2API) DescribeAvailabilityZonesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeAvailabilityZonesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeAvailabilityZonesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeAvailabilityZonesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeAvailabilityZonesInput, ...request.Option) *ec2.DescribeAvailabilityZonesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeAvailabilityZonesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeAvailabilityZonesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBundleTasks provides a mock function.
func (_m *Mockec2API) DescribeBundleTasks(_parameter_0 *ec2.DescribeBundleTasksInput) (_result_0 *ec2.DescribeBundleTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeBundleTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeBundleTasksInput) *ec2.DescribeBundleTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeBundleTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeBundleTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBundleTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeBundleTasksRequest(_parameter_0 *ec2.DescribeBundleTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeBundleTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeBundleTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeBundleTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeBundleTasksInput) *ec2.DescribeBundleTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeBundleTasksOutput)
		}
	}

	return r0, r1
}

// DescribeBundleTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeBundleTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeBundleTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeBundleTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeBundleTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeBundleTasksInput, ...request.Option) *ec2.DescribeBundleTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeBundleTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeBundleTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeByoipCidrs provides a mock function.
func (_m *Mockec2API) DescribeByoipCidrs(_parameter_0 *ec2.DescribeByoipCidrsInput) (_result_0 *ec2.DescribeByoipCidrsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeByoipCidrsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeByoipCidrsInput) *ec2.DescribeByoipCidrsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeByoipCidrsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeByoipCidrsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeByoipCidrsPages provides a mock function.
func (_m *Mockec2API) DescribeByoipCidrsPages(_parameter_0 *ec2.DescribeByoipCidrsInput, _parameter_1 func(*ec2.DescribeByoipCidrsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeByoipCidrsInput, func(*ec2.DescribeByoipCidrsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeByoipCidrsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeByoipCidrsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeByoipCidrsInput, _parameter_2 func(*ec2.DescribeByoipCidrsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeByoipCidrsInput, func(*ec2.DescribeByoipCidrsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeByoipCidrsRequest provides a mock function.
func (_m *Mockec2API) DescribeByoipCidrsRequest(_parameter_0 *ec2.DescribeByoipCidrsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeByoipCidrsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeByoipCidrsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeByoipCidrsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeByoipCidrsInput) *ec2.DescribeByoipCidrsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeByoipCidrsOutput)
		}
	}

	return r0, r1
}

// DescribeByoipCidrsWithContext provides a mock function.
func (_m *Mockec2API) DescribeByoipCidrsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeByoipCidrsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeByoipCidrsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeByoipCidrsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeByoipCidrsInput, ...request.Option) *ec2.DescribeByoipCidrsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeByoipCidrsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeByoipCidrsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCapacityReservations provides a mock function.
func (_m *Mockec2API) DescribeCapacityReservations(_parameter_0 *ec2.DescribeCapacityReservationsInput) (_result_0 *ec2.DescribeCapacityReservationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeCapacityReservationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCapacityReservationsInput) *ec2.DescribeCapacityReservationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCapacityReservationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCapacityReservationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCapacityReservationsPages provides a mock function.
func (_m *Mockec2API) DescribeCapacityReservationsPages(_parameter_0 *ec2.DescribeCapacityReservationsInput, _parameter_1 func(*ec2.DescribeCapacityReservationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCapacityReservationsInput, func(*ec2.DescribeCapacityReservationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCapacityReservationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeCapacityReservationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCapacityReservationsInput, _parameter_2 func(*ec2.DescribeCapacityReservationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCapacityReservationsInput, func(*ec2.DescribeCapacityReservationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCapacityReservationsRequest provides a mock function.
func (_m *Mockec2API) DescribeCapacityReservationsRequest(_parameter_0 *ec2.DescribeCapacityReservationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeCapacityReservationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCapacityReservationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeCapacityReservationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCapacityReservationsInput) *ec2.DescribeCapacityReservationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeCapacityReservationsOutput)
		}
	}

	return r0, r1
}

// DescribeCapacityReservationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeCapacityReservationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCapacityReservationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeCapacityReservationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeCapacityReservationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCapacityReservationsInput, ...request.Option) *ec2.DescribeCapacityReservationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCapacityReservationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeCapacityReservationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCarrierGateways provides a mock function.
func (_m *Mockec2API) DescribeCarrierGateways(_parameter_0 *ec2.DescribeCarrierGatewaysInput) (_result_0 *ec2.DescribeCarrierGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeCarrierGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCarrierGatewaysInput) *ec2.DescribeCarrierGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCarrierGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCarrierGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCarrierGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeCarrierGatewaysPages(_parameter_0 *ec2.DescribeCarrierGatewaysInput, _parameter_1 func(*ec2.DescribeCarrierGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCarrierGatewaysInput, func(*ec2.DescribeCarrierGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCarrierGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeCarrierGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCarrierGatewaysInput, _parameter_2 func(*ec2.DescribeCarrierGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCarrierGatewaysInput, func(*ec2.DescribeCarrierGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCarrierGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeCarrierGatewaysRequest(_parameter_0 *ec2.DescribeCarrierGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeCarrierGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCarrierGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeCarrierGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCarrierGatewaysInput) *ec2.DescribeCarrierGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeCarrierGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeCarrierGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeCarrierGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCarrierGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeCarrierGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeCarrierGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCarrierGatewaysInput, ...request.Option) *ec2.DescribeCarrierGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCarrierGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeCarrierGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClassicLinkInstances provides a mock function.
func (_m *Mockec2API) DescribeClassicLinkInstances(_parameter_0 *ec2.DescribeClassicLinkInstancesInput) (_result_0 *ec2.DescribeClassicLinkInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClassicLinkInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClassicLinkInstancesInput) *ec2.DescribeClassicLinkInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClassicLinkInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClassicLinkInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClassicLinkInstancesPages provides a mock function.
func (_m *Mockec2API) DescribeClassicLinkInstancesPages(_parameter_0 *ec2.DescribeClassicLinkInstancesInput, _parameter_1 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClassicLinkInstancesInput, func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClassicLinkInstancesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClassicLinkInstancesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClassicLinkInstancesInput, _parameter_2 func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClassicLinkInstancesInput, func(*ec2.DescribeClassicLinkInstancesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClassicLinkInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeClassicLinkInstancesRequest(_parameter_0 *ec2.DescribeClassicLinkInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClassicLinkInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClassicLinkInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClassicLinkInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClassicLinkInstancesInput) *ec2.DescribeClassicLinkInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClassicLinkInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeClassicLinkInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClassicLinkInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClassicLinkInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClassicLinkInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClassicLinkInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClassicLinkInstancesInput, ...request.Option) *ec2.DescribeClassicLinkInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClassicLinkInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClassicLinkInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnAuthorizationRules provides a mock function.
func (_m *Mockec2API) DescribeClientVpnAuthorizationRules(_parameter_0 *ec2.DescribeClientVpnAuthorizationRulesInput) (_result_0 *ec2.DescribeClientVpnAuthorizationRulesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClientVpnAuthorizationRulesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnAuthorizationRulesInput) *ec2.DescribeClientVpnAuthorizationRulesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnAuthorizationRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnAuthorizationRulesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnAuthorizationRulesPages provides a mock function.
func (_m *Mockec2API) DescribeClientVpnAuthorizationRulesPages(_parameter_0 *ec2.DescribeClientVpnAuthorizationRulesInput, _parameter_1 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnAuthorizationRulesInput, func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnAuthorizationRulesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnAuthorizationRulesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnAuthorizationRulesInput, _parameter_2 func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, func(*ec2.DescribeClientVpnAuthorizationRulesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnAuthorizationRulesRequest provides a mock function.
func (_m *Mockec2API) DescribeClientVpnAuthorizationRulesRequest(_parameter_0 *ec2.DescribeClientVpnAuthorizationRulesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClientVpnAuthorizationRulesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnAuthorizationRulesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClientVpnAuthorizationRulesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnAuthorizationRulesInput) *ec2.DescribeClientVpnAuthorizationRulesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClientVpnAuthorizationRulesOutput)
		}
	}

	return r0, r1
}

// DescribeClientVpnAuthorizationRulesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnAuthorizationRulesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnAuthorizationRulesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClientVpnAuthorizationRulesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClientVpnAuthorizationRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, ...request.Option) *ec2.DescribeClientVpnAuthorizationRulesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnAuthorizationRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClientVpnAuthorizationRulesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnConnections provides a mock function.
func (_m *Mockec2API) DescribeClientVpnConnections(_parameter_0 *ec2.DescribeClientVpnConnectionsInput) (_result_0 *ec2.DescribeClientVpnConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClientVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnConnectionsInput) *ec2.DescribeClientVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnConnectionsPages provides a mock function.
func (_m *Mockec2API) DescribeClientVpnConnectionsPages(_parameter_0 *ec2.DescribeClientVpnConnectionsInput, _parameter_1 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnConnectionsInput, func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnConnectionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnConnectionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnConnectionsInput, _parameter_2 func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnConnectionsInput, func(*ec2.DescribeClientVpnConnectionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnConnectionsRequest provides a mock function.
func (_m *Mockec2API) DescribeClientVpnConnectionsRequest(_parameter_0 *ec2.DescribeClientVpnConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClientVpnConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClientVpnConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnConnectionsInput) *ec2.DescribeClientVpnConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClientVpnConnectionsOutput)
		}
	}

	return r0, r1
}

// DescribeClientVpnConnectionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClientVpnConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClientVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnConnectionsInput, ...request.Option) *ec2.DescribeClientVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClientVpnConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnEndpoints provides a mock function.
func (_m *Mockec2API) DescribeClientVpnEndpoints(_parameter_0 *ec2.DescribeClientVpnEndpointsInput) (_result_0 *ec2.DescribeClientVpnEndpointsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClientVpnEndpointsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnEndpointsInput) *ec2.DescribeClientVpnEndpointsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnEndpointsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnEndpointsPages provides a mock function.
func (_m *Mockec2API) DescribeClientVpnEndpointsPages(_parameter_0 *ec2.DescribeClientVpnEndpointsInput, _parameter_1 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnEndpointsInput, func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnEndpointsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnEndpointsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnEndpointsInput, _parameter_2 func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnEndpointsInput, func(*ec2.DescribeClientVpnEndpointsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnEndpointsRequest provides a mock function.
func (_m *Mockec2API) DescribeClientVpnEndpointsRequest(_parameter_0 *ec2.DescribeClientVpnEndpointsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClientVpnEndpointsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnEndpointsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClientVpnEndpointsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnEndpointsInput) *ec2.DescribeClientVpnEndpointsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClientVpnEndpointsOutput)
		}
	}

	return r0, r1
}

// DescribeClientVpnEndpointsWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnEndpointsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnEndpointsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClientVpnEndpointsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClientVpnEndpointsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnEndpointsInput, ...request.Option) *ec2.DescribeClientVpnEndpointsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClientVpnEndpointsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnRoutes provides a mock function.
func (_m *Mockec2API) DescribeClientVpnRoutes(_parameter_0 *ec2.DescribeClientVpnRoutesInput) (_result_0 *ec2.DescribeClientVpnRoutesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClientVpnRoutesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnRoutesInput) *ec2.DescribeClientVpnRoutesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnRoutesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnRoutesPages provides a mock function.
func (_m *Mockec2API) DescribeClientVpnRoutesPages(_parameter_0 *ec2.DescribeClientVpnRoutesInput, _parameter_1 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnRoutesInput, func(*ec2.DescribeClientVpnRoutesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnRoutesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnRoutesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnRoutesInput, _parameter_2 func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnRoutesInput, func(*ec2.DescribeClientVpnRoutesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnRoutesRequest provides a mock function.
func (_m *Mockec2API) DescribeClientVpnRoutesRequest(_parameter_0 *ec2.DescribeClientVpnRoutesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClientVpnRoutesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnRoutesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClientVpnRoutesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnRoutesInput) *ec2.DescribeClientVpnRoutesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClientVpnRoutesOutput)
		}
	}

	return r0, r1
}

// DescribeClientVpnRoutesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnRoutesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnRoutesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClientVpnRoutesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClientVpnRoutesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnRoutesInput, ...request.Option) *ec2.DescribeClientVpnRoutesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClientVpnRoutesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnTargetNetworks provides a mock function.
func (_m *Mockec2API) DescribeClientVpnTargetNetworks(_parameter_0 *ec2.DescribeClientVpnTargetNetworksInput) (_result_0 *ec2.DescribeClientVpnTargetNetworksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeClientVpnTargetNetworksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnTargetNetworksInput) *ec2.DescribeClientVpnTargetNetworksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnTargetNetworksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnTargetNetworksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientVpnTargetNetworksPages provides a mock function.
func (_m *Mockec2API) DescribeClientVpnTargetNetworksPages(_parameter_0 *ec2.DescribeClientVpnTargetNetworksInput, _parameter_1 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnTargetNetworksInput, func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnTargetNetworksPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnTargetNetworksPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnTargetNetworksInput, _parameter_2 func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnTargetNetworksInput, func(*ec2.DescribeClientVpnTargetNetworksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeClientVpnTargetNetworksRequest provides a mock function.
func (_m *Mockec2API) DescribeClientVpnTargetNetworksRequest(_parameter_0 *ec2.DescribeClientVpnTargetNetworksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeClientVpnTargetNetworksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeClientVpnTargetNetworksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeClientVpnTargetNetworksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeClientVpnTargetNetworksInput) *ec2.DescribeClientVpnTargetNetworksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeClientVpnTargetNetworksOutput)
		}
	}

	return r0, r1
}

// DescribeClientVpnTargetNetworksWithContext provides a mock function.
func (_m *Mockec2API) DescribeClientVpnTargetNetworksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeClientVpnTargetNetworksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeClientVpnTargetNetworksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeClientVpnTargetNetworksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeClientVpnTargetNetworksInput, ...request.Option) *ec2.DescribeClientVpnTargetNetworksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeClientVpnTargetNetworksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeClientVpnTargetNetworksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCoipPools provides a mock function.
func (_m *Mockec2API) DescribeCoipPools(_parameter_0 *ec2.DescribeCoipPoolsInput) (_result_0 *ec2.DescribeCoipPoolsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeCoipPoolsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCoipPoolsInput) *ec2.DescribeCoipPoolsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCoipPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCoipPoolsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCoipPoolsPages provides a mock function.
func (_m *Mockec2API) DescribeCoipPoolsPages(_parameter_0 *ec2.DescribeCoipPoolsInput, _parameter_1 func(*ec2.DescribeCoipPoolsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCoipPoolsInput, func(*ec2.DescribeCoipPoolsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCoipPoolsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeCoipPoolsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCoipPoolsInput, _parameter_2 func(*ec2.DescribeCoipPoolsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCoipPoolsInput, func(*ec2.DescribeCoipPoolsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCoipPoolsRequest provides a mock function.
func (_m *Mockec2API) DescribeCoipPoolsRequest(_parameter_0 *ec2.DescribeCoipPoolsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeCoipPoolsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCoipPoolsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeCoipPoolsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCoipPoolsInput) *ec2.DescribeCoipPoolsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeCoipPoolsOutput)
		}
	}

	return r0, r1
}

// DescribeCoipPoolsWithContext provides a mock function.
func (_m *Mockec2API) DescribeCoipPoolsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCoipPoolsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeCoipPoolsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeCoipPoolsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCoipPoolsInput, ...request.Option) *ec2.DescribeCoipPoolsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCoipPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeCoipPoolsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConversionTasks provides a mock function.
func (_m *Mockec2API) DescribeConversionTasks(_parameter_0 *ec2.DescribeConversionTasksInput) (_result_0 *ec2.DescribeConversionTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeConversionTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeConversionTasksInput) *ec2.DescribeConversionTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeConversionTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeConversionTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConversionTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeConversionTasksRequest(_parameter_0 *ec2.DescribeConversionTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeConversionTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeConversionTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeConversionTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeConversionTasksInput) *ec2.DescribeConversionTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeConversionTasksOutput)
		}
	}

	return r0, r1
}

// DescribeConversionTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeConversionTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeConversionTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeConversionTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeConversionTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeConversionTasksInput, ...request.Option) *ec2.DescribeConversionTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeConversionTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeConversionTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomerGateways provides a mock function.
func (_m *Mockec2API) DescribeCustomerGateways(_parameter_0 *ec2.DescribeCustomerGatewaysInput) (_result_0 *ec2.DescribeCustomerGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeCustomerGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCustomerGatewaysInput) *ec2.DescribeCustomerGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCustomerGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCustomerGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomerGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeCustomerGatewaysRequest(_parameter_0 *ec2.DescribeCustomerGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeCustomerGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCustomerGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeCustomerGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeCustomerGatewaysInput) *ec2.DescribeCustomerGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeCustomerGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeCustomerGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeCustomerGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCustomerGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeCustomerGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeCustomerGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCustomerGatewaysInput, ...request.Option) *ec2.DescribeCustomerGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeCustomerGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeCustomerGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDhcpOptions provides a mock function.
func (_m *Mockec2API) DescribeDhcpOptions(_parameter_0 *ec2.DescribeDhcpOptionsInput) (_result_0 *ec2.DescribeDhcpOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeDhcpOptionsInput) *ec2.DescribeDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeDhcpOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDhcpOptionsPages provides a mock function.
func (_m *Mockec2API) DescribeDhcpOptionsPages(_parameter_0 *ec2.DescribeDhcpOptionsInput, _parameter_1 func(*ec2.DescribeDhcpOptionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeDhcpOptionsInput, func(*ec2.DescribeDhcpOptionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDhcpOptionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeDhcpOptionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeDhcpOptionsInput, _parameter_2 func(*ec2.DescribeDhcpOptionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeDhcpOptionsInput, func(*ec2.DescribeDhcpOptionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeDhcpOptionsRequest provides a mock function.
func (_m *Mockec2API) DescribeDhcpOptionsRequest(_parameter_0 *ec2.DescribeDhcpOptionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeDhcpOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeDhcpOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeDhcpOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeDhcpOptionsInput) *ec2.DescribeDhcpOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeDhcpOptionsOutput)
		}
	}

	return r0, r1
}

// DescribeDhcpOptionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeDhcpOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeDhcpOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeDhcpOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeDhcpOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeDhcpOptionsInput, ...request.Option) *ec2.DescribeDhcpOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeDhcpOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeDhcpOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEgressOnlyInternetGateways provides a mock function.
func (_m *Mockec2API) DescribeEgressOnlyInternetGateways(_parameter_0 *ec2.DescribeEgressOnlyInternetGatewaysInput) (_result_0 *ec2.DescribeEgressOnlyInternetGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeEgressOnlyInternetGatewaysInput) *ec2.DescribeEgressOnlyInternetGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeEgressOnlyInternetGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEgressOnlyInternetGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeEgressOnlyInternetGatewaysPages(_parameter_0 *ec2.DescribeEgressOnlyInternetGatewaysInput, _parameter_1 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeEgressOnlyInternetGatewaysInput, func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeEgressOnlyInternetGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeEgressOnlyInternetGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeEgressOnlyInternetGatewaysInput, _parameter_2 func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, func(*ec2.DescribeEgressOnlyInternetGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeEgressOnlyInternetGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeEgressOnlyInternetGatewaysRequest(_parameter_0 *ec2.DescribeEgressOnlyInternetGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeEgressOnlyInternetGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeEgressOnlyInternetGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeEgressOnlyInternetGatewaysInput) *ec2.DescribeEgressOnlyInternetGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeEgressOnlyInternetGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeEgressOnlyInternetGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeEgressOnlyInternetGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeEgressOnlyInternetGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeEgressOnlyInternetGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, ...request.Option) *ec2.DescribeEgressOnlyInternetGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeEgressOnlyInternetGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeEgressOnlyInternetGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeElasticGpus provides a mock function.
func (_m *Mockec2API) DescribeElasticGpus(_parameter_0 *ec2.DescribeElasticGpusInput) (_result_0 *ec2.DescribeElasticGpusOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeElasticGpusOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeElasticGpusInput) *ec2.DescribeElasticGpusOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeElasticGpusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeElasticGpusInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeElasticGpusRequest provides a mock function.
func (_m *Mockec2API) DescribeElasticGpusRequest(_parameter_0 *ec2.DescribeElasticGpusInput) (_result_0 *request.Request, _result_1 *ec2.DescribeElasticGpusOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeElasticGpusInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeElasticGpusOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeElasticGpusInput) *ec2.DescribeElasticGpusOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeElasticGpusOutput)
		}
	}

	return r0, r1
}

// DescribeElasticGpusWithContext provides a mock function.
func (_m *Mockec2API) DescribeElasticGpusWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeElasticGpusInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeElasticGpusOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeElasticGpusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeElasticGpusInput, ...request.Option) *ec2.DescribeElasticGpusOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeElasticGpusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeElasticGpusInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportImageTasks provides a mock function.
func (_m *Mockec2API) DescribeExportImageTasks(_parameter_0 *ec2.DescribeExportImageTasksInput) (_result_0 *ec2.DescribeExportImageTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeExportImageTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportImageTasksInput) *ec2.DescribeExportImageTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeExportImageTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeExportImageTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportImageTasksPages provides a mock function.
func (_m *Mockec2API) DescribeExportImageTasksPages(_parameter_0 *ec2.DescribeExportImageTasksInput, _parameter_1 func(*ec2.DescribeExportImageTasksOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportImageTasksInput, func(*ec2.DescribeExportImageTasksOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeExportImageTasksPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeExportImageTasksPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeExportImageTasksInput, _parameter_2 func(*ec2.DescribeExportImageTasksOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeExportImageTasksInput, func(*ec2.DescribeExportImageTasksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeExportImageTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeExportImageTasksRequest(_parameter_0 *ec2.DescribeExportImageTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeExportImageTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportImageTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeExportImageTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeExportImageTasksInput) *ec2.DescribeExportImageTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeExportImageTasksOutput)
		}
	}

	return r0, r1
}

// DescribeExportImageTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeExportImageTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeExportImageTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeExportImageTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeExportImageTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeExportImageTasksInput, ...request.Option) *ec2.DescribeExportImageTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeExportImageTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeExportImageTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasks provides a mock function.
func (_m *Mockec2API) DescribeExportTasks(_parameter_0 *ec2.DescribeExportTasksInput) (_result_0 *ec2.DescribeExportTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeExportTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportTasksInput) *ec2.DescribeExportTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeExportTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeExportTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeExportTasksRequest(_parameter_0 *ec2.DescribeExportTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeExportTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeExportTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeExportTasksInput) *ec2.DescribeExportTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeExportTasksOutput)
		}
	}

	return r0, r1
}

// DescribeExportTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeExportTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeExportTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeExportTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeExportTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeExportTasksInput, ...request.Option) *ec2.DescribeExportTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeExportTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeExportTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFastSnapshotRestores provides a mock function.
func (_m *Mockec2API) DescribeFastSnapshotRestores(_parameter_0 *ec2.DescribeFastSnapshotRestoresInput) (_result_0 *ec2.DescribeFastSnapshotRestoresOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFastSnapshotRestoresInput) *ec2.DescribeFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFastSnapshotRestoresInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFastSnapshotRestoresPages provides a mock function.
func (_m *Mockec2API) DescribeFastSnapshotRestoresPages(_parameter_0 *ec2.DescribeFastSnapshotRestoresInput, _parameter_1 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFastSnapshotRestoresInput, func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFastSnapshotRestoresPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFastSnapshotRestoresPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFastSnapshotRestoresInput, _parameter_2 func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFastSnapshotRestoresInput, func(*ec2.DescribeFastSnapshotRestoresOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFastSnapshotRestoresRequest provides a mock function.
func (_m *Mockec2API) DescribeFastSnapshotRestoresRequest(_parameter_0 *ec2.DescribeFastSnapshotRestoresInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFastSnapshotRestoresOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFastSnapshotRestoresInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFastSnapshotRestoresOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFastSnapshotRestoresInput) *ec2.DescribeFastSnapshotRestoresOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFastSnapshotRestoresOutput)
		}
	}

	return r0, r1
}

// DescribeFastSnapshotRestoresWithContext provides a mock function.
func (_m *Mockec2API) DescribeFastSnapshotRestoresWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFastSnapshotRestoresInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFastSnapshotRestoresOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFastSnapshotRestoresInput, ...request.Option) *ec2.DescribeFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFastSnapshotRestoresInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetHistory provides a mock function.
func (_m *Mockec2API) DescribeFleetHistory(_parameter_0 *ec2.DescribeFleetHistoryInput) (_result_0 *ec2.DescribeFleetHistoryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFleetHistoryOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetHistoryInput) *ec2.DescribeFleetHistoryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetHistoryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetHistoryRequest provides a mock function.
func (_m *Mockec2API) DescribeFleetHistoryRequest(_parameter_0 *ec2.DescribeFleetHistoryInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFleetHistoryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetHistoryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFleetHistoryOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetHistoryInput) *ec2.DescribeFleetHistoryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFleetHistoryOutput)
		}
	}

	return r0, r1
}

// DescribeFleetHistoryWithContext provides a mock function.
func (_m *Mockec2API) DescribeFleetHistoryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFleetHistoryInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFleetHistoryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFleetHistoryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFleetHistoryInput, ...request.Option) *ec2.DescribeFleetHistoryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFleetHistoryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetInstances provides a mock function.
func (_m *Mockec2API) DescribeFleetInstances(_parameter_0 *ec2.DescribeFleetInstancesInput) (_result_0 *ec2.DescribeFleetInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFleetInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetInstancesInput) *ec2.DescribeFleetInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeFleetInstancesRequest(_parameter_0 *ec2.DescribeFleetInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFleetInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFleetInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetInstancesInput) *ec2.DescribeFleetInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFleetInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeFleetInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFleetInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFleetInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFleetInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFleetInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFleetInstancesInput, ...request.Option) *ec2.DescribeFleetInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFleetInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleets provides a mock function.
func (_m *Mockec2API) DescribeFleets(_parameter_0 *ec2.DescribeFleetsInput) (_result_0 *ec2.DescribeFleetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFleetsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetsInput) *ec2.DescribeFleetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetsPages provides a mock function.
func (_m *Mockec2API) DescribeFleetsPages(_parameter_0 *ec2.DescribeFleetsInput, _parameter_1 func(*ec2.DescribeFleetsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetsInput, func(*ec2.DescribeFleetsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFleetsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFleetsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFleetsInput, _parameter_2 func(*ec2.DescribeFleetsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFleetsInput, func(*ec2.DescribeFleetsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFleetsRequest provides a mock function.
func (_m *Mockec2API) DescribeFleetsRequest(_parameter_0 *ec2.DescribeFleetsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFleetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFleetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFleetsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFleetsInput) *ec2.DescribeFleetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFleetsOutput)
		}
	}

	return r0, r1
}

// DescribeFleetsWithContext provides a mock function.
func (_m *Mockec2API) DescribeFleetsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFleetsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFleetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFleetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFleetsInput, ...request.Option) *ec2.DescribeFleetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFleetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFleetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowLogs provides a mock function.
func (_m *Mockec2API) DescribeFlowLogs(_parameter_0 *ec2.DescribeFlowLogsInput) (_result_0 *ec2.DescribeFlowLogsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFlowLogsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFlowLogsInput) *ec2.DescribeFlowLogsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFlowLogsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowLogsPages provides a mock function.
func (_m *Mockec2API) DescribeFlowLogsPages(_parameter_0 *ec2.DescribeFlowLogsInput, _parameter_1 func(*ec2.DescribeFlowLogsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFlowLogsInput, func(*ec2.DescribeFlowLogsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFlowLogsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFlowLogsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFlowLogsInput, _parameter_2 func(*ec2.DescribeFlowLogsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFlowLogsInput, func(*ec2.DescribeFlowLogsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFlowLogsRequest provides a mock function.
func (_m *Mockec2API) DescribeFlowLogsRequest(_parameter_0 *ec2.DescribeFlowLogsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFlowLogsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFlowLogsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFlowLogsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFlowLogsInput) *ec2.DescribeFlowLogsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFlowLogsOutput)
		}
	}

	return r0, r1
}

// DescribeFlowLogsWithContext provides a mock function.
func (_m *Mockec2API) DescribeFlowLogsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFlowLogsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFlowLogsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFlowLogsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFlowLogsInput, ...request.Option) *ec2.DescribeFlowLogsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFlowLogsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFlowLogsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFpgaImageAttribute provides a mock function.
func (_m *Mockec2API) DescribeFpgaImageAttribute(_parameter_0 *ec2.DescribeFpgaImageAttributeInput) (_result_0 *ec2.DescribeFpgaImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFpgaImageAttributeInput) *ec2.DescribeFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFpgaImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFpgaImageAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeFpgaImageAttributeRequest(_parameter_0 *ec2.DescribeFpgaImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFpgaImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFpgaImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFpgaImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFpgaImageAttributeInput) *ec2.DescribeFpgaImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFpgaImageAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeFpgaImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeFpgaImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFpgaImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFpgaImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFpgaImageAttributeInput, ...request.Option) *ec2.DescribeFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFpgaImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFpgaImages provides a mock function.
func (_m *Mockec2API) DescribeFpgaImages(_parameter_0 *ec2.DescribeFpgaImagesInput) (_result_0 *ec2.DescribeFpgaImagesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeFpgaImagesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFpgaImagesInput) *ec2.DescribeFpgaImagesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFpgaImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFpgaImagesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFpgaImagesPages provides a mock function.
func (_m *Mockec2API) DescribeFpgaImagesPages(_parameter_0 *ec2.DescribeFpgaImagesInput, _parameter_1 func(*ec2.DescribeFpgaImagesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFpgaImagesInput, func(*ec2.DescribeFpgaImagesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFpgaImagesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFpgaImagesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFpgaImagesInput, _parameter_2 func(*ec2.DescribeFpgaImagesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFpgaImagesInput, func(*ec2.DescribeFpgaImagesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeFpgaImagesRequest provides a mock function.
func (_m *Mockec2API) DescribeFpgaImagesRequest(_parameter_0 *ec2.DescribeFpgaImagesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeFpgaImagesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeFpgaImagesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeFpgaImagesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeFpgaImagesInput) *ec2.DescribeFpgaImagesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeFpgaImagesOutput)
		}
	}

	return r0, r1
}

// DescribeFpgaImagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeFpgaImagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeFpgaImagesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeFpgaImagesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeFpgaImagesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeFpgaImagesInput, ...request.Option) *ec2.DescribeFpgaImagesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeFpgaImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeFpgaImagesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostReservationOfferings provides a mock function.
func (_m *Mockec2API) DescribeHostReservationOfferings(_parameter_0 *ec2.DescribeHostReservationOfferingsInput) (_result_0 *ec2.DescribeHostReservationOfferingsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeHostReservationOfferingsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationOfferingsInput) *ec2.DescribeHostReservationOfferingsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostReservationOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostReservationOfferingsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostReservationOfferingsPages provides a mock function.
func (_m *Mockec2API) DescribeHostReservationOfferingsPages(_parameter_0 *ec2.DescribeHostReservationOfferingsInput, _parameter_1 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationOfferingsInput, func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostReservationOfferingsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostReservationOfferingsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostReservationOfferingsInput, _parameter_2 func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostReservationOfferingsInput, func(*ec2.DescribeHostReservationOfferingsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostReservationOfferingsRequest provides a mock function.
func (_m *Mockec2API) DescribeHostReservationOfferingsRequest(_parameter_0 *ec2.DescribeHostReservationOfferingsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeHostReservationOfferingsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationOfferingsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeHostReservationOfferingsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostReservationOfferingsInput) *ec2.DescribeHostReservationOfferingsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeHostReservationOfferingsOutput)
		}
	}

	return r0, r1
}

// DescribeHostReservationOfferingsWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostReservationOfferingsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostReservationOfferingsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeHostReservationOfferingsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeHostReservationOfferingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostReservationOfferingsInput, ...request.Option) *ec2.DescribeHostReservationOfferingsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostReservationOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeHostReservationOfferingsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostReservations provides a mock function.
func (_m *Mockec2API) DescribeHostReservations(_parameter_0 *ec2.DescribeHostReservationsInput) (_result_0 *ec2.DescribeHostReservationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeHostReservationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationsInput) *ec2.DescribeHostReservationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostReservationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostReservationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostReservationsPages provides a mock function.
func (_m *Mockec2API) DescribeHostReservationsPages(_parameter_0 *ec2.DescribeHostReservationsInput, _parameter_1 func(*ec2.DescribeHostReservationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationsInput, func(*ec2.DescribeHostReservationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostReservationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostReservationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostReservationsInput, _parameter_2 func(*ec2.DescribeHostReservationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostReservationsInput, func(*ec2.DescribeHostReservationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostReservationsRequest provides a mock function.
func (_m *Mockec2API) DescribeHostReservationsRequest(_parameter_0 *ec2.DescribeHostReservationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeHostReservationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostReservationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeHostReservationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostReservationsInput) *ec2.DescribeHostReservationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeHostReservationsOutput)
		}
	}

	return r0, r1
}

// DescribeHostReservationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostReservationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostReservationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeHostReservationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeHostReservationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostReservationsInput, ...request.Option) *ec2.DescribeHostReservationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostReservationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeHostReservationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHosts provides a mock function.
func (_m *Mockec2API) DescribeHosts(_parameter_0 *ec2.DescribeHostsInput) (_result_0 *ec2.DescribeHostsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeHostsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostsInput) *ec2.DescribeHostsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHostsPages provides a mock function.
func (_m *Mockec2API) DescribeHostsPages(_parameter_0 *ec2.DescribeHostsInput, _parameter_1 func(*ec2.DescribeHostsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostsInput, func(*ec2.DescribeHostsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostsInput, _parameter_2 func(*ec2.DescribeHostsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostsInput, func(*ec2.DescribeHostsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeHostsRequest provides a mock function.
func (_m *Mockec2API) DescribeHostsRequest(_parameter_0 *ec2.DescribeHostsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeHostsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeHostsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeHostsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeHostsInput) *ec2.DescribeHostsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeHostsOutput)
		}
	}

	return r0, r1
}

// DescribeHostsWithContext provides a mock function.
func (_m *Mockec2API) DescribeHostsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeHostsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeHostsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeHostsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeHostsInput, ...request.Option) *ec2.DescribeHostsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeHostsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIamInstanceProfileAssociations provides a mock function.
func (_m *Mockec2API) DescribeIamInstanceProfileAssociations(_parameter_0 *ec2.DescribeIamInstanceProfileAssociationsInput) (_result_0 *ec2.DescribeIamInstanceProfileAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeIamInstanceProfileAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIamInstanceProfileAssociationsInput) *ec2.DescribeIamInstanceProfileAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIamInstanceProfileAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIamInstanceProfileAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIamInstanceProfileAssociationsPages provides a mock function.
func (_m *Mockec2API) DescribeIamInstanceProfileAssociationsPages(_parameter_0 *ec2.DescribeIamInstanceProfileAssociationsInput, _parameter_1 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIamInstanceProfileAssociationsInput, func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeIamInstanceProfileAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeIamInstanceProfileAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIamInstanceProfileAssociationsInput, _parameter_2 func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, func(*ec2.DescribeIamInstanceProfileAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeIamInstanceProfileAssociationsRequest provides a mock function.
func (_m *Mockec2API) DescribeIamInstanceProfileAssociationsRequest(_parameter_0 *ec2.DescribeIamInstanceProfileAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeIamInstanceProfileAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIamInstanceProfileAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeIamInstanceProfileAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIamInstanceProfileAssociationsInput) *ec2.DescribeIamInstanceProfileAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeIamInstanceProfileAssociationsOutput)
		}
	}

	return r0, r1
}

// DescribeIamInstanceProfileAssociationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeIamInstanceProfileAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIamInstanceProfileAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeIamInstanceProfileAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeIamInstanceProfileAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, ...request.Option) *ec2.DescribeIamInstanceProfileAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIamInstanceProfileAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeIamInstanceProfileAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdFormat provides a mock function.
func (_m *Mockec2API) DescribeIdFormat(_parameter_0 *ec2.DescribeIdFormatInput) (_result_0 *ec2.DescribeIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIdFormatInput) *ec2.DescribeIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdFormatRequest provides a mock function.
func (_m *Mockec2API) DescribeIdFormatRequest(_parameter_0 *ec2.DescribeIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.DescribeIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIdFormatInput) *ec2.DescribeIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeIdFormatOutput)
		}
	}

	return r0, r1
}

// DescribeIdFormatWithContext provides a mock function.
func (_m *Mockec2API) DescribeIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIdFormatInput, ...request.Option) *ec2.DescribeIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityIdFormat provides a mock function.
func (_m *Mockec2API) DescribeIdentityIdFormat(_parameter_0 *ec2.DescribeIdentityIdFormatInput) (_result_0 *ec2.DescribeIdentityIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeIdentityIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIdentityIdFormatInput) *ec2.DescribeIdentityIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIdentityIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIdentityIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityIdFormatRequest provides a mock function.
func (_m *Mockec2API) DescribeIdentityIdFormatRequest(_parameter_0 *ec2.DescribeIdentityIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.DescribeIdentityIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIdentityIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeIdentityIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIdentityIdFormatInput) *ec2.DescribeIdentityIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeIdentityIdFormatOutput)
		}
	}

	return r0, r1
}

// DescribeIdentityIdFormatWithContext provides a mock function.
func (_m *Mockec2API) DescribeIdentityIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIdentityIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeIdentityIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeIdentityIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIdentityIdFormatInput, ...request.Option) *ec2.DescribeIdentityIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIdentityIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeIdentityIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageAttribute provides a mock function.
func (_m *Mockec2API) DescribeImageAttribute(_parameter_0 *ec2.DescribeImageAttributeInput) (_result_0 *ec2.DescribeImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImageAttributeInput) *ec2.DescribeImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeImageAttributeRequest(_parameter_0 *ec2.DescribeImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImageAttributeInput) *ec2.DescribeImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeImageAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImageAttributeInput, ...request.Option) *ec2.DescribeImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImages provides a mock function.
func (_m *Mockec2API) DescribeImages(_parameter_0 *ec2.DescribeImagesInput) (_result_0 *ec2.DescribeImagesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeImagesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImagesInput) *ec2.DescribeImagesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImagesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImagesRequest provides a mock function.
func (_m *Mockec2API) DescribeImagesRequest(_parameter_0 *ec2.DescribeImagesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeImagesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImagesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeImagesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImagesInput) *ec2.DescribeImagesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeImagesOutput)
		}
	}

	return r0, r1
}

// DescribeImagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeImagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImagesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeImagesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeImagesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImagesInput, ...request.Option) *ec2.DescribeImagesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeImagesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImportImageTasks provides a mock function.
func (_m *Mockec2API) DescribeImportImageTasks(_parameter_0 *ec2.DescribeImportImageTasksInput) (_result_0 *ec2.DescribeImportImageTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeImportImageTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportImageTasksInput) *ec2.DescribeImportImageTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImportImageTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImportImageTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImportImageTasksPages provides a mock function.
func (_m *Mockec2API) DescribeImportImageTasksPages(_parameter_0 *ec2.DescribeImportImageTasksInput, _parameter_1 func(*ec2.DescribeImportImageTasksOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportImageTasksInput, func(*ec2.DescribeImportImageTasksOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeImportImageTasksPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeImportImageTasksPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImportImageTasksInput, _parameter_2 func(*ec2.DescribeImportImageTasksOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImportImageTasksInput, func(*ec2.DescribeImportImageTasksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeImportImageTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeImportImageTasksRequest(_parameter_0 *ec2.DescribeImportImageTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeImportImageTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportImageTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeImportImageTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImportImageTasksInput) *ec2.DescribeImportImageTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeImportImageTasksOutput)
		}
	}

	return r0, r1
}

// DescribeImportImageTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeImportImageTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImportImageTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeImportImageTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeImportImageTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImportImageTasksInput, ...request.Option) *ec2.DescribeImportImageTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImportImageTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeImportImageTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImportSnapshotTasks provides a mock function.
func (_m *Mockec2API) DescribeImportSnapshotTasks(_parameter_0 *ec2.DescribeImportSnapshotTasksInput) (_result_0 *ec2.DescribeImportSnapshotTasksOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeImportSnapshotTasksOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportSnapshotTasksInput) *ec2.DescribeImportSnapshotTasksOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImportSnapshotTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImportSnapshotTasksInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImportSnapshotTasksPages provides a mock function.
func (_m *Mockec2API) DescribeImportSnapshotTasksPages(_parameter_0 *ec2.DescribeImportSnapshotTasksInput, _parameter_1 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportSnapshotTasksInput, func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeImportSnapshotTasksPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeImportSnapshotTasksPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImportSnapshotTasksInput, _parameter_2 func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImportSnapshotTasksInput, func(*ec2.DescribeImportSnapshotTasksOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeImportSnapshotTasksRequest provides a mock function.
func (_m *Mockec2API) DescribeImportSnapshotTasksRequest(_parameter_0 *ec2.DescribeImportSnapshotTasksInput) (_result_0 *request.Request, _result_1 *ec2.DescribeImportSnapshotTasksOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImportSnapshotTasksInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeImportSnapshotTasksOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeImportSnapshotTasksInput) *ec2.DescribeImportSnapshotTasksOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeImportSnapshotTasksOutput)
		}
	}

	return r0, r1
}

// DescribeImportSnapshotTasksWithContext provides a mock function.
func (_m *Mockec2API) DescribeImportSnapshotTasksWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImportSnapshotTasksInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeImportSnapshotTasksOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeImportSnapshotTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImportSnapshotTasksInput, ...request.Option) *ec2.DescribeImportSnapshotTasksOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImportSnapshotTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeImportSnapshotTasksInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceAttribute provides a mock function.
func (_m *Mockec2API) DescribeInstanceAttribute(_parameter_0 *ec2.DescribeInstanceAttributeInput) (_result_0 *ec2.DescribeInstanceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceAttributeInput) *ec2.DescribeInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceAttributeRequest(_parameter_0 *ec2.DescribeInstanceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceAttributeInput) *ec2.DescribeInstanceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceAttributeInput, ...request.Option) *ec2.DescribeInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceCreditSpecifications provides a mock function.
func (_m *Mockec2API) DescribeInstanceCreditSpecifications(_parameter_0 *ec2.DescribeInstanceCreditSpecificationsInput) (_result_0 *ec2.DescribeInstanceCreditSpecificationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceCreditSpecificationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceCreditSpecificationsInput) *ec2.DescribeInstanceCreditSpecificationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceCreditSpecificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceCreditSpecificationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceCreditSpecificationsPages provides a mock function.
func (_m *Mockec2API) DescribeInstanceCreditSpecificationsPages(_parameter_0 *ec2.DescribeInstanceCreditSpecificationsInput, _parameter_1 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceCreditSpecificationsInput, func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceCreditSpecificationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceCreditSpecificationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceCreditSpecificationsInput, _parameter_2 func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceCreditSpecificationsInput, func(*ec2.DescribeInstanceCreditSpecificationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceCreditSpecificationsRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceCreditSpecificationsRequest(_parameter_0 *ec2.DescribeInstanceCreditSpecificationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceCreditSpecificationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceCreditSpecificationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceCreditSpecificationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceCreditSpecificationsInput) *ec2.DescribeInstanceCreditSpecificationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceCreditSpecificationsOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceCreditSpecificationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceCreditSpecificationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceCreditSpecificationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceCreditSpecificationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceCreditSpecificationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceCreditSpecificationsInput, ...request.Option) *ec2.DescribeInstanceCreditSpecificationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceCreditSpecificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceCreditSpecificationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceEventNotificationAttributes provides a mock function.
func (_m *Mockec2API) DescribeInstanceEventNotificationAttributes(_parameter_0 *ec2.DescribeInstanceEventNotificationAttributesInput) (_result_0 *ec2.DescribeInstanceEventNotificationAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceEventNotificationAttributesInput) *ec2.DescribeInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceEventNotificationAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceEventNotificationAttributesRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceEventNotificationAttributesRequest(_parameter_0 *ec2.DescribeInstanceEventNotificationAttributesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceEventNotificationAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceEventNotificationAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceEventNotificationAttributesInput) *ec2.DescribeInstanceEventNotificationAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceEventNotificationAttributesOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceEventNotificationAttributesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceEventNotificationAttributesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceEventNotificationAttributesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceEventNotificationAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceEventNotificationAttributesInput, ...request.Option) *ec2.DescribeInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceEventNotificationAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceStatus provides a mock function.
func (_m *Mockec2API) DescribeInstanceStatus(_parameter_0 *ec2.DescribeInstanceStatusInput) (_result_0 *ec2.DescribeInstanceStatusOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceStatusOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceStatusInput) *ec2.DescribeInstanceStatusOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceStatusInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceStatusPages provides a mock function.
func (_m *Mockec2API) DescribeInstanceStatusPages(_parameter_0 *ec2.DescribeInstanceStatusInput, _parameter_1 func(*ec2.DescribeInstanceStatusOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceStatusPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceStatusPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceStatusInput, _parameter_2 func(*ec2.DescribeInstanceStatusOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceStatusInput, func(*ec2.DescribeInstanceStatusOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceStatusRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceStatusRequest(_parameter_0 *ec2.DescribeInstanceStatusInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceStatusOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceStatusInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceStatusOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceStatusInput) *ec2.DescribeInstanceStatusOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceStatusOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceStatusWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceStatusWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceStatusInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceStatusOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceStatusInput, ...request.Option) *ec2.DescribeInstanceStatusOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceStatusInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceTypeOfferings provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypeOfferings(_parameter_0 *ec2.DescribeInstanceTypeOfferingsInput) (_result_0 *ec2.DescribeInstanceTypeOfferingsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceTypeOfferingsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypeOfferingsInput) *ec2.DescribeInstanceTypeOfferingsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceTypeOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceTypeOfferingsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceTypeOfferingsPages provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypeOfferingsPages(_parameter_0 *ec2.DescribeInstanceTypeOfferingsInput, _parameter_1 func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypeOfferingsInput, func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceTypeOfferingsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypeOfferingsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceTypeOfferingsInput, _parameter_2 func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceTypeOfferingsInput, func(*ec2.DescribeInstanceTypeOfferingsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceTypeOfferingsRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypeOfferingsRequest(_parameter_0 *ec2.DescribeInstanceTypeOfferingsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceTypeOfferingsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypeOfferingsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceTypeOfferingsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceTypeOfferingsInput) *ec2.DescribeInstanceTypeOfferingsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceTypeOfferingsOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceTypeOfferingsWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypeOfferingsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceTypeOfferingsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceTypeOfferingsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceTypeOfferingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceTypeOfferingsInput, ...request.Option) *ec2.DescribeInstanceTypeOfferingsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceTypeOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceTypeOfferingsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceTypes provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypes(_parameter_0 *ec2.DescribeInstanceTypesInput) (_result_0 *ec2.DescribeInstanceTypesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstanceTypesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypesInput) *ec2.DescribeInstanceTypesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceTypesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceTypesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceTypesPages provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypesPages(_parameter_0 *ec2.DescribeInstanceTypesInput, _parameter_1 func(*ec2.DescribeInstanceTypesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypesInput, func(*ec2.DescribeInstanceTypesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceTypesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceTypesInput, _parameter_2 func(*ec2.DescribeInstanceTypesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceTypesInput, func(*ec2.DescribeInstanceTypesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstanceTypesRequest provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypesRequest(_parameter_0 *ec2.DescribeInstanceTypesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstanceTypesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceTypesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstanceTypesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstanceTypesInput) *ec2.DescribeInstanceTypesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstanceTypesOutput)
		}
	}

	return r0, r1
}

// DescribeInstanceTypesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstanceTypesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceTypesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstanceTypesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstanceTypesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceTypesInput, ...request.Option) *ec2.DescribeInstanceTypesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstanceTypesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstanceTypesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstances provides a mock function.
func (_m *Mockec2API) DescribeInstances(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 *ec2.DescribeInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) *ec2.DescribeInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstancesPages provides a mock function.
func (_m *Mockec2API) DescribeInstancesPages(_parameter_0 *ec2.DescribeInstancesInput, _parameter_1 func(*ec2.DescribeInstancesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstancesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstancesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 func(*ec2.DescribeInstancesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, func(*ec2.DescribeInstancesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeInstancesRequest(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInstancesInput) *ec2.DescribeInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...request.Option) *ec2.DescribeInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInternetGateways provides a mock function.
func (_m *Mockec2API) DescribeInternetGateways(_parameter_0 *ec2.DescribeInternetGatewaysInput) (_result_0 *ec2.DescribeInternetGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeInternetGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInternetGatewaysInput) *ec2.DescribeInternetGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInternetGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInternetGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInternetGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeInternetGatewaysPages(_parameter_0 *ec2.DescribeInternetGatewaysInput, _parameter_1 func(*ec2.DescribeInternetGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInternetGatewaysInput, func(*ec2.DescribeInternetGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInternetGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeInternetGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInternetGatewaysInput, _parameter_2 func(*ec2.DescribeInternetGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInternetGatewaysInput, func(*ec2.DescribeInternetGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeInternetGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeInternetGatewaysRequest(_parameter_0 *ec2.DescribeInternetGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeInternetGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInternetGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeInternetGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeInternetGatewaysInput) *ec2.DescribeInternetGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeInternetGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeInternetGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeInternetGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInternetGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeInternetGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeInternetGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInternetGatewaysInput, ...request.Option) *ec2.DescribeInternetGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeInternetGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeInternetGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIpv6Pools provides a mock function.
func (_m *Mockec2API) DescribeIpv6Pools(_parameter_0 *ec2.DescribeIpv6PoolsInput) (_result_0 *ec2.DescribeIpv6PoolsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeIpv6PoolsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIpv6PoolsInput) *ec2.DescribeIpv6PoolsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIpv6PoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIpv6PoolsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIpv6PoolsPages provides a mock function.
func (_m *Mockec2API) DescribeIpv6PoolsPages(_parameter_0 *ec2.DescribeIpv6PoolsInput, _parameter_1 func(*ec2.DescribeIpv6PoolsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIpv6PoolsInput, func(*ec2.DescribeIpv6PoolsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeIpv6PoolsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeIpv6PoolsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIpv6PoolsInput, _parameter_2 func(*ec2.DescribeIpv6PoolsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIpv6PoolsInput, func(*ec2.DescribeIpv6PoolsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeIpv6PoolsRequest provides a mock function.
func (_m *Mockec2API) DescribeIpv6PoolsRequest(_parameter_0 *ec2.DescribeIpv6PoolsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeIpv6PoolsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeIpv6PoolsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeIpv6PoolsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeIpv6PoolsInput) *ec2.DescribeIpv6PoolsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeIpv6PoolsOutput)
		}
	}

	return r0, r1
}

// DescribeIpv6PoolsWithContext provides a mock function.
func (_m *Mockec2API) DescribeIpv6PoolsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeIpv6PoolsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeIpv6PoolsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeIpv6PoolsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeIpv6PoolsInput, ...request.Option) *ec2.DescribeIpv6PoolsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeIpv6PoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeIpv6PoolsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeyPairs provides a mock function.
func (_m *Mockec2API) DescribeKeyPairs(_parameter_0 *ec2.DescribeKeyPairsInput) (_result_0 *ec2.DescribeKeyPairsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeKeyPairsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeKeyPairsInput) *ec2.DescribeKeyPairsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeKeyPairsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeKeyPairsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeyPairsRequest provides a mock function.
func (_m *Mockec2API) DescribeKeyPairsRequest(_parameter_0 *ec2.DescribeKeyPairsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeKeyPairsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeKeyPairsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeKeyPairsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeKeyPairsInput) *ec2.DescribeKeyPairsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeKeyPairsOutput)
		}
	}

	return r0, r1
}

// DescribeKeyPairsWithContext provides a mock function.
func (_m *Mockec2API) DescribeKeyPairsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeKeyPairsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeKeyPairsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeKeyPairsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeKeyPairsInput, ...request.Option) *ec2.DescribeKeyPairsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeKeyPairsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeKeyPairsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchTemplateVersions provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplateVersions(_parameter_0 *ec2.DescribeLaunchTemplateVersionsInput) (_result_0 *ec2.DescribeLaunchTemplateVersionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplateVersionsInput) *ec2.DescribeLaunchTemplateVersionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLaunchTemplateVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLaunchTemplateVersionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchTemplateVersionsPages provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplateVersionsPages(_parameter_0 *ec2.DescribeLaunchTemplateVersionsInput, _parameter_1 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplateVersionsInput, func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLaunchTemplateVersionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplateVersionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLaunchTemplateVersionsInput, _parameter_2 func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLaunchTemplateVersionsInput, func(*ec2.DescribeLaunchTemplateVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLaunchTemplateVersionsRequest provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplateVersionsRequest(_parameter_0 *ec2.DescribeLaunchTemplateVersionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLaunchTemplateVersionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplateVersionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLaunchTemplateVersionsInput) *ec2.DescribeLaunchTemplateVersionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLaunchTemplateVersionsOutput)
		}
	}

	return r0, r1
}

// DescribeLaunchTemplateVersionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplateVersionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLaunchTemplateVersionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLaunchTemplateVersionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLaunchTemplateVersionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLaunchTemplateVersionsInput, ...request.Option) *ec2.DescribeLaunchTemplateVersionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLaunchTemplateVersionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLaunchTemplateVersionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchTemplates provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplates(_parameter_0 *ec2.DescribeLaunchTemplatesInput) (_result_0 *ec2.DescribeLaunchTemplatesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLaunchTemplatesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplatesInput) *ec2.DescribeLaunchTemplatesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLaunchTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLaunchTemplatesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchTemplatesPages provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplatesPages(_parameter_0 *ec2.DescribeLaunchTemplatesInput, _parameter_1 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplatesInput, func(*ec2.DescribeLaunchTemplatesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLaunchTemplatesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplatesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLaunchTemplatesInput, _parameter_2 func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLaunchTemplatesInput, func(*ec2.DescribeLaunchTemplatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLaunchTemplatesRequest provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplatesRequest(_parameter_0 *ec2.DescribeLaunchTemplatesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLaunchTemplatesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLaunchTemplatesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLaunchTemplatesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLaunchTemplatesInput) *ec2.DescribeLaunchTemplatesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLaunchTemplatesOutput)
		}
	}

	return r0, r1
}

// DescribeLaunchTemplatesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLaunchTemplatesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLaunchTemplatesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLaunchTemplatesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLaunchTemplatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLaunchTemplatesInput, ...request.Option) *ec2.DescribeLaunchTemplatesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLaunchTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLaunchTemplatesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (_result_0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPages(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, _parameter_1 func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, _parameter_2 func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput) *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, ...request.Option) *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVpcAssociations provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVpcAssociations(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (_result_0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVpcAssociationsPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVpcAssociationsPages(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, _parameter_1 func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTableVpcAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVpcAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, _parameter_2 func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTableVpcAssociationsRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVpcAssociationsRequest(_parameter_0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput) *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTableVpcAssociationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTableVpcAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, ...request.Option) *ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTableVpcAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewayRouteTableVpcAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTables provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTables(_parameter_0 *ec2.DescribeLocalGatewayRouteTablesInput) (_result_0 *ec2.DescribeLocalGatewayRouteTablesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewayRouteTablesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTablesInput) *ec2.DescribeLocalGatewayRouteTablesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTablesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTablesPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTablesPages(_parameter_0 *ec2.DescribeLocalGatewayRouteTablesInput, _parameter_1 func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTablesInput, func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTablesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTablesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTablesInput, _parameter_2 func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTablesInput, func(*ec2.DescribeLocalGatewayRouteTablesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayRouteTablesRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTablesRequest(_parameter_0 *ec2.DescribeLocalGatewayRouteTablesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewayRouteTablesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayRouteTablesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewayRouteTablesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayRouteTablesInput) *ec2.DescribeLocalGatewayRouteTablesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewayRouteTablesOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewayRouteTablesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayRouteTablesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayRouteTablesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewayRouteTablesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewayRouteTablesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayRouteTablesInput, ...request.Option) *ec2.DescribeLocalGatewayRouteTablesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewayRouteTablesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfaceGroups provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaceGroups(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (_result_0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfaceGroupsPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaceGroupsPages(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, _parameter_1 func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayVirtualInterfaceGroupsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaceGroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, _parameter_2 func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayVirtualInterfaceGroupsRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaceGroupsRequest(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput) *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfaceGroupsWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaceGroupsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, ...request.Option) *ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayVirtualInterfaceGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfaceGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfaces provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfaces(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (_result_0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfacesInput) *ec2.DescribeLocalGatewayVirtualInterfacesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayVirtualInterfacesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfacesPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfacesPages(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfacesInput, _parameter_1 func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfacesInput, func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayVirtualInterfacesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfacesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayVirtualInterfacesInput, _parameter_2 func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfacesInput, func(*ec2.DescribeLocalGatewayVirtualInterfacesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewayVirtualInterfacesRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfacesRequest(_parameter_0 *ec2.DescribeLocalGatewayVirtualInterfacesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewayVirtualInterfacesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewayVirtualInterfacesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewayVirtualInterfacesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewayVirtualInterfacesInput) *ec2.DescribeLocalGatewayVirtualInterfacesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewayVirtualInterfacesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewayVirtualInterfacesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewayVirtualInterfacesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewayVirtualInterfacesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfacesInput, ...request.Option) *ec2.DescribeLocalGatewayVirtualInterfacesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewayVirtualInterfacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewayVirtualInterfacesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGateways provides a mock function.
func (_m *Mockec2API) DescribeLocalGateways(_parameter_0 *ec2.DescribeLocalGatewaysInput) (_result_0 *ec2.DescribeLocalGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeLocalGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewaysInput) *ec2.DescribeLocalGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocalGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewaysPages(_parameter_0 *ec2.DescribeLocalGatewaysInput, _parameter_1 func(*ec2.DescribeLocalGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewaysInput, func(*ec2.DescribeLocalGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewaysInput, _parameter_2 func(*ec2.DescribeLocalGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewaysInput, func(*ec2.DescribeLocalGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLocalGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewaysRequest(_parameter_0 *ec2.DescribeLocalGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeLocalGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeLocalGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeLocalGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeLocalGatewaysInput) *ec2.DescribeLocalGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeLocalGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeLocalGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeLocalGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeLocalGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeLocalGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeLocalGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeLocalGatewaysInput, ...request.Option) *ec2.DescribeLocalGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeLocalGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeLocalGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeManagedPrefixLists provides a mock function.
func (_m *Mockec2API) DescribeManagedPrefixLists(_parameter_0 *ec2.DescribeManagedPrefixListsInput) (_result_0 *ec2.DescribeManagedPrefixListsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeManagedPrefixListsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeManagedPrefixListsInput) *ec2.DescribeManagedPrefixListsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeManagedPrefixListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeManagedPrefixListsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeManagedPrefixListsPages provides a mock function.
func (_m *Mockec2API) DescribeManagedPrefixListsPages(_parameter_0 *ec2.DescribeManagedPrefixListsInput, _parameter_1 func(*ec2.DescribeManagedPrefixListsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeManagedPrefixListsInput, func(*ec2.DescribeManagedPrefixListsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeManagedPrefixListsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeManagedPrefixListsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeManagedPrefixListsInput, _parameter_2 func(*ec2.DescribeManagedPrefixListsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeManagedPrefixListsInput, func(*ec2.DescribeManagedPrefixListsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeManagedPrefixListsRequest provides a mock function.
func (_m *Mockec2API) DescribeManagedPrefixListsRequest(_parameter_0 *ec2.DescribeManagedPrefixListsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeManagedPrefixListsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeManagedPrefixListsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeManagedPrefixListsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeManagedPrefixListsInput) *ec2.DescribeManagedPrefixListsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeManagedPrefixListsOutput)
		}
	}

	return r0, r1
}

// DescribeManagedPrefixListsWithContext provides a mock function.
func (_m *Mockec2API) DescribeManagedPrefixListsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeManagedPrefixListsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeManagedPrefixListsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeManagedPrefixListsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeManagedPrefixListsInput, ...request.Option) *ec2.DescribeManagedPrefixListsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeManagedPrefixListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeManagedPrefixListsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMovingAddresses provides a mock function.
func (_m *Mockec2API) DescribeMovingAddresses(_parameter_0 *ec2.DescribeMovingAddressesInput) (_result_0 *ec2.DescribeMovingAddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeMovingAddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeMovingAddressesInput) *ec2.DescribeMovingAddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeMovingAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeMovingAddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMovingAddressesPages provides a mock function.
func (_m *Mockec2API) DescribeMovingAddressesPages(_parameter_0 *ec2.DescribeMovingAddressesInput, _parameter_1 func(*ec2.DescribeMovingAddressesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeMovingAddressesInput, func(*ec2.DescribeMovingAddressesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeMovingAddressesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeMovingAddressesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeMovingAddressesInput, _parameter_2 func(*ec2.DescribeMovingAddressesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeMovingAddressesInput, func(*ec2.DescribeMovingAddressesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeMovingAddressesRequest provides a mock function.
func (_m *Mockec2API) DescribeMovingAddressesRequest(_parameter_0 *ec2.DescribeMovingAddressesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeMovingAddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeMovingAddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeMovingAddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeMovingAddressesInput) *ec2.DescribeMovingAddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeMovingAddressesOutput)
		}
	}

	return r0, r1
}

// DescribeMovingAddressesWithContext provides a mock function.
func (_m *Mockec2API) DescribeMovingAddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeMovingAddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeMovingAddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeMovingAddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeMovingAddressesInput, ...request.Option) *ec2.DescribeMovingAddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeMovingAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeMovingAddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNatGateways provides a mock function.
func (_m *Mockec2API) DescribeNatGateways(_parameter_0 *ec2.DescribeNatGatewaysInput) (_result_0 *ec2.DescribeNatGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeNatGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNatGatewaysInput) *ec2.DescribeNatGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNatGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNatGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNatGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeNatGatewaysPages(_parameter_0 *ec2.DescribeNatGatewaysInput, _parameter_1 func(*ec2.DescribeNatGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNatGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeNatGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNatGatewaysInput, _parameter_2 func(*ec2.DescribeNatGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNatGatewaysInput, func(*ec2.DescribeNatGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNatGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeNatGatewaysRequest(_parameter_0 *ec2.DescribeNatGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeNatGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNatGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeNatGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNatGatewaysInput) *ec2.DescribeNatGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeNatGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeNatGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeNatGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNatGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeNatGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeNatGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...request.Option) *ec2.DescribeNatGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNatGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkAcls provides a mock function.
func (_m *Mockec2API) DescribeNetworkAcls(_parameter_0 *ec2.DescribeNetworkAclsInput) (_result_0 *ec2.DescribeNetworkAclsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeNetworkAclsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkAclsInput) *ec2.DescribeNetworkAclsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkAclsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkAclsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkAclsPages provides a mock function.
func (_m *Mockec2API) DescribeNetworkAclsPages(_parameter_0 *ec2.DescribeNetworkAclsInput, _parameter_1 func(*ec2.DescribeNetworkAclsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkAclsInput, func(*ec2.DescribeNetworkAclsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkAclsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkAclsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkAclsInput, _parameter_2 func(*ec2.DescribeNetworkAclsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkAclsInput, func(*ec2.DescribeNetworkAclsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkAclsRequest provides a mock function.
func (_m *Mockec2API) DescribeNetworkAclsRequest(_parameter_0 *ec2.DescribeNetworkAclsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeNetworkAclsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkAclsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeNetworkAclsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkAclsInput) *ec2.DescribeNetworkAclsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeNetworkAclsOutput)
		}
	}

	return r0, r1
}

// DescribeNetworkAclsWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkAclsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkAclsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeNetworkAclsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeNetworkAclsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkAclsInput, ...request.Option) *ec2.DescribeNetworkAclsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkAclsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkAclsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfaceAttribute provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfaceAttribute(_parameter_0 *ec2.DescribeNetworkInterfaceAttributeInput) (_result_0 *ec2.DescribeNetworkInterfaceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfaceAttributeInput) *ec2.DescribeNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfaceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfaceAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfaceAttributeRequest(_parameter_0 *ec2.DescribeNetworkInterfaceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeNetworkInterfaceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfaceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfaceAttributeInput) *ec2.DescribeNetworkInterfaceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeNetworkInterfaceAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeNetworkInterfaceAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfaceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfaceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeNetworkInterfaceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfaceAttributeInput, ...request.Option) *ec2.DescribeNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkInterfaceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfacePermissions provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacePermissions(_parameter_0 *ec2.DescribeNetworkInterfacePermissionsInput) (_result_0 *ec2.DescribeNetworkInterfacePermissionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeNetworkInterfacePermissionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacePermissionsInput) *ec2.DescribeNetworkInterfacePermissionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfacePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfacePermissionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfacePermissionsPages provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacePermissionsPages(_parameter_0 *ec2.DescribeNetworkInterfacePermissionsInput, _parameter_1 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacePermissionsInput, func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkInterfacePermissionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacePermissionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfacePermissionsInput, _parameter_2 func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacePermissionsInput, func(*ec2.DescribeNetworkInterfacePermissionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkInterfacePermissionsRequest provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacePermissionsRequest(_parameter_0 *ec2.DescribeNetworkInterfacePermissionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeNetworkInterfacePermissionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacePermissionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeNetworkInterfacePermissionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfacePermissionsInput) *ec2.DescribeNetworkInterfacePermissionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeNetworkInterfacePermissionsOutput)
		}
	}

	return r0, r1
}

// DescribeNetworkInterfacePermissionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacePermissionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfacePermissionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeNetworkInterfacePermissionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeNetworkInterfacePermissionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacePermissionsInput, ...request.Option) *ec2.DescribeNetworkInterfacePermissionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfacePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkInterfacePermissionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfaces provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfaces(_parameter_0 *ec2.DescribeNetworkInterfacesInput) (_result_0 *ec2.DescribeNetworkInterfacesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeNetworkInterfacesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacesInput) *ec2.DescribeNetworkInterfacesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfacesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNetworkInterfacesPages provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacesPages(_parameter_0 *ec2.DescribeNetworkInterfacesInput, _parameter_1 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkInterfacesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfacesInput, _parameter_2 func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, func(*ec2.DescribeNetworkInterfacesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeNetworkInterfacesRequest provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacesRequest(_parameter_0 *ec2.DescribeNetworkInterfacesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeNetworkInterfacesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeNetworkInterfacesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeNetworkInterfacesInput) *ec2.DescribeNetworkInterfacesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeNetworkInterfacesOutput)
		}
	}

	return r0, r1
}

// DescribeNetworkInterfacesWithContext provides a mock function.
func (_m *Mockec2API) DescribeNetworkInterfacesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfacesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeNetworkInterfacesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeNetworkInterfacesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...request.Option) *ec2.DescribeNetworkInterfacesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeNetworkInterfacesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePlacementGroups provides a mock function.
func (_m *Mockec2API) DescribePlacementGroups(_parameter_0 *ec2.DescribePlacementGroupsInput) (_result_0 *ec2.DescribePlacementGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribePlacementGroupsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribePlacementGroupsInput) *ec2.DescribePlacementGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePlacementGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribePlacementGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePlacementGroupsRequest provides a mock function.
func (_m *Mockec2API) DescribePlacementGroupsRequest(_parameter_0 *ec2.DescribePlacementGroupsInput) (_result_0 *request.Request, _result_1 *ec2.DescribePlacementGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribePlacementGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribePlacementGroupsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribePlacementGroupsInput) *ec2.DescribePlacementGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribePlacementGroupsOutput)
		}
	}

	return r0, r1
}

// DescribePlacementGroupsWithContext provides a mock function.
func (_m *Mockec2API) DescribePlacementGroupsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePlacementGroupsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribePlacementGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribePlacementGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePlacementGroupsInput, ...request.Option) *ec2.DescribePlacementGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePlacementGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribePlacementGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePrefixLists provides a mock function.
func (_m *Mockec2API) DescribePrefixLists(_parameter_0 *ec2.DescribePrefixListsInput) (_result_0 *ec2.DescribePrefixListsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribePrefixListsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrefixListsInput) *ec2.DescribePrefixListsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePrefixListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribePrefixListsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePrefixListsPages provides a mock function.
func (_m *Mockec2API) DescribePrefixListsPages(_parameter_0 *ec2.DescribePrefixListsInput, _parameter_1 func(*ec2.DescribePrefixListsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrefixListsInput, func(*ec2.DescribePrefixListsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePrefixListsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribePrefixListsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePrefixListsInput, _parameter_2 func(*ec2.DescribePrefixListsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePrefixListsInput, func(*ec2.DescribePrefixListsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePrefixListsRequest provides a mock function.
func (_m *Mockec2API) DescribePrefixListsRequest(_parameter_0 *ec2.DescribePrefixListsInput) (_result_0 *request.Request, _result_1 *ec2.DescribePrefixListsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrefixListsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribePrefixListsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribePrefixListsInput) *ec2.DescribePrefixListsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribePrefixListsOutput)
		}
	}

	return r0, r1
}

// DescribePrefixListsWithContext provides a mock function.
func (_m *Mockec2API) DescribePrefixListsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePrefixListsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribePrefixListsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribePrefixListsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePrefixListsInput, ...request.Option) *ec2.DescribePrefixListsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePrefixListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribePrefixListsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePrincipalIdFormat provides a mock function.
func (_m *Mockec2API) DescribePrincipalIdFormat(_parameter_0 *ec2.DescribePrincipalIdFormatInput) (_result_0 *ec2.DescribePrincipalIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribePrincipalIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrincipalIdFormatInput) *ec2.DescribePrincipalIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePrincipalIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribePrincipalIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePrincipalIdFormatPages provides a mock function.
func (_m *Mockec2API) DescribePrincipalIdFormatPages(_parameter_0 *ec2.DescribePrincipalIdFormatInput, _parameter_1 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrincipalIdFormatInput, func(*ec2.DescribePrincipalIdFormatOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePrincipalIdFormatPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribePrincipalIdFormatPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePrincipalIdFormatInput, _parameter_2 func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePrincipalIdFormatInput, func(*ec2.DescribePrincipalIdFormatOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePrincipalIdFormatRequest provides a mock function.
func (_m *Mockec2API) DescribePrincipalIdFormatRequest(_parameter_0 *ec2.DescribePrincipalIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.DescribePrincipalIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribePrincipalIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribePrincipalIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribePrincipalIdFormatInput) *ec2.DescribePrincipalIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribePrincipalIdFormatOutput)
		}
	}

	return r0, r1
}

// DescribePrincipalIdFormatWithContext provides a mock function.
func (_m *Mockec2API) DescribePrincipalIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePrincipalIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribePrincipalIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribePrincipalIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePrincipalIdFormatInput, ...request.Option) *ec2.DescribePrincipalIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePrincipalIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribePrincipalIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePublicIpv4Pools provides a mock function.
func (_m *Mockec2API) DescribePublicIpv4Pools(_parameter_0 *ec2.DescribePublicIpv4PoolsInput) (_result_0 *ec2.DescribePublicIpv4PoolsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribePublicIpv4PoolsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribePublicIpv4PoolsInput) *ec2.DescribePublicIpv4PoolsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePublicIpv4PoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribePublicIpv4PoolsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePublicIpv4PoolsPages provides a mock function.
func (_m *Mockec2API) DescribePublicIpv4PoolsPages(_parameter_0 *ec2.DescribePublicIpv4PoolsInput, _parameter_1 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribePublicIpv4PoolsInput, func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePublicIpv4PoolsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribePublicIpv4PoolsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePublicIpv4PoolsInput, _parameter_2 func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePublicIpv4PoolsInput, func(*ec2.DescribePublicIpv4PoolsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribePublicIpv4PoolsRequest provides a mock function.
func (_m *Mockec2API) DescribePublicIpv4PoolsRequest(_parameter_0 *ec2.DescribePublicIpv4PoolsInput) (_result_0 *request.Request, _result_1 *ec2.DescribePublicIpv4PoolsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribePublicIpv4PoolsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribePublicIpv4PoolsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribePublicIpv4PoolsInput) *ec2.DescribePublicIpv4PoolsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribePublicIpv4PoolsOutput)
		}
	}

	return r0, r1
}

// DescribePublicIpv4PoolsWithContext provides a mock function.
func (_m *Mockec2API) DescribePublicIpv4PoolsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribePublicIpv4PoolsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribePublicIpv4PoolsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribePublicIpv4PoolsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribePublicIpv4PoolsInput, ...request.Option) *ec2.DescribePublicIpv4PoolsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribePublicIpv4PoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribePublicIpv4PoolsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegions provides a mock function.
func (_m *Mockec2API) DescribeRegions(_parameter_0 *ec2.DescribeRegionsInput) (_result_0 *ec2.DescribeRegionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeRegionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeRegionsInput) *ec2.DescribeRegionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRegionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeRegionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegionsRequest provides a mock function.
func (_m *Mockec2API) DescribeRegionsRequest(_parameter_0 *ec2.DescribeRegionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeRegionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeRegionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeRegionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeRegionsInput) *ec2.DescribeRegionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeRegionsOutput)
		}
	}

	return r0, r1
}

// DescribeRegionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeRegionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeRegionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeRegionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeRegionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRegionsInput, ...request.Option) *ec2.DescribeRegionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRegionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeRegionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstances provides a mock function.
func (_m *Mockec2API) DescribeReservedInstances(_parameter_0 *ec2.DescribeReservedInstancesInput) (_result_0 *ec2.DescribeReservedInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesInput) *ec2.DescribeReservedInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesListings provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesListings(_parameter_0 *ec2.DescribeReservedInstancesListingsInput) (_result_0 *ec2.DescribeReservedInstancesListingsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeReservedInstancesListingsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesListingsInput) *ec2.DescribeReservedInstancesListingsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesListingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesListingsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesListingsRequest provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesListingsRequest(_parameter_0 *ec2.DescribeReservedInstancesListingsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeReservedInstancesListingsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesListingsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeReservedInstancesListingsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesListingsInput) *ec2.DescribeReservedInstancesListingsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeReservedInstancesListingsOutput)
		}
	}

	return r0, r1
}

// DescribeReservedInstancesListingsWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesListingsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesListingsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeReservedInstancesListingsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeReservedInstancesListingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesListingsInput, ...request.Option) *ec2.DescribeReservedInstancesListingsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesListingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeReservedInstancesListingsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesModifications provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesModifications(_parameter_0 *ec2.DescribeReservedInstancesModificationsInput) (_result_0 *ec2.DescribeReservedInstancesModificationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeReservedInstancesModificationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesModificationsInput) *ec2.DescribeReservedInstancesModificationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesModificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesModificationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesModificationsPages provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesModificationsPages(_parameter_0 *ec2.DescribeReservedInstancesModificationsInput, _parameter_1 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeReservedInstancesModificationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesModificationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesModificationsInput, _parameter_2 func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesModificationsInput, func(*ec2.DescribeReservedInstancesModificationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeReservedInstancesModificationsRequest provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesModificationsRequest(_parameter_0 *ec2.DescribeReservedInstancesModificationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeReservedInstancesModificationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesModificationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeReservedInstancesModificationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesModificationsInput) *ec2.DescribeReservedInstancesModificationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeReservedInstancesModificationsOutput)
		}
	}

	return r0, r1
}

// DescribeReservedInstancesModificationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesModificationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesModificationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeReservedInstancesModificationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeReservedInstancesModificationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesModificationsInput, ...request.Option) *ec2.DescribeReservedInstancesModificationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesModificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeReservedInstancesModificationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesOfferings provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesOfferings(_parameter_0 *ec2.DescribeReservedInstancesOfferingsInput) (_result_0 *ec2.DescribeReservedInstancesOfferingsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeReservedInstancesOfferingsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesOfferingsInput) *ec2.DescribeReservedInstancesOfferingsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesOfferingsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesOfferingsPages provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesOfferingsPages(_parameter_0 *ec2.DescribeReservedInstancesOfferingsInput, _parameter_1 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeReservedInstancesOfferingsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesOfferingsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesOfferingsInput, _parameter_2 func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesOfferingsInput, func(*ec2.DescribeReservedInstancesOfferingsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeReservedInstancesOfferingsRequest provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesOfferingsRequest(_parameter_0 *ec2.DescribeReservedInstancesOfferingsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeReservedInstancesOfferingsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesOfferingsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeReservedInstancesOfferingsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesOfferingsInput) *ec2.DescribeReservedInstancesOfferingsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeReservedInstancesOfferingsOutput)
		}
	}

	return r0, r1
}

// DescribeReservedInstancesOfferingsWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesOfferingsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesOfferingsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeReservedInstancesOfferingsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeReservedInstancesOfferingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesOfferingsInput, ...request.Option) *ec2.DescribeReservedInstancesOfferingsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesOfferingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeReservedInstancesOfferingsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesRequest(_parameter_0 *ec2.DescribeReservedInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeReservedInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeReservedInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeReservedInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeReservedInstancesInput) *ec2.DescribeReservedInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeReservedInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeReservedInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeReservedInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeReservedInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeReservedInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeReservedInstancesInput, ...request.Option) *ec2.DescribeReservedInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeReservedInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRouteTables provides a mock function.
func (_m *Mockec2API) DescribeRouteTables(_parameter_0 *ec2.DescribeRouteTablesInput) (_result_0 *ec2.DescribeRouteTablesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeRouteTablesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeRouteTablesInput) *ec2.DescribeRouteTablesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeRouteTablesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRouteTablesPages provides a mock function.
func (_m *Mockec2API) DescribeRouteTablesPages(_parameter_0 *ec2.DescribeRouteTablesInput, _parameter_1 func(*ec2.DescribeRouteTablesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeRouteTablesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeRouteTablesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeRouteTablesInput, _parameter_2 func(*ec2.DescribeRouteTablesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, func(*ec2.DescribeRouteTablesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeRouteTablesRequest provides a mock function.
func (_m *Mockec2API) DescribeRouteTablesRequest(_parameter_0 *ec2.DescribeRouteTablesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeRouteTablesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeRouteTablesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeRouteTablesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeRouteTablesInput) *ec2.DescribeRouteTablesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeRouteTablesOutput)
		}
	}

	return r0, r1
}

// DescribeRouteTablesWithContext provides a mock function.
func (_m *Mockec2API) DescribeRouteTablesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeRouteTablesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeRouteTablesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeRouteTablesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeRouteTablesInput, ...request.Option) *ec2.DescribeRouteTablesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeRouteTablesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScheduledInstanceAvailability provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstanceAvailability(_parameter_0 *ec2.DescribeScheduledInstanceAvailabilityInput) (_result_0 *ec2.DescribeScheduledInstanceAvailabilityOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeScheduledInstanceAvailabilityOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstanceAvailabilityInput) *ec2.DescribeScheduledInstanceAvailabilityOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeScheduledInstanceAvailabilityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeScheduledInstanceAvailabilityInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScheduledInstanceAvailabilityPages provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstanceAvailabilityPages(_parameter_0 *ec2.DescribeScheduledInstanceAvailabilityInput, _parameter_1 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstanceAvailabilityInput, func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeScheduledInstanceAvailabilityPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstanceAvailabilityPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeScheduledInstanceAvailabilityInput, _parameter_2 func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, func(*ec2.DescribeScheduledInstanceAvailabilityOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeScheduledInstanceAvailabilityRequest provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstanceAvailabilityRequest(_parameter_0 *ec2.DescribeScheduledInstanceAvailabilityInput) (_result_0 *request.Request, _result_1 *ec2.DescribeScheduledInstanceAvailabilityOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstanceAvailabilityInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeScheduledInstanceAvailabilityOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeScheduledInstanceAvailabilityInput) *ec2.DescribeScheduledInstanceAvailabilityOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeScheduledInstanceAvailabilityOutput)
		}
	}

	return r0, r1
}

// DescribeScheduledInstanceAvailabilityWithContext provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstanceAvailabilityWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeScheduledInstanceAvailabilityInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeScheduledInstanceAvailabilityOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeScheduledInstanceAvailabilityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, ...request.Option) *ec2.DescribeScheduledInstanceAvailabilityOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeScheduledInstanceAvailabilityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeScheduledInstanceAvailabilityInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScheduledInstances provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstances(_parameter_0 *ec2.DescribeScheduledInstancesInput) (_result_0 *ec2.DescribeScheduledInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstancesInput) *ec2.DescribeScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeScheduledInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScheduledInstancesPages provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstancesPages(_parameter_0 *ec2.DescribeScheduledInstancesInput, _parameter_1 func(*ec2.DescribeScheduledInstancesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstancesInput, func(*ec2.DescribeScheduledInstancesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeScheduledInstancesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstancesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeScheduledInstancesInput, _parameter_2 func(*ec2.DescribeScheduledInstancesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeScheduledInstancesInput, func(*ec2.DescribeScheduledInstancesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeScheduledInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstancesRequest(_parameter_0 *ec2.DescribeScheduledInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeScheduledInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeScheduledInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeScheduledInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeScheduledInstancesInput) *ec2.DescribeScheduledInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeScheduledInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeScheduledInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeScheduledInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeScheduledInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeScheduledInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeScheduledInstancesInput, ...request.Option) *ec2.DescribeScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeScheduledInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityGroupReferences provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupReferences(_parameter_0 *ec2.DescribeSecurityGroupReferencesInput) (_result_0 *ec2.DescribeSecurityGroupReferencesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSecurityGroupReferencesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupReferencesInput) *ec2.DescribeSecurityGroupReferencesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSecurityGroupReferencesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSecurityGroupReferencesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityGroupReferencesRequest provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupReferencesRequest(_parameter_0 *ec2.DescribeSecurityGroupReferencesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSecurityGroupReferencesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupReferencesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSecurityGroupReferencesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSecurityGroupReferencesInput) *ec2.DescribeSecurityGroupReferencesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSecurityGroupReferencesOutput)
		}
	}

	return r0, r1
}

// DescribeSecurityGroupReferencesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupReferencesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSecurityGroupReferencesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSecurityGroupReferencesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSecurityGroupReferencesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupReferencesInput, ...request.Option) *ec2.DescribeSecurityGroupReferencesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSecurityGroupReferencesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSecurityGroupReferencesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityGroups provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroups(_parameter_0 *ec2.DescribeSecurityGroupsInput) (_result_0 *ec2.DescribeSecurityGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupsInput) *ec2.DescribeSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSecurityGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityGroupsPages provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupsPages(_parameter_0 *ec2.DescribeSecurityGroupsInput, _parameter_1 func(*ec2.DescribeSecurityGroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSecurityGroupsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSecurityGroupsInput, _parameter_2 func(*ec2.DescribeSecurityGroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupsInput, func(*ec2.DescribeSecurityGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSecurityGroupsRequest provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupsRequest(_parameter_0 *ec2.DescribeSecurityGroupsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSecurityGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSecurityGroupsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSecurityGroupsInput) *ec2.DescribeSecurityGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSecurityGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeSecurityGroupsWithContext provides a mock function.
func (_m *Mockec2API) DescribeSecurityGroupsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSecurityGroupsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSecurityGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...request.Option) *ec2.DescribeSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshotAttribute provides a mock function.
func (_m *Mockec2API) DescribeSnapshotAttribute(_parameter_0 *ec2.DescribeSnapshotAttributeInput) (_result_0 *ec2.DescribeSnapshotAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotAttributeInput) *ec2.DescribeSnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSnapshotAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshotAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeSnapshotAttributeRequest(_parameter_0 *ec2.DescribeSnapshotAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSnapshotAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSnapshotAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSnapshotAttributeInput) *ec2.DescribeSnapshotAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSnapshotAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeSnapshotAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeSnapshotAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSnapshotAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSnapshotAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotAttributeInput, ...request.Option) *ec2.DescribeSnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSnapshotAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshots provides a mock function.
func (_m *Mockec2API) DescribeSnapshots(_parameter_0 *ec2.DescribeSnapshotsInput) (_result_0 *ec2.DescribeSnapshotsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSnapshotsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotsInput) *ec2.DescribeSnapshotsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSnapshotsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshotsPages provides a mock function.
func (_m *Mockec2API) DescribeSnapshotsPages(_parameter_0 *ec2.DescribeSnapshotsInput, _parameter_1 func(*ec2.DescribeSnapshotsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSnapshotsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSnapshotsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSnapshotsInput, _parameter_2 func(*ec2.DescribeSnapshotsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotsInput, func(*ec2.DescribeSnapshotsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSnapshotsRequest provides a mock function.
func (_m *Mockec2API) DescribeSnapshotsRequest(_parameter_0 *ec2.DescribeSnapshotsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSnapshotsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSnapshotsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSnapshotsInput) *ec2.DescribeSnapshotsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSnapshotsOutput)
		}
	}

	return r0, r1
}

// DescribeSnapshotsWithContext provides a mock function.
func (_m *Mockec2API) DescribeSnapshotsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSnapshotsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSnapshotsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSnapshotsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotsInput, ...request.Option) *ec2.DescribeSnapshotsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSnapshotsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSnapshotsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotDatafeedSubscription provides a mock function.
func (_m *Mockec2API) DescribeSpotDatafeedSubscription(_parameter_0 *ec2.DescribeSpotDatafeedSubscriptionInput) (_result_0 *ec2.DescribeSpotDatafeedSubscriptionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotDatafeedSubscriptionInput) *ec2.DescribeSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotDatafeedSubscriptionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotDatafeedSubscriptionRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotDatafeedSubscriptionRequest(_parameter_0 *ec2.DescribeSpotDatafeedSubscriptionInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotDatafeedSubscriptionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotDatafeedSubscriptionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotDatafeedSubscriptionInput) *ec2.DescribeSpotDatafeedSubscriptionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotDatafeedSubscriptionOutput)
		}
	}

	return r0, r1
}

// DescribeSpotDatafeedSubscriptionWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotDatafeedSubscriptionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotDatafeedSubscriptionInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotDatafeedSubscriptionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotDatafeedSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotDatafeedSubscriptionInput, ...request.Option) *ec2.DescribeSpotDatafeedSubscriptionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotDatafeedSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotDatafeedSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetInstances provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetInstances(_parameter_0 *ec2.DescribeSpotFleetInstancesInput) (_result_0 *ec2.DescribeSpotFleetInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotFleetInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetInstancesInput) *ec2.DescribeSpotFleetInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetInstancesRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetInstancesRequest(_parameter_0 *ec2.DescribeSpotFleetInstancesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotFleetInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotFleetInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetInstancesInput) *ec2.DescribeSpotFleetInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotFleetInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeSpotFleetInstancesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotFleetInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotFleetInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotFleetInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotFleetInstancesInput, ...request.Option) *ec2.DescribeSpotFleetInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotFleetInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetRequestHistory provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestHistory(_parameter_0 *ec2.DescribeSpotFleetRequestHistoryInput) (_result_0 *ec2.DescribeSpotFleetRequestHistoryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotFleetRequestHistoryOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetRequestHistoryInput) *ec2.DescribeSpotFleetRequestHistoryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetRequestHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetRequestHistoryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetRequestHistoryRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestHistoryRequest(_parameter_0 *ec2.DescribeSpotFleetRequestHistoryInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotFleetRequestHistoryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetRequestHistoryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotFleetRequestHistoryOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetRequestHistoryInput) *ec2.DescribeSpotFleetRequestHistoryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotFleetRequestHistoryOutput)
		}
	}

	return r0, r1
}

// DescribeSpotFleetRequestHistoryWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestHistoryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotFleetRequestHistoryInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotFleetRequestHistoryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotFleetRequestHistoryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotFleetRequestHistoryInput, ...request.Option) *ec2.DescribeSpotFleetRequestHistoryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetRequestHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotFleetRequestHistoryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetRequests provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequests(_parameter_0 *ec2.DescribeSpotFleetRequestsInput) (_result_0 *ec2.DescribeSpotFleetRequestsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotFleetRequestsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetRequestsInput) *ec2.DescribeSpotFleetRequestsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetRequestsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotFleetRequestsPages provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestsPages(_parameter_0 *ec2.DescribeSpotFleetRequestsInput, _parameter_1 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotFleetRequestsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotFleetRequestsInput, _parameter_2 func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotFleetRequestsInput, func(*ec2.DescribeSpotFleetRequestsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotFleetRequestsRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestsRequest(_parameter_0 *ec2.DescribeSpotFleetRequestsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotFleetRequestsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotFleetRequestsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotFleetRequestsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotFleetRequestsInput) *ec2.DescribeSpotFleetRequestsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotFleetRequestsOutput)
		}
	}

	return r0, r1
}

// DescribeSpotFleetRequestsWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotFleetRequestsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotFleetRequestsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotFleetRequestsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotFleetRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotFleetRequestsInput, ...request.Option) *ec2.DescribeSpotFleetRequestsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotFleetRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotFleetRequestsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotInstanceRequests provides a mock function.
func (_m *Mockec2API) DescribeSpotInstanceRequests(_parameter_0 *ec2.DescribeSpotInstanceRequestsInput) (_result_0 *ec2.DescribeSpotInstanceRequestsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotInstanceRequestsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotInstanceRequestsInput) *ec2.DescribeSpotInstanceRequestsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotInstanceRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotInstanceRequestsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotInstanceRequestsPages provides a mock function.
func (_m *Mockec2API) DescribeSpotInstanceRequestsPages(_parameter_0 *ec2.DescribeSpotInstanceRequestsInput, _parameter_1 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotInstanceRequestsInput, func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotInstanceRequestsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotInstanceRequestsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotInstanceRequestsInput, _parameter_2 func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotInstanceRequestsInput, func(*ec2.DescribeSpotInstanceRequestsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotInstanceRequestsRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotInstanceRequestsRequest(_parameter_0 *ec2.DescribeSpotInstanceRequestsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotInstanceRequestsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotInstanceRequestsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotInstanceRequestsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotInstanceRequestsInput) *ec2.DescribeSpotInstanceRequestsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotInstanceRequestsOutput)
		}
	}

	return r0, r1
}

// DescribeSpotInstanceRequestsWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotInstanceRequestsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotInstanceRequestsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotInstanceRequestsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotInstanceRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.Option) *ec2.DescribeSpotInstanceRequestsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotInstanceRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotPriceHistory provides a mock function.
func (_m *Mockec2API) DescribeSpotPriceHistory(_parameter_0 *ec2.DescribeSpotPriceHistoryInput) (_result_0 *ec2.DescribeSpotPriceHistoryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSpotPriceHistoryOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotPriceHistoryInput) *ec2.DescribeSpotPriceHistoryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotPriceHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotPriceHistoryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpotPriceHistoryPages provides a mock function.
func (_m *Mockec2API) DescribeSpotPriceHistoryPages(_parameter_0 *ec2.DescribeSpotPriceHistoryInput, _parameter_1 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotPriceHistoryPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotPriceHistoryPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotPriceHistoryInput, _parameter_2 func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotPriceHistoryInput, func(*ec2.DescribeSpotPriceHistoryOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSpotPriceHistoryRequest provides a mock function.
func (_m *Mockec2API) DescribeSpotPriceHistoryRequest(_parameter_0 *ec2.DescribeSpotPriceHistoryInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSpotPriceHistoryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotPriceHistoryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSpotPriceHistoryOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSpotPriceHistoryInput) *ec2.DescribeSpotPriceHistoryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSpotPriceHistoryOutput)
		}
	}

	return r0, r1
}

// DescribeSpotPriceHistoryWithContext provides a mock function.
func (_m *Mockec2API) DescribeSpotPriceHistoryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotPriceHistoryInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSpotPriceHistoryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSpotPriceHistoryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotPriceHistoryInput, ...request.Option) *ec2.DescribeSpotPriceHistoryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSpotPriceHistoryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSpotPriceHistoryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStaleSecurityGroups provides a mock function.
func (_m *Mockec2API) DescribeStaleSecurityGroups(_parameter_0 *ec2.DescribeStaleSecurityGroupsInput) (_result_0 *ec2.DescribeStaleSecurityGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeStaleSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeStaleSecurityGroupsInput) *ec2.DescribeStaleSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeStaleSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeStaleSecurityGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStaleSecurityGroupsPages provides a mock function.
func (_m *Mockec2API) DescribeStaleSecurityGroupsPages(_parameter_0 *ec2.DescribeStaleSecurityGroupsInput, _parameter_1 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeStaleSecurityGroupsInput, func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeStaleSecurityGroupsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeStaleSecurityGroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeStaleSecurityGroupsInput, _parameter_2 func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeStaleSecurityGroupsInput, func(*ec2.DescribeStaleSecurityGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeStaleSecurityGroupsRequest provides a mock function.
func (_m *Mockec2API) DescribeStaleSecurityGroupsRequest(_parameter_0 *ec2.DescribeStaleSecurityGroupsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeStaleSecurityGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeStaleSecurityGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeStaleSecurityGroupsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeStaleSecurityGroupsInput) *ec2.DescribeStaleSecurityGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeStaleSecurityGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeStaleSecurityGroupsWithContext provides a mock function.
func (_m *Mockec2API) DescribeStaleSecurityGroupsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeStaleSecurityGroupsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeStaleSecurityGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeStaleSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeStaleSecurityGroupsInput, ...request.Option) *ec2.DescribeStaleSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeStaleSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeStaleSecurityGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubnets provides a mock function.
func (_m *Mockec2API) DescribeSubnets(_parameter_0 *ec2.DescribeSubnetsInput) (_result_0 *ec2.DescribeSubnetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeSubnetsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSubnetsInput) *ec2.DescribeSubnetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSubnetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSubnetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubnetsPages provides a mock function.
func (_m *Mockec2API) DescribeSubnetsPages(_parameter_0 *ec2.DescribeSubnetsInput, _parameter_1 func(*ec2.DescribeSubnetsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSubnetsInput, func(*ec2.DescribeSubnetsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSubnetsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeSubnetsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSubnetsInput, _parameter_2 func(*ec2.DescribeSubnetsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, func(*ec2.DescribeSubnetsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeSubnetsRequest provides a mock function.
func (_m *Mockec2API) DescribeSubnetsRequest(_parameter_0 *ec2.DescribeSubnetsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeSubnetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSubnetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeSubnetsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeSubnetsInput) *ec2.DescribeSubnetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeSubnetsOutput)
		}
	}

	return r0, r1
}

// DescribeSubnetsWithContext provides a mock function.
func (_m *Mockec2API) DescribeSubnetsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSubnetsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeSubnetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeSubnetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...request.Option) *ec2.DescribeSubnetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeSubnetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeSubnetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function.
func (_m *Mockec2API) DescribeTags(_parameter_0 *ec2.DescribeTagsInput) (_result_0 *ec2.DescribeTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTagsInput) *ec2.DescribeTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTagsPages provides a mock function.
func (_m *Mockec2API) DescribeTagsPages(_parameter_0 *ec2.DescribeTagsInput, _parameter_1 func(*ec2.DescribeTagsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTagsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTagsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTagsInput, _parameter_2 func(*ec2.DescribeTagsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTagsInput, func(*ec2.DescribeTagsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTagsRequest provides a mock function.
func (_m *Mockec2API) DescribeTagsRequest(_parameter_0 *ec2.DescribeTagsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTagsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTagsInput) *ec2.DescribeTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTagsOutput)
		}
	}

	return r0, r1
}

// DescribeTagsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTagsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTagsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTagsInput, ...request.Option) *ec2.DescribeTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorFilters provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorFilters(_parameter_0 *ec2.DescribeTrafficMirrorFiltersInput) (_result_0 *ec2.DescribeTrafficMirrorFiltersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTrafficMirrorFiltersOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorFiltersInput) *ec2.DescribeTrafficMirrorFiltersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorFiltersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorFiltersPages provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorFiltersPages(_parameter_0 *ec2.DescribeTrafficMirrorFiltersInput, _parameter_1 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorFiltersInput, func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorFiltersPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorFiltersPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorFiltersInput, _parameter_2 func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorFiltersInput, func(*ec2.DescribeTrafficMirrorFiltersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorFiltersRequest provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorFiltersRequest(_parameter_0 *ec2.DescribeTrafficMirrorFiltersInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTrafficMirrorFiltersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorFiltersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTrafficMirrorFiltersOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorFiltersInput) *ec2.DescribeTrafficMirrorFiltersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTrafficMirrorFiltersOutput)
		}
	}

	return r0, r1
}

// DescribeTrafficMirrorFiltersWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorFiltersWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorFiltersInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTrafficMirrorFiltersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTrafficMirrorFiltersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorFiltersInput, ...request.Option) *ec2.DescribeTrafficMirrorFiltersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorFiltersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTrafficMirrorFiltersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorSessions provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorSessions(_parameter_0 *ec2.DescribeTrafficMirrorSessionsInput) (_result_0 *ec2.DescribeTrafficMirrorSessionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTrafficMirrorSessionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorSessionsInput) *ec2.DescribeTrafficMirrorSessionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorSessionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorSessionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorSessionsPages provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorSessionsPages(_parameter_0 *ec2.DescribeTrafficMirrorSessionsInput, _parameter_1 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorSessionsInput, func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorSessionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorSessionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorSessionsInput, _parameter_2 func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorSessionsInput, func(*ec2.DescribeTrafficMirrorSessionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorSessionsRequest provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorSessionsRequest(_parameter_0 *ec2.DescribeTrafficMirrorSessionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTrafficMirrorSessionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorSessionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTrafficMirrorSessionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorSessionsInput) *ec2.DescribeTrafficMirrorSessionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTrafficMirrorSessionsOutput)
		}
	}

	return r0, r1
}

// DescribeTrafficMirrorSessionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorSessionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorSessionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTrafficMirrorSessionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTrafficMirrorSessionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorSessionsInput, ...request.Option) *ec2.DescribeTrafficMirrorSessionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorSessionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTrafficMirrorSessionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorTargets provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorTargets(_parameter_0 *ec2.DescribeTrafficMirrorTargetsInput) (_result_0 *ec2.DescribeTrafficMirrorTargetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTrafficMirrorTargetsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorTargetsInput) *ec2.DescribeTrafficMirrorTargetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorTargetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficMirrorTargetsPages provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorTargetsPages(_parameter_0 *ec2.DescribeTrafficMirrorTargetsInput, _parameter_1 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorTargetsInput, func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorTargetsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorTargetsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorTargetsInput, _parameter_2 func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorTargetsInput, func(*ec2.DescribeTrafficMirrorTargetsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTrafficMirrorTargetsRequest provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorTargetsRequest(_parameter_0 *ec2.DescribeTrafficMirrorTargetsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTrafficMirrorTargetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTrafficMirrorTargetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTrafficMirrorTargetsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTrafficMirrorTargetsInput) *ec2.DescribeTrafficMirrorTargetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTrafficMirrorTargetsOutput)
		}
	}

	return r0, r1
}

// DescribeTrafficMirrorTargetsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTrafficMirrorTargetsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTrafficMirrorTargetsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTrafficMirrorTargetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTrafficMirrorTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTrafficMirrorTargetsInput, ...request.Option) *ec2.DescribeTrafficMirrorTargetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTrafficMirrorTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTrafficMirrorTargetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayAttachments provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayAttachments(_parameter_0 *ec2.DescribeTransitGatewayAttachmentsInput) (_result_0 *ec2.DescribeTransitGatewayAttachmentsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewayAttachmentsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayAttachmentsInput) *ec2.DescribeTransitGatewayAttachmentsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayAttachmentsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayAttachmentsPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayAttachmentsPages(_parameter_0 *ec2.DescribeTransitGatewayAttachmentsInput, _parameter_1 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayAttachmentsInput, func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayAttachmentsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayAttachmentsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayAttachmentsInput, _parameter_2 func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, func(*ec2.DescribeTransitGatewayAttachmentsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayAttachmentsRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayAttachmentsRequest(_parameter_0 *ec2.DescribeTransitGatewayAttachmentsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewayAttachmentsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayAttachmentsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewayAttachmentsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayAttachmentsInput) *ec2.DescribeTransitGatewayAttachmentsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewayAttachmentsOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewayAttachmentsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayAttachmentsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayAttachmentsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewayAttachmentsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewayAttachmentsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...request.Option) *ec2.DescribeTransitGatewayAttachmentsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayAttachmentsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayMulticastDomains provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayMulticastDomains(_parameter_0 *ec2.DescribeTransitGatewayMulticastDomainsInput) (_result_0 *ec2.DescribeTransitGatewayMulticastDomainsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewayMulticastDomainsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayMulticastDomainsInput) *ec2.DescribeTransitGatewayMulticastDomainsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayMulticastDomainsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayMulticastDomainsPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayMulticastDomainsPages(_parameter_0 *ec2.DescribeTransitGatewayMulticastDomainsInput, _parameter_1 func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayMulticastDomainsInput, func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayMulticastDomainsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayMulticastDomainsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayMulticastDomainsInput, _parameter_2 func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayMulticastDomainsInput, func(*ec2.DescribeTransitGatewayMulticastDomainsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayMulticastDomainsRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayMulticastDomainsRequest(_parameter_0 *ec2.DescribeTransitGatewayMulticastDomainsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewayMulticastDomainsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayMulticastDomainsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewayMulticastDomainsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayMulticastDomainsInput) *ec2.DescribeTransitGatewayMulticastDomainsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewayMulticastDomainsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayMulticastDomainsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayMulticastDomainsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewayMulticastDomainsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewayMulticastDomainsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayMulticastDomainsInput, ...request.Option) *ec2.DescribeTransitGatewayMulticastDomainsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayMulticastDomainsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayMulticastDomainsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayPeeringAttachments provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayPeeringAttachments(_parameter_0 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (_result_0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayPeeringAttachmentsInput) *ec2.DescribeTransitGatewayPeeringAttachmentsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayPeeringAttachmentsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayPeeringAttachmentsPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayPeeringAttachmentsPages(_parameter_0 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, _parameter_1 func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayPeeringAttachmentsInput, func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayPeeringAttachmentsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayPeeringAttachmentsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, _parameter_2 func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayPeeringAttachmentsInput, func(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayPeeringAttachmentsRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayPeeringAttachmentsRequest(_parameter_0 *ec2.DescribeTransitGatewayPeeringAttachmentsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayPeeringAttachmentsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayPeeringAttachmentsInput) *ec2.DescribeTransitGatewayPeeringAttachmentsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewayPeeringAttachmentsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayPeeringAttachmentsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayPeeringAttachmentsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewayPeeringAttachmentsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayPeeringAttachmentsInput, ...request.Option) *ec2.DescribeTransitGatewayPeeringAttachmentsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayPeeringAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayPeeringAttachmentsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayRouteTables provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayRouteTables(_parameter_0 *ec2.DescribeTransitGatewayRouteTablesInput) (_result_0 *ec2.DescribeTransitGatewayRouteTablesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewayRouteTablesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayRouteTablesInput) *ec2.DescribeTransitGatewayRouteTablesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayRouteTablesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayRouteTablesPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayRouteTablesPages(_parameter_0 *ec2.DescribeTransitGatewayRouteTablesInput, _parameter_1 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayRouteTablesInput, func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayRouteTablesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayRouteTablesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayRouteTablesInput, _parameter_2 func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayRouteTablesInput, func(*ec2.DescribeTransitGatewayRouteTablesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayRouteTablesRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayRouteTablesRequest(_parameter_0 *ec2.DescribeTransitGatewayRouteTablesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewayRouteTablesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayRouteTablesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewayRouteTablesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayRouteTablesInput) *ec2.DescribeTransitGatewayRouteTablesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewayRouteTablesOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewayRouteTablesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayRouteTablesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayRouteTablesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewayRouteTablesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewayRouteTablesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayRouteTablesInput, ...request.Option) *ec2.DescribeTransitGatewayRouteTablesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayRouteTablesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayRouteTablesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayVpcAttachments provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayVpcAttachments(_parameter_0 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (_result_0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) *ec2.DescribeTransitGatewayVpcAttachmentsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewayVpcAttachmentsPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayVpcAttachmentsPages(_parameter_0 *ec2.DescribeTransitGatewayVpcAttachmentsInput, _parameter_1 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayVpcAttachmentsInput, func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayVpcAttachmentsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayVpcAttachmentsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, _parameter_2 func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, func(*ec2.DescribeTransitGatewayVpcAttachmentsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewayVpcAttachmentsRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayVpcAttachmentsRequest(_parameter_0 *ec2.DescribeTransitGatewayVpcAttachmentsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewayVpcAttachmentsInput) *ec2.DescribeTransitGatewayVpcAttachmentsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewayVpcAttachmentsWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewayVpcAttachmentsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewayVpcAttachmentsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewayVpcAttachmentsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, ...request.Option) *ec2.DescribeTransitGatewayVpcAttachmentsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewayVpcAttachmentsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewayVpcAttachmentsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGateways provides a mock function.
func (_m *Mockec2API) DescribeTransitGateways(_parameter_0 *ec2.DescribeTransitGatewaysInput) (_result_0 *ec2.DescribeTransitGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeTransitGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewaysInput) *ec2.DescribeTransitGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransitGatewaysPages provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewaysPages(_parameter_0 *ec2.DescribeTransitGatewaysInput, _parameter_1 func(*ec2.DescribeTransitGatewaysOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewaysInput, func(*ec2.DescribeTransitGatewaysOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewaysPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewaysPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewaysInput, _parameter_2 func(*ec2.DescribeTransitGatewaysOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewaysInput, func(*ec2.DescribeTransitGatewaysOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTransitGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewaysRequest(_parameter_0 *ec2.DescribeTransitGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeTransitGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeTransitGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeTransitGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeTransitGatewaysInput) *ec2.DescribeTransitGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeTransitGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeTransitGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeTransitGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeTransitGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeTransitGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeTransitGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeTransitGatewaysInput, ...request.Option) *ec2.DescribeTransitGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeTransitGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeTransitGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumeAttribute provides a mock function.
func (_m *Mockec2API) DescribeVolumeAttribute(_parameter_0 *ec2.DescribeVolumeAttributeInput) (_result_0 *ec2.DescribeVolumeAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVolumeAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumeAttributeInput) *ec2.DescribeVolumeAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumeAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumeAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumeAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeVolumeAttributeRequest(_parameter_0 *ec2.DescribeVolumeAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVolumeAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumeAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVolumeAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumeAttributeInput) *ec2.DescribeVolumeAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVolumeAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeVolumeAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumeAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumeAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVolumeAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVolumeAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumeAttributeInput, ...request.Option) *ec2.DescribeVolumeAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumeAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumeAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumeStatus provides a mock function.
func (_m *Mockec2API) DescribeVolumeStatus(_parameter_0 *ec2.DescribeVolumeStatusInput) (_result_0 *ec2.DescribeVolumeStatusOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVolumeStatusOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumeStatusInput) *ec2.DescribeVolumeStatusOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumeStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumeStatusInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumeStatusPages provides a mock function.
func (_m *Mockec2API) DescribeVolumeStatusPages(_parameter_0 *ec2.DescribeVolumeStatusInput, _parameter_1 func(*ec2.DescribeVolumeStatusOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumeStatusPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumeStatusPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumeStatusInput, _parameter_2 func(*ec2.DescribeVolumeStatusOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumeStatusInput, func(*ec2.DescribeVolumeStatusOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumeStatusRequest provides a mock function.
func (_m *Mockec2API) DescribeVolumeStatusRequest(_parameter_0 *ec2.DescribeVolumeStatusInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVolumeStatusOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumeStatusInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVolumeStatusOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumeStatusInput) *ec2.DescribeVolumeStatusOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVolumeStatusOutput)
		}
	}

	return r0, r1
}

// DescribeVolumeStatusWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumeStatusWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumeStatusInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVolumeStatusOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVolumeStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumeStatusInput, ...request.Option) *ec2.DescribeVolumeStatusOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumeStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumeStatusInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumes provides a mock function.
func (_m *Mockec2API) DescribeVolumes(_parameter_0 *ec2.DescribeVolumesInput) (_result_0 *ec2.DescribeVolumesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVolumesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput) *ec2.DescribeVolumesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumesModifications provides a mock function.
func (_m *Mockec2API) DescribeVolumesModifications(_parameter_0 *ec2.DescribeVolumesModificationsInput) (_result_0 *ec2.DescribeVolumesModificationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVolumesModificationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesModificationsInput) *ec2.DescribeVolumesModificationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesModificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumesModificationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumesModificationsPages provides a mock function.
func (_m *Mockec2API) DescribeVolumesModificationsPages(_parameter_0 *ec2.DescribeVolumesModificationsInput, _parameter_1 func(*ec2.DescribeVolumesModificationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesModificationsInput, func(*ec2.DescribeVolumesModificationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumesModificationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumesModificationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesModificationsInput, _parameter_2 func(*ec2.DescribeVolumesModificationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesModificationsInput, func(*ec2.DescribeVolumesModificationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumesModificationsRequest provides a mock function.
func (_m *Mockec2API) DescribeVolumesModificationsRequest(_parameter_0 *ec2.DescribeVolumesModificationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVolumesModificationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesModificationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVolumesModificationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumesModificationsInput) *ec2.DescribeVolumesModificationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVolumesModificationsOutput)
		}
	}

	return r0, r1
}

// DescribeVolumesModificationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumesModificationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesModificationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVolumesModificationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVolumesModificationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesModificationsInput, ...request.Option) *ec2.DescribeVolumesModificationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesModificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumesModificationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumesPages provides a mock function.
func (_m *Mockec2API) DescribeVolumesPages(_parameter_0 *ec2.DescribeVolumesInput, _parameter_1 func(*ec2.DescribeVolumesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumesPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesInput, _parameter_2 func(*ec2.DescribeVolumesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, func(*ec2.DescribeVolumesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVolumesRequest provides a mock function.
func (_m *Mockec2API) DescribeVolumesRequest(_parameter_0 *ec2.DescribeVolumesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVolumesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVolumesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVolumesInput) *ec2.DescribeVolumesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVolumesOutput)
		}
	}

	return r0, r1
}

// DescribeVolumesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVolumesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVolumesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVolumesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...request.Option) *ec2.DescribeVolumesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVolumesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVolumesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcAttribute provides a mock function.
func (_m *Mockec2API) DescribeVpcAttribute(_parameter_0 *ec2.DescribeVpcAttributeInput) (_result_0 *ec2.DescribeVpcAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcAttributeInput) *ec2.DescribeVpcAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcAttributeRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcAttributeRequest(_parameter_0 *ec2.DescribeVpcAttributeInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcAttributeInput) *ec2.DescribeVpcAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcAttributeOutput)
		}
	}

	return r0, r1
}

// DescribeVpcAttributeWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcAttributeInput, ...request.Option) *ec2.DescribeVpcAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcClassicLink provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLink(_parameter_0 *ec2.DescribeVpcClassicLinkInput) (_result_0 *ec2.DescribeVpcClassicLinkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcClassicLinkInput) *ec2.DescribeVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcClassicLinkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcClassicLinkDnsSupport provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkDnsSupport(_parameter_0 *ec2.DescribeVpcClassicLinkDnsSupportInput) (_result_0 *ec2.DescribeVpcClassicLinkDnsSupportOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcClassicLinkDnsSupportInput) *ec2.DescribeVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcClassicLinkDnsSupportInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcClassicLinkDnsSupportPages provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkDnsSupportPages(_parameter_0 *ec2.DescribeVpcClassicLinkDnsSupportInput, _parameter_1 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcClassicLinkDnsSupportInput, func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcClassicLinkDnsSupportPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkDnsSupportPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcClassicLinkDnsSupportInput, _parameter_2 func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, func(*ec2.DescribeVpcClassicLinkDnsSupportOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcClassicLinkDnsSupportRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkDnsSupportRequest(_parameter_0 *ec2.DescribeVpcClassicLinkDnsSupportInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcClassicLinkDnsSupportOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcClassicLinkDnsSupportInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcClassicLinkDnsSupportInput) *ec2.DescribeVpcClassicLinkDnsSupportOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
		}
	}

	return r0, r1
}

// DescribeVpcClassicLinkDnsSupportWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkDnsSupportWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcClassicLinkDnsSupportInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcClassicLinkDnsSupportOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, ...request.Option) *ec2.DescribeVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcClassicLinkDnsSupportInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcClassicLinkRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkRequest(_parameter_0 *ec2.DescribeVpcClassicLinkInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcClassicLinkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcClassicLinkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcClassicLinkOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcClassicLinkInput) *ec2.DescribeVpcClassicLinkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcClassicLinkOutput)
		}
	}

	return r0, r1
}

// DescribeVpcClassicLinkWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcClassicLinkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcClassicLinkInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcClassicLinkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcClassicLinkInput, ...request.Option) *ec2.DescribeVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcClassicLinkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointConnectionNotifications provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionNotifications(_parameter_0 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (_result_0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) *ec2.DescribeVpcEndpointConnectionNotificationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointConnectionNotificationsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionNotificationsPages(_parameter_0 *ec2.DescribeVpcEndpointConnectionNotificationsInput, _parameter_1 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionNotificationsInput, func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointConnectionNotificationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionNotificationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, _parameter_2 func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, func(*ec2.DescribeVpcEndpointConnectionNotificationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointConnectionNotificationsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionNotificationsRequest(_parameter_0 *ec2.DescribeVpcEndpointConnectionNotificationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointConnectionNotificationsInput) *ec2.DescribeVpcEndpointConnectionNotificationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointConnectionNotificationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionNotificationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointConnectionNotificationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointConnectionNotificationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, ...request.Option) *ec2.DescribeVpcEndpointConnectionNotificationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointConnectionNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointConnectionNotificationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointConnections provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnections(_parameter_0 *ec2.DescribeVpcEndpointConnectionsInput) (_result_0 *ec2.DescribeVpcEndpointConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionsInput) *ec2.DescribeVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointConnectionsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionsPages(_parameter_0 *ec2.DescribeVpcEndpointConnectionsInput, _parameter_1 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionsInput, func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointConnectionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointConnectionsInput, _parameter_2 func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointConnectionsInput, func(*ec2.DescribeVpcEndpointConnectionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointConnectionsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionsRequest(_parameter_0 *ec2.DescribeVpcEndpointConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointConnectionsInput) *ec2.DescribeVpcEndpointConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointConnectionsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointConnectionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointConnectionsInput, ...request.Option) *ec2.DescribeVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServiceConfigurations provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServiceConfigurations(_parameter_0 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (_result_0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) *ec2.DescribeVpcEndpointServiceConfigurationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServiceConfigurationsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServiceConfigurationsPages(_parameter_0 *ec2.DescribeVpcEndpointServiceConfigurationsInput, _parameter_1 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServiceConfigurationsInput, func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointServiceConfigurationsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServiceConfigurationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, _parameter_2 func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, func(*ec2.DescribeVpcEndpointServiceConfigurationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointServiceConfigurationsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServiceConfigurationsRequest(_parameter_0 *ec2.DescribeVpcEndpointServiceConfigurationsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServiceConfigurationsInput) *ec2.DescribeVpcEndpointServiceConfigurationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointServiceConfigurationsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServiceConfigurationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointServiceConfigurationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...request.Option) *ec2.DescribeVpcEndpointServiceConfigurationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServiceConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServicePermissions provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicePermissions(_parameter_0 *ec2.DescribeVpcEndpointServicePermissionsInput) (_result_0 *ec2.DescribeVpcEndpointServicePermissionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServicePermissionsInput) *ec2.DescribeVpcEndpointServicePermissionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServicePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServicePermissionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServicePermissionsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicePermissionsPages(_parameter_0 *ec2.DescribeVpcEndpointServicePermissionsInput, _parameter_1 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServicePermissionsInput, func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointServicePermissionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicePermissionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointServicePermissionsInput, _parameter_2 func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, func(*ec2.DescribeVpcEndpointServicePermissionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointServicePermissionsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicePermissionsRequest(_parameter_0 *ec2.DescribeVpcEndpointServicePermissionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointServicePermissionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServicePermissionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServicePermissionsInput) *ec2.DescribeVpcEndpointServicePermissionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointServicePermissionsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointServicePermissionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicePermissionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointServicePermissionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointServicePermissionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...request.Option) *ec2.DescribeVpcEndpointServicePermissionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServicePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServices provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServices(_parameter_0 *ec2.DescribeVpcEndpointServicesInput) (_result_0 *ec2.DescribeVpcEndpointServicesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointServicesOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServicesInput) *ec2.DescribeVpcEndpointServicesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServicesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointServicesRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicesRequest(_parameter_0 *ec2.DescribeVpcEndpointServicesInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointServicesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointServicesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointServicesOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointServicesInput) *ec2.DescribeVpcEndpointServicesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointServicesOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointServicesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointServicesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointServicesInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointServicesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointServicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointServicesInput, ...request.Option) *ec2.DescribeVpcEndpointServicesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointServicesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpoints provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpoints(_parameter_0 *ec2.DescribeVpcEndpointsInput) (_result_0 *ec2.DescribeVpcEndpointsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcEndpointsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointsInput) *ec2.DescribeVpcEndpointsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcEndpointsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointsPages(_parameter_0 *ec2.DescribeVpcEndpointsInput, _parameter_1 func(*ec2.DescribeVpcEndpointsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointsInput, func(*ec2.DescribeVpcEndpointsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointsInput, _parameter_2 func(*ec2.DescribeVpcEndpointsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointsInput, func(*ec2.DescribeVpcEndpointsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcEndpointsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointsRequest(_parameter_0 *ec2.DescribeVpcEndpointsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcEndpointsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcEndpointsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcEndpointsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcEndpointsInput) *ec2.DescribeVpcEndpointsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcEndpointsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcEndpointsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcEndpointsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcEndpointsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcEndpointsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcEndpointsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcEndpointsInput, ...request.Option) *ec2.DescribeVpcEndpointsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcEndpointsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcEndpointsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcPeeringConnections provides a mock function.
func (_m *Mockec2API) DescribeVpcPeeringConnections(_parameter_0 *ec2.DescribeVpcPeeringConnectionsInput) (_result_0 *ec2.DescribeVpcPeeringConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcPeeringConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcPeeringConnectionsInput) *ec2.DescribeVpcPeeringConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcPeeringConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcPeeringConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcPeeringConnectionsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcPeeringConnectionsPages(_parameter_0 *ec2.DescribeVpcPeeringConnectionsInput, _parameter_1 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcPeeringConnectionsInput, func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcPeeringConnectionsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcPeeringConnectionsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcPeeringConnectionsInput, _parameter_2 func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, func(*ec2.DescribeVpcPeeringConnectionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcPeeringConnectionsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcPeeringConnectionsRequest(_parameter_0 *ec2.DescribeVpcPeeringConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcPeeringConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcPeeringConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcPeeringConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcPeeringConnectionsInput) *ec2.DescribeVpcPeeringConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcPeeringConnectionsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcPeeringConnectionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcPeeringConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcPeeringConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcPeeringConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcPeeringConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.Option) *ec2.DescribeVpcPeeringConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcPeeringConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcs provides a mock function.
func (_m *Mockec2API) DescribeVpcs(_parameter_0 *ec2.DescribeVpcsInput) (_result_0 *ec2.DescribeVpcsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpcsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcsInput) *ec2.DescribeVpcsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcsPages provides a mock function.
func (_m *Mockec2API) DescribeVpcsPages(_parameter_0 *ec2.DescribeVpcsInput, _parameter_1 func(*ec2.DescribeVpcsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcsInput, func(*ec2.DescribeVpcsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcsPagesWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcsInput, _parameter_2 func(*ec2.DescribeVpcsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, func(*ec2.DescribeVpcsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeVpcsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpcsRequest(_parameter_0 *ec2.DescribeVpcsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpcsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpcsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpcsInput) *ec2.DescribeVpcsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpcsOutput)
		}
	}

	return r0, r1
}

// DescribeVpcsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpcsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpcsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpcsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...request.Option) *ec2.DescribeVpcsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpcsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpcsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpnConnections provides a mock function.
func (_m *Mockec2API) DescribeVpnConnections(_parameter_0 *ec2.DescribeVpnConnectionsInput) (_result_0 *ec2.DescribeVpnConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnConnectionsInput) *ec2.DescribeVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpnConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpnConnectionsRequest provides a mock function.
func (_m *Mockec2API) DescribeVpnConnectionsRequest(_parameter_0 *ec2.DescribeVpnConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpnConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpnConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpnConnectionsInput) *ec2.DescribeVpnConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpnConnectionsOutput)
		}
	}

	return r0, r1
}

// DescribeVpnConnectionsWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpnConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpnConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpnConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpnConnectionsInput, ...request.Option) *ec2.DescribeVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpnConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpnGateways provides a mock function.
func (_m *Mockec2API) DescribeVpnGateways(_parameter_0 *ec2.DescribeVpnGatewaysInput) (_result_0 *ec2.DescribeVpnGatewaysOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DescribeVpnGatewaysOutput
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnGatewaysInput) *ec2.DescribeVpnGatewaysOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpnGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpnGatewaysInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpnGatewaysRequest provides a mock function.
func (_m *Mockec2API) DescribeVpnGatewaysRequest(_parameter_0 *ec2.DescribeVpnGatewaysInput) (_result_0 *request.Request, _result_1 *ec2.DescribeVpnGatewaysOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnGatewaysInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DescribeVpnGatewaysOutput
	if rf, ok := ret.Get(1).(func(*ec2.DescribeVpnGatewaysInput) *ec2.DescribeVpnGatewaysOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DescribeVpnGatewaysOutput)
		}
	}

	return r0, r1
}

// DescribeVpnGatewaysWithContext provides a mock function.
func (_m *Mockec2API) DescribeVpnGatewaysWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpnGatewaysInput, _parameter_2 ...request.Option) (_result_0 *ec2.DescribeVpnGatewaysOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DescribeVpnGatewaysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpnGatewaysInput, ...request.Option) *ec2.DescribeVpnGatewaysOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeVpnGatewaysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DescribeVpnGatewaysInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachClassicLinkVpc provides a mock function.
func (_m *Mockec2API) DetachClassicLinkVpc(_parameter_0 *ec2.DetachClassicLinkVpcInput) (_result_0 *ec2.DetachClassicLinkVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DetachClassicLinkVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.DetachClassicLinkVpcInput) *ec2.DetachClassicLinkVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachClassicLinkVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DetachClassicLinkVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachClassicLinkVpcRequest provides a mock function.
func (_m *Mockec2API) DetachClassicLinkVpcRequest(_parameter_0 *ec2.DetachClassicLinkVpcInput) (_result_0 *request.Request, _result_1 *ec2.DetachClassicLinkVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DetachClassicLinkVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DetachClassicLinkVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.DetachClassicLinkVpcInput) *ec2.DetachClassicLinkVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DetachClassicLinkVpcOutput)
		}
	}

	return r0, r1
}

// DetachClassicLinkVpcWithContext provides a mock function.
func (_m *Mockec2API) DetachClassicLinkVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DetachClassicLinkVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.DetachClassicLinkVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DetachClassicLinkVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DetachClassicLinkVpcInput, ...request.Option) *ec2.DetachClassicLinkVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachClassicLinkVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DetachClassicLinkVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInternetGateway provides a mock function.
func (_m *Mockec2API) DetachInternetGateway(_parameter_0 *ec2.DetachInternetGatewayInput) (_result_0 *ec2.DetachInternetGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DetachInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DetachInternetGatewayInput) *ec2.DetachInternetGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DetachInternetGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInternetGatewayRequest provides a mock function.
func (_m *Mockec2API) DetachInternetGatewayRequest(_parameter_0 *ec2.DetachInternetGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DetachInternetGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DetachInternetGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DetachInternetGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DetachInternetGatewayInput) *ec2.DetachInternetGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DetachInternetGatewayOutput)
		}
	}

	return r0, r1
}

// DetachInternetGatewayWithContext provides a mock function.
func (_m *Mockec2API) DetachInternetGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DetachInternetGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DetachInternetGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DetachInternetGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DetachInternetGatewayInput, ...request.Option) *ec2.DetachInternetGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachInternetGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DetachInternetGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNetworkInterface provides a mock function.
func (_m *Mockec2API) DetachNetworkInterface(_parameter_0 *ec2.DetachNetworkInterfaceInput) (_result_0 *ec2.DetachNetworkInterfaceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DetachNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(*ec2.DetachNetworkInterfaceInput) *ec2.DetachNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DetachNetworkInterfaceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachNetworkInterfaceRequest provides a mock function.
func (_m *Mockec2API) DetachNetworkInterfaceRequest(_parameter_0 *ec2.DetachNetworkInterfaceInput) (_result_0 *request.Request, _result_1 *ec2.DetachNetworkInterfaceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DetachNetworkInterfaceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DetachNetworkInterfaceOutput
	if rf, ok := ret.Get(1).(func(*ec2.DetachNetworkInterfaceInput) *ec2.DetachNetworkInterfaceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DetachNetworkInterfaceOutput)
		}
	}

	return r0, r1
}

// DetachNetworkInterfaceWithContext provides a mock function.
func (_m *Mockec2API) DetachNetworkInterfaceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DetachNetworkInterfaceInput, _parameter_2 ...request.Option) (_result_0 *ec2.DetachNetworkInterfaceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DetachNetworkInterfaceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DetachNetworkInterfaceInput, ...request.Option) *ec2.DetachNetworkInterfaceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachNetworkInterfaceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DetachNetworkInterfaceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolume provides a mock function.
func (_m *Mockec2API) DetachVolume(_parameter_0 *ec2.DetachVolumeInput) (_result_0 *ec2.VolumeAttachment, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.VolumeAttachment
	if rf, ok := ret.Get(0).(func(*ec2.DetachVolumeInput) *ec2.VolumeAttachment); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DetachVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolumeRequest provides a mock function.
func (_m *Mockec2API) DetachVolumeRequest(_parameter_0 *ec2.DetachVolumeInput) (_result_0 *request.Request, _result_1 *ec2.VolumeAttachment) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DetachVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.VolumeAttachment
	if rf, ok := ret.Get(1).(func(*ec2.DetachVolumeInput) *ec2.VolumeAttachment); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.VolumeAttachment)
		}
	}

	return r0, r1
}

// DetachVolumeWithContext provides a mock function.
func (_m *Mockec2API) DetachVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DetachVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.VolumeAttachment, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.VolumeAttachment
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DetachVolumeInput, ...request.Option) *ec2.VolumeAttachment); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DetachVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVpnGateway provides a mock function.
func (_m *Mockec2API) DetachVpnGateway(_parameter_0 *ec2.DetachVpnGatewayInput) (_result_0 *ec2.DetachVpnGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DetachVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.DetachVpnGatewayInput) *ec2.DetachVpnGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DetachVpnGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVpnGatewayRequest provides a mock function.
func (_m *Mockec2API) DetachVpnGatewayRequest(_parameter_0 *ec2.DetachVpnGatewayInput) (_result_0 *request.Request, _result_1 *ec2.DetachVpnGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DetachVpnGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DetachVpnGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.DetachVpnGatewayInput) *ec2.DetachVpnGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DetachVpnGatewayOutput)
		}
	}

	return r0, r1
}

// DetachVpnGatewayWithContext provides a mock function.
func (_m *Mockec2API) DetachVpnGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DetachVpnGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.DetachVpnGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DetachVpnGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DetachVpnGatewayInput, ...request.Option) *ec2.DetachVpnGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DetachVpnGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DetachVpnGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableEbsEncryptionByDefault provides a mock function.
func (_m *Mockec2API) DisableEbsEncryptionByDefault(_parameter_0 *ec2.DisableEbsEncryptionByDefaultInput) (_result_0 *ec2.DisableEbsEncryptionByDefaultOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableEbsEncryptionByDefaultInput) *ec2.DisableEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableEbsEncryptionByDefaultInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableEbsEncryptionByDefaultRequest provides a mock function.
func (_m *Mockec2API) DisableEbsEncryptionByDefaultRequest(_parameter_0 *ec2.DisableEbsEncryptionByDefaultInput) (_result_0 *request.Request, _result_1 *ec2.DisableEbsEncryptionByDefaultOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableEbsEncryptionByDefaultInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableEbsEncryptionByDefaultInput) *ec2.DisableEbsEncryptionByDefaultOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableEbsEncryptionByDefaultOutput)
		}
	}

	return r0, r1
}

// DisableEbsEncryptionByDefaultWithContext provides a mock function.
func (_m *Mockec2API) DisableEbsEncryptionByDefaultWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableEbsEncryptionByDefaultInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableEbsEncryptionByDefaultOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableEbsEncryptionByDefaultInput, ...request.Option) *ec2.DisableEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableEbsEncryptionByDefaultInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableFastSnapshotRestores provides a mock function.
func (_m *Mockec2API) DisableFastSnapshotRestores(_parameter_0 *ec2.DisableFastSnapshotRestoresInput) (_result_0 *ec2.DisableFastSnapshotRestoresOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableFastSnapshotRestoresInput) *ec2.DisableFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableFastSnapshotRestoresInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableFastSnapshotRestoresRequest provides a mock function.
func (_m *Mockec2API) DisableFastSnapshotRestoresRequest(_parameter_0 *ec2.DisableFastSnapshotRestoresInput) (_result_0 *request.Request, _result_1 *ec2.DisableFastSnapshotRestoresOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableFastSnapshotRestoresInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableFastSnapshotRestoresInput) *ec2.DisableFastSnapshotRestoresOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableFastSnapshotRestoresOutput)
		}
	}

	return r0, r1
}

// DisableFastSnapshotRestoresWithContext provides a mock function.
func (_m *Mockec2API) DisableFastSnapshotRestoresWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableFastSnapshotRestoresInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableFastSnapshotRestoresOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableFastSnapshotRestoresInput, ...request.Option) *ec2.DisableFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableFastSnapshotRestoresInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableTransitGatewayRouteTablePropagation provides a mock function.
func (_m *Mockec2API) DisableTransitGatewayRouteTablePropagation(_parameter_0 *ec2.DisableTransitGatewayRouteTablePropagationInput) (_result_0 *ec2.DisableTransitGatewayRouteTablePropagationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableTransitGatewayRouteTablePropagationInput) *ec2.DisableTransitGatewayRouteTablePropagationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableTransitGatewayRouteTablePropagationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableTransitGatewayRouteTablePropagationRequest provides a mock function.
func (_m *Mockec2API) DisableTransitGatewayRouteTablePropagationRequest(_parameter_0 *ec2.DisableTransitGatewayRouteTablePropagationInput) (_result_0 *request.Request, _result_1 *ec2.DisableTransitGatewayRouteTablePropagationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableTransitGatewayRouteTablePropagationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableTransitGatewayRouteTablePropagationInput) *ec2.DisableTransitGatewayRouteTablePropagationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
		}
	}

	return r0, r1
}

// DisableTransitGatewayRouteTablePropagationWithContext provides a mock function.
func (_m *Mockec2API) DisableTransitGatewayRouteTablePropagationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableTransitGatewayRouteTablePropagationInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableTransitGatewayRouteTablePropagationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableTransitGatewayRouteTablePropagationInput, ...request.Option) *ec2.DisableTransitGatewayRouteTablePropagationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableTransitGatewayRouteTablePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableTransitGatewayRouteTablePropagationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVgwRoutePropagation provides a mock function.
func (_m *Mockec2API) DisableVgwRoutePropagation(_parameter_0 *ec2.DisableVgwRoutePropagationInput) (_result_0 *ec2.DisableVgwRoutePropagationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableVgwRoutePropagationOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableVgwRoutePropagationInput) *ec2.DisableVgwRoutePropagationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVgwRoutePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableVgwRoutePropagationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVgwRoutePropagationRequest provides a mock function.
func (_m *Mockec2API) DisableVgwRoutePropagationRequest(_parameter_0 *ec2.DisableVgwRoutePropagationInput) (_result_0 *request.Request, _result_1 *ec2.DisableVgwRoutePropagationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableVgwRoutePropagationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableVgwRoutePropagationOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableVgwRoutePropagationInput) *ec2.DisableVgwRoutePropagationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableVgwRoutePropagationOutput)
		}
	}

	return r0, r1
}

// DisableVgwRoutePropagationWithContext provides a mock function.
func (_m *Mockec2API) DisableVgwRoutePropagationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableVgwRoutePropagationInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableVgwRoutePropagationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableVgwRoutePropagationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableVgwRoutePropagationInput, ...request.Option) *ec2.DisableVgwRoutePropagationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVgwRoutePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableVgwRoutePropagationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVpcClassicLink provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLink(_parameter_0 *ec2.DisableVpcClassicLinkInput) (_result_0 *ec2.DisableVpcClassicLinkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableVpcClassicLinkInput) *ec2.DisableVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableVpcClassicLinkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVpcClassicLinkDnsSupport provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLinkDnsSupport(_parameter_0 *ec2.DisableVpcClassicLinkDnsSupportInput) (_result_0 *ec2.DisableVpcClassicLinkDnsSupportOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisableVpcClassicLinkDnsSupportInput) *ec2.DisableVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisableVpcClassicLinkDnsSupportInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVpcClassicLinkDnsSupportRequest provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLinkDnsSupportRequest(_parameter_0 *ec2.DisableVpcClassicLinkDnsSupportInput) (_result_0 *request.Request, _result_1 *ec2.DisableVpcClassicLinkDnsSupportOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableVpcClassicLinkDnsSupportInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableVpcClassicLinkDnsSupportInput) *ec2.DisableVpcClassicLinkDnsSupportOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableVpcClassicLinkDnsSupportOutput)
		}
	}

	return r0, r1
}

// DisableVpcClassicLinkDnsSupportWithContext provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLinkDnsSupportWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableVpcClassicLinkDnsSupportInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableVpcClassicLinkDnsSupportOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableVpcClassicLinkDnsSupportInput, ...request.Option) *ec2.DisableVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableVpcClassicLinkDnsSupportInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableVpcClassicLinkRequest provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLinkRequest(_parameter_0 *ec2.DisableVpcClassicLinkInput) (_result_0 *request.Request, _result_1 *ec2.DisableVpcClassicLinkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisableVpcClassicLinkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisableVpcClassicLinkOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisableVpcClassicLinkInput) *ec2.DisableVpcClassicLinkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisableVpcClassicLinkOutput)
		}
	}

	return r0, r1
}

// DisableVpcClassicLinkWithContext provides a mock function.
func (_m *Mockec2API) DisableVpcClassicLinkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisableVpcClassicLinkInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisableVpcClassicLinkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisableVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisableVpcClassicLinkInput, ...request.Option) *ec2.DisableVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisableVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisableVpcClassicLinkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAddress provides a mock function.
func (_m *Mockec2API) DisassociateAddress(_parameter_0 *ec2.DisassociateAddressInput) (_result_0 *ec2.DisassociateAddressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateAddressOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateAddressInput) *ec2.DisassociateAddressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateAddressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAddressRequest provides a mock function.
func (_m *Mockec2API) DisassociateAddressRequest(_parameter_0 *ec2.DisassociateAddressInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateAddressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateAddressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateAddressOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateAddressInput) *ec2.DisassociateAddressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateAddressOutput)
		}
	}

	return r0, r1
}

// DisassociateAddressWithContext provides a mock function.
func (_m *Mockec2API) DisassociateAddressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateAddressInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateAddressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateAddressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateAddressInput, ...request.Option) *ec2.DisassociateAddressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateAddressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateClientVpnTargetNetwork provides a mock function.
func (_m *Mockec2API) DisassociateClientVpnTargetNetwork(_parameter_0 *ec2.DisassociateClientVpnTargetNetworkInput) (_result_0 *ec2.DisassociateClientVpnTargetNetworkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateClientVpnTargetNetworkInput) *ec2.DisassociateClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateClientVpnTargetNetworkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateClientVpnTargetNetworkRequest provides a mock function.
func (_m *Mockec2API) DisassociateClientVpnTargetNetworkRequest(_parameter_0 *ec2.DisassociateClientVpnTargetNetworkInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateClientVpnTargetNetworkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateClientVpnTargetNetworkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateClientVpnTargetNetworkInput) *ec2.DisassociateClientVpnTargetNetworkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateClientVpnTargetNetworkOutput)
		}
	}

	return r0, r1
}

// DisassociateClientVpnTargetNetworkWithContext provides a mock function.
func (_m *Mockec2API) DisassociateClientVpnTargetNetworkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateClientVpnTargetNetworkInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateClientVpnTargetNetworkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateClientVpnTargetNetworkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateClientVpnTargetNetworkInput, ...request.Option) *ec2.DisassociateClientVpnTargetNetworkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateClientVpnTargetNetworkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateClientVpnTargetNetworkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateEnclaveCertificateIamRole provides a mock function.
func (_m *Mockec2API) DisassociateEnclaveCertificateIamRole(_parameter_0 *ec2.DisassociateEnclaveCertificateIamRoleInput) (_result_0 *ec2.DisassociateEnclaveCertificateIamRoleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateEnclaveCertificateIamRoleInput) *ec2.DisassociateEnclaveCertificateIamRoleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateEnclaveCertificateIamRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateEnclaveCertificateIamRoleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateEnclaveCertificateIamRoleRequest provides a mock function.
func (_m *Mockec2API) DisassociateEnclaveCertificateIamRoleRequest(_parameter_0 *ec2.DisassociateEnclaveCertificateIamRoleInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateEnclaveCertificateIamRoleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateEnclaveCertificateIamRoleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateEnclaveCertificateIamRoleInput) *ec2.DisassociateEnclaveCertificateIamRoleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateEnclaveCertificateIamRoleOutput)
		}
	}

	return r0, r1
}

// DisassociateEnclaveCertificateIamRoleWithContext provides a mock function.
func (_m *Mockec2API) DisassociateEnclaveCertificateIamRoleWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateEnclaveCertificateIamRoleInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateEnclaveCertificateIamRoleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateEnclaveCertificateIamRoleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateEnclaveCertificateIamRoleInput, ...request.Option) *ec2.DisassociateEnclaveCertificateIamRoleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateEnclaveCertificateIamRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateEnclaveCertificateIamRoleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateIamInstanceProfile provides a mock function.
func (_m *Mockec2API) DisassociateIamInstanceProfile(_parameter_0 *ec2.DisassociateIamInstanceProfileInput) (_result_0 *ec2.DisassociateIamInstanceProfileOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateIamInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateIamInstanceProfileInput) *ec2.DisassociateIamInstanceProfileOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateIamInstanceProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateIamInstanceProfileInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateIamInstanceProfileRequest provides a mock function.
func (_m *Mockec2API) DisassociateIamInstanceProfileRequest(_parameter_0 *ec2.DisassociateIamInstanceProfileInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateIamInstanceProfileOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateIamInstanceProfileInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateIamInstanceProfileOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateIamInstanceProfileInput) *ec2.DisassociateIamInstanceProfileOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateIamInstanceProfileOutput)
		}
	}

	return r0, r1
}

// DisassociateIamInstanceProfileWithContext provides a mock function.
func (_m *Mockec2API) DisassociateIamInstanceProfileWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateIamInstanceProfileInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateIamInstanceProfileOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateIamInstanceProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateIamInstanceProfileInput, ...request.Option) *ec2.DisassociateIamInstanceProfileOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateIamInstanceProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateIamInstanceProfileInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRouteTable provides a mock function.
func (_m *Mockec2API) DisassociateRouteTable(_parameter_0 *ec2.DisassociateRouteTableInput) (_result_0 *ec2.DisassociateRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateRouteTableInput) *ec2.DisassociateRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRouteTableRequest provides a mock function.
func (_m *Mockec2API) DisassociateRouteTableRequest(_parameter_0 *ec2.DisassociateRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateRouteTableInput) *ec2.DisassociateRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateRouteTableOutput)
		}
	}

	return r0, r1
}

// DisassociateRouteTableWithContext provides a mock function.
func (_m *Mockec2API) DisassociateRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateRouteTableInput, ...request.Option) *ec2.DisassociateRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSubnetCidrBlock provides a mock function.
func (_m *Mockec2API) DisassociateSubnetCidrBlock(_parameter_0 *ec2.DisassociateSubnetCidrBlockInput) (_result_0 *ec2.DisassociateSubnetCidrBlockOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateSubnetCidrBlockInput) *ec2.DisassociateSubnetCidrBlockOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateSubnetCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateSubnetCidrBlockInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSubnetCidrBlockRequest provides a mock function.
func (_m *Mockec2API) DisassociateSubnetCidrBlockRequest(_parameter_0 *ec2.DisassociateSubnetCidrBlockInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateSubnetCidrBlockOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateSubnetCidrBlockInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateSubnetCidrBlockInput) *ec2.DisassociateSubnetCidrBlockOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateSubnetCidrBlockOutput)
		}
	}

	return r0, r1
}

// DisassociateSubnetCidrBlockWithContext provides a mock function.
func (_m *Mockec2API) DisassociateSubnetCidrBlockWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateSubnetCidrBlockInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateSubnetCidrBlockOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateSubnetCidrBlockOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateSubnetCidrBlockInput, ...request.Option) *ec2.DisassociateSubnetCidrBlockOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateSubnetCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateSubnetCidrBlockInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTransitGatewayMulticastDomain provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayMulticastDomain(_parameter_0 *ec2.DisassociateTransitGatewayMulticastDomainInput) (_result_0 *ec2.DisassociateTransitGatewayMulticastDomainOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateTransitGatewayMulticastDomainInput) *ec2.DisassociateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateTransitGatewayMulticastDomainInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTransitGatewayMulticastDomainRequest provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayMulticastDomainRequest(_parameter_0 *ec2.DisassociateTransitGatewayMulticastDomainInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateTransitGatewayMulticastDomainOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateTransitGatewayMulticastDomainInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateTransitGatewayMulticastDomainInput) *ec2.DisassociateTransitGatewayMulticastDomainOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
		}
	}

	return r0, r1
}

// DisassociateTransitGatewayMulticastDomainWithContext provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayMulticastDomainWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateTransitGatewayMulticastDomainInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateTransitGatewayMulticastDomainOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateTransitGatewayMulticastDomainOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateTransitGatewayMulticastDomainInput, ...request.Option) *ec2.DisassociateTransitGatewayMulticastDomainOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateTransitGatewayMulticastDomainOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateTransitGatewayMulticastDomainInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTransitGatewayRouteTable provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayRouteTable(_parameter_0 *ec2.DisassociateTransitGatewayRouteTableInput) (_result_0 *ec2.DisassociateTransitGatewayRouteTableOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateTransitGatewayRouteTableInput) *ec2.DisassociateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateTransitGatewayRouteTableInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTransitGatewayRouteTableRequest provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayRouteTableRequest(_parameter_0 *ec2.DisassociateTransitGatewayRouteTableInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateTransitGatewayRouteTableOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateTransitGatewayRouteTableInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateTransitGatewayRouteTableInput) *ec2.DisassociateTransitGatewayRouteTableOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateTransitGatewayRouteTableOutput)
		}
	}

	return r0, r1
}

// DisassociateTransitGatewayRouteTableWithContext provides a mock function.
func (_m *Mockec2API) DisassociateTransitGatewayRouteTableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateTransitGatewayRouteTableInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateTransitGatewayRouteTableOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateTransitGatewayRouteTableOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateTransitGatewayRouteTableInput, ...request.Option) *ec2.DisassociateTransitGatewayRouteTableOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateTransitGatewayRouteTableOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateTransitGatewayRouteTableInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVpcCidrBlock provides a mock function.
func (_m *Mockec2API) DisassociateVpcCidrBlock(_parameter_0 *ec2.DisassociateVpcCidrBlockInput) (_result_0 *ec2.DisassociateVpcCidrBlockOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.DisassociateVpcCidrBlockOutput
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateVpcCidrBlockInput) *ec2.DisassociateVpcCidrBlockOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateVpcCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateVpcCidrBlockInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVpcCidrBlockRequest provides a mock function.
func (_m *Mockec2API) DisassociateVpcCidrBlockRequest(_parameter_0 *ec2.DisassociateVpcCidrBlockInput) (_result_0 *request.Request, _result_1 *ec2.DisassociateVpcCidrBlockOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.DisassociateVpcCidrBlockInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.DisassociateVpcCidrBlockOutput
	if rf, ok := ret.Get(1).(func(*ec2.DisassociateVpcCidrBlockInput) *ec2.DisassociateVpcCidrBlockOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.DisassociateVpcCidrBlockOutput)
		}
	}

	return r0, r1
}

// DisassociateVpcCidrBlockWithContext provides a mock function.
func (_m *Mockec2API) DisassociateVpcCidrBlockWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DisassociateVpcCidrBlockInput, _parameter_2 ...request.Option) (_result_0 *ec2.DisassociateVpcCidrBlockOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.DisassociateVpcCidrBlockOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DisassociateVpcCidrBlockInput, ...request.Option) *ec2.DisassociateVpcCidrBlockOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DisassociateVpcCidrBlockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.DisassociateVpcCidrBlockInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableEbsEncryptionByDefault provides a mock function.
func (_m *Mockec2API) EnableEbsEncryptionByDefault(_parameter_0 *ec2.EnableEbsEncryptionByDefaultInput) (_result_0 *ec2.EnableEbsEncryptionByDefaultOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableEbsEncryptionByDefaultInput) *ec2.EnableEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableEbsEncryptionByDefaultInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableEbsEncryptionByDefaultRequest provides a mock function.
func (_m *Mockec2API) EnableEbsEncryptionByDefaultRequest(_parameter_0 *ec2.EnableEbsEncryptionByDefaultInput) (_result_0 *request.Request, _result_1 *ec2.EnableEbsEncryptionByDefaultOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableEbsEncryptionByDefaultInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableEbsEncryptionByDefaultInput) *ec2.EnableEbsEncryptionByDefaultOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableEbsEncryptionByDefaultOutput)
		}
	}

	return r0, r1
}

// EnableEbsEncryptionByDefaultWithContext provides a mock function.
func (_m *Mockec2API) EnableEbsEncryptionByDefaultWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableEbsEncryptionByDefaultInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableEbsEncryptionByDefaultOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableEbsEncryptionByDefaultInput, ...request.Option) *ec2.EnableEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableEbsEncryptionByDefaultInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableFastSnapshotRestores provides a mock function.
func (_m *Mockec2API) EnableFastSnapshotRestores(_parameter_0 *ec2.EnableFastSnapshotRestoresInput) (_result_0 *ec2.EnableFastSnapshotRestoresOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableFastSnapshotRestoresInput) *ec2.EnableFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableFastSnapshotRestoresInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableFastSnapshotRestoresRequest provides a mock function.
func (_m *Mockec2API) EnableFastSnapshotRestoresRequest(_parameter_0 *ec2.EnableFastSnapshotRestoresInput) (_result_0 *request.Request, _result_1 *ec2.EnableFastSnapshotRestoresOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableFastSnapshotRestoresInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableFastSnapshotRestoresInput) *ec2.EnableFastSnapshotRestoresOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableFastSnapshotRestoresOutput)
		}
	}

	return r0, r1
}

// EnableFastSnapshotRestoresWithContext provides a mock function.
func (_m *Mockec2API) EnableFastSnapshotRestoresWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableFastSnapshotRestoresInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableFastSnapshotRestoresOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableFastSnapshotRestoresOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableFastSnapshotRestoresInput, ...request.Option) *ec2.EnableFastSnapshotRestoresOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableFastSnapshotRestoresOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableFastSnapshotRestoresInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableTransitGatewayRouteTablePropagation provides a mock function.
func (_m *Mockec2API) EnableTransitGatewayRouteTablePropagation(_parameter_0 *ec2.EnableTransitGatewayRouteTablePropagationInput) (_result_0 *ec2.EnableTransitGatewayRouteTablePropagationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableTransitGatewayRouteTablePropagationInput) *ec2.EnableTransitGatewayRouteTablePropagationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableTransitGatewayRouteTablePropagationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableTransitGatewayRouteTablePropagationRequest provides a mock function.
func (_m *Mockec2API) EnableTransitGatewayRouteTablePropagationRequest(_parameter_0 *ec2.EnableTransitGatewayRouteTablePropagationInput) (_result_0 *request.Request, _result_1 *ec2.EnableTransitGatewayRouteTablePropagationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableTransitGatewayRouteTablePropagationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableTransitGatewayRouteTablePropagationInput) *ec2.EnableTransitGatewayRouteTablePropagationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
		}
	}

	return r0, r1
}

// EnableTransitGatewayRouteTablePropagationWithContext provides a mock function.
func (_m *Mockec2API) EnableTransitGatewayRouteTablePropagationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableTransitGatewayRouteTablePropagationInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableTransitGatewayRouteTablePropagationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableTransitGatewayRouteTablePropagationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableTransitGatewayRouteTablePropagationInput, ...request.Option) *ec2.EnableTransitGatewayRouteTablePropagationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableTransitGatewayRouteTablePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableTransitGatewayRouteTablePropagationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVgwRoutePropagation provides a mock function.
func (_m *Mockec2API) EnableVgwRoutePropagation(_parameter_0 *ec2.EnableVgwRoutePropagationInput) (_result_0 *ec2.EnableVgwRoutePropagationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableVgwRoutePropagationOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableVgwRoutePropagationInput) *ec2.EnableVgwRoutePropagationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVgwRoutePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableVgwRoutePropagationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVgwRoutePropagationRequest provides a mock function.
func (_m *Mockec2API) EnableVgwRoutePropagationRequest(_parameter_0 *ec2.EnableVgwRoutePropagationInput) (_result_0 *request.Request, _result_1 *ec2.EnableVgwRoutePropagationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableVgwRoutePropagationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableVgwRoutePropagationOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableVgwRoutePropagationInput) *ec2.EnableVgwRoutePropagationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableVgwRoutePropagationOutput)
		}
	}

	return r0, r1
}

// EnableVgwRoutePropagationWithContext provides a mock function.
func (_m *Mockec2API) EnableVgwRoutePropagationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableVgwRoutePropagationInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableVgwRoutePropagationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableVgwRoutePropagationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableVgwRoutePropagationInput, ...request.Option) *ec2.EnableVgwRoutePropagationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVgwRoutePropagationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableVgwRoutePropagationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVolumeIO provides a mock function.
func (_m *Mockec2API) EnableVolumeIO(_parameter_0 *ec2.EnableVolumeIOInput) (_result_0 *ec2.EnableVolumeIOOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableVolumeIOOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableVolumeIOInput) *ec2.EnableVolumeIOOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVolumeIOOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableVolumeIOInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVolumeIORequest provides a mock function.
func (_m *Mockec2API) EnableVolumeIORequest(_parameter_0 *ec2.EnableVolumeIOInput) (_result_0 *request.Request, _result_1 *ec2.EnableVolumeIOOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableVolumeIOInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableVolumeIOOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableVolumeIOInput) *ec2.EnableVolumeIOOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableVolumeIOOutput)
		}
	}

	return r0, r1
}

// EnableVolumeIOWithContext provides a mock function.
func (_m *Mockec2API) EnableVolumeIOWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableVolumeIOInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableVolumeIOOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableVolumeIOOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableVolumeIOInput, ...request.Option) *ec2.EnableVolumeIOOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVolumeIOOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableVolumeIOInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVpcClassicLink provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLink(_parameter_0 *ec2.EnableVpcClassicLinkInput) (_result_0 *ec2.EnableVpcClassicLinkOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableVpcClassicLinkInput) *ec2.EnableVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableVpcClassicLinkInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVpcClassicLinkDnsSupport provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLinkDnsSupport(_parameter_0 *ec2.EnableVpcClassicLinkDnsSupportInput) (_result_0 *ec2.EnableVpcClassicLinkDnsSupportOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.EnableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(*ec2.EnableVpcClassicLinkDnsSupportInput) *ec2.EnableVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EnableVpcClassicLinkDnsSupportInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVpcClassicLinkDnsSupportRequest provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLinkDnsSupportRequest(_parameter_0 *ec2.EnableVpcClassicLinkDnsSupportInput) (_result_0 *request.Request, _result_1 *ec2.EnableVpcClassicLinkDnsSupportOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableVpcClassicLinkDnsSupportInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableVpcClassicLinkDnsSupportInput) *ec2.EnableVpcClassicLinkDnsSupportOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableVpcClassicLinkDnsSupportOutput)
		}
	}

	return r0, r1
}

// EnableVpcClassicLinkDnsSupportWithContext provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLinkDnsSupportWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableVpcClassicLinkDnsSupportInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableVpcClassicLinkDnsSupportOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableVpcClassicLinkDnsSupportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableVpcClassicLinkDnsSupportInput, ...request.Option) *ec2.EnableVpcClassicLinkDnsSupportOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVpcClassicLinkDnsSupportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableVpcClassicLinkDnsSupportInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableVpcClassicLinkRequest provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLinkRequest(_parameter_0 *ec2.EnableVpcClassicLinkInput) (_result_0 *request.Request, _result_1 *ec2.EnableVpcClassicLinkOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.EnableVpcClassicLinkInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.EnableVpcClassicLinkOutput
	if rf, ok := ret.Get(1).(func(*ec2.EnableVpcClassicLinkInput) *ec2.EnableVpcClassicLinkOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.EnableVpcClassicLinkOutput)
		}
	}

	return r0, r1
}

// EnableVpcClassicLinkWithContext provides a mock function.
func (_m *Mockec2API) EnableVpcClassicLinkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.EnableVpcClassicLinkInput, _parameter_2 ...request.Option) (_result_0 *ec2.EnableVpcClassicLinkOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.EnableVpcClassicLinkOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.EnableVpcClassicLinkInput, ...request.Option) *ec2.EnableVpcClassicLinkOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EnableVpcClassicLinkOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.EnableVpcClassicLinkInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportClientVpnClientCertificateRevocationList provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientCertificateRevocationList(_parameter_0 *ec2.ExportClientVpnClientCertificateRevocationListInput) (_result_0 *ec2.ExportClientVpnClientCertificateRevocationListOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(0).(func(*ec2.ExportClientVpnClientCertificateRevocationListInput) *ec2.ExportClientVpnClientCertificateRevocationListOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ExportClientVpnClientCertificateRevocationListInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportClientVpnClientCertificateRevocationListRequest provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientCertificateRevocationListRequest(_parameter_0 *ec2.ExportClientVpnClientCertificateRevocationListInput) (_result_0 *request.Request, _result_1 *ec2.ExportClientVpnClientCertificateRevocationListOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ExportClientVpnClientCertificateRevocationListInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(1).(func(*ec2.ExportClientVpnClientCertificateRevocationListInput) *ec2.ExportClientVpnClientCertificateRevocationListOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
		}
	}

	return r0, r1
}

// ExportClientVpnClientCertificateRevocationListWithContext provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientCertificateRevocationListWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ExportClientVpnClientCertificateRevocationListInput, _parameter_2 ...request.Option) (_result_0 *ec2.ExportClientVpnClientCertificateRevocationListOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ExportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ExportClientVpnClientCertificateRevocationListInput, ...request.Option) *ec2.ExportClientVpnClientCertificateRevocationListOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportClientVpnClientCertificateRevocationListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ExportClientVpnClientCertificateRevocationListInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportClientVpnClientConfiguration provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientConfiguration(_parameter_0 *ec2.ExportClientVpnClientConfigurationInput) (_result_0 *ec2.ExportClientVpnClientConfigurationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ExportClientVpnClientConfigurationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ExportClientVpnClientConfigurationInput) *ec2.ExportClientVpnClientConfigurationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportClientVpnClientConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ExportClientVpnClientConfigurationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportClientVpnClientConfigurationRequest provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientConfigurationRequest(_parameter_0 *ec2.ExportClientVpnClientConfigurationInput) (_result_0 *request.Request, _result_1 *ec2.ExportClientVpnClientConfigurationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ExportClientVpnClientConfigurationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ExportClientVpnClientConfigurationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ExportClientVpnClientConfigurationInput) *ec2.ExportClientVpnClientConfigurationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ExportClientVpnClientConfigurationOutput)
		}
	}

	return r0, r1
}

// ExportClientVpnClientConfigurationWithContext provides a mock function.
func (_m *Mockec2API) ExportClientVpnClientConfigurationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ExportClientVpnClientConfigurationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ExportClientVpnClientConfigurationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ExportClientVpnClientConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ExportClientVpnClientConfigurationInput, ...request.Option) *ec2.ExportClientVpnClientConfigurationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportClientVpnClientConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ExportClientVpnClientConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportImage provides a mock function.
func (_m *Mockec2API) ExportImage(_parameter_0 *ec2.ExportImageInput) (_result_0 *ec2.ExportImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ExportImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.ExportImageInput) *ec2.ExportImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ExportImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportImageRequest provides a mock function.
func (_m *Mockec2API) ExportImageRequest(_parameter_0 *ec2.ExportImageInput) (_result_0 *request.Request, _result_1 *ec2.ExportImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ExportImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ExportImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.ExportImageInput) *ec2.ExportImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ExportImageOutput)
		}
	}

	return r0, r1
}

// ExportImageWithContext provides a mock function.
func (_m *Mockec2API) ExportImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ExportImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.ExportImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ExportImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ExportImageInput, ...request.Option) *ec2.ExportImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ExportImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTransitGatewayRoutes provides a mock function.
func (_m *Mockec2API) ExportTransitGatewayRoutes(_parameter_0 *ec2.ExportTransitGatewayRoutesInput) (_result_0 *ec2.ExportTransitGatewayRoutesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ExportTransitGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(*ec2.ExportTransitGatewayRoutesInput) *ec2.ExportTransitGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportTransitGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ExportTransitGatewayRoutesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportTransitGatewayRoutesRequest provides a mock function.
func (_m *Mockec2API) ExportTransitGatewayRoutesRequest(_parameter_0 *ec2.ExportTransitGatewayRoutesInput) (_result_0 *request.Request, _result_1 *ec2.ExportTransitGatewayRoutesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ExportTransitGatewayRoutesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ExportTransitGatewayRoutesOutput
	if rf, ok := ret.Get(1).(func(*ec2.ExportTransitGatewayRoutesInput) *ec2.ExportTransitGatewayRoutesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ExportTransitGatewayRoutesOutput)
		}
	}

	return r0, r1
}

// ExportTransitGatewayRoutesWithContext provides a mock function.
func (_m *Mockec2API) ExportTransitGatewayRoutesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ExportTransitGatewayRoutesInput, _parameter_2 ...request.Option) (_result_0 *ec2.ExportTransitGatewayRoutesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ExportTransitGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ExportTransitGatewayRoutesInput, ...request.Option) *ec2.ExportTransitGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ExportTransitGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ExportTransitGatewayRoutesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociatedEnclaveCertificateIamRoles provides a mock function.
func (_m *Mockec2API) GetAssociatedEnclaveCertificateIamRoles(_parameter_0 *ec2.GetAssociatedEnclaveCertificateIamRolesInput) (_result_0 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetAssociatedEnclaveCertificateIamRolesInput) *ec2.GetAssociatedEnclaveCertificateIamRolesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetAssociatedEnclaveCertificateIamRolesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetAssociatedEnclaveCertificateIamRolesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociatedEnclaveCertificateIamRolesRequest provides a mock function.
func (_m *Mockec2API) GetAssociatedEnclaveCertificateIamRolesRequest(_parameter_0 *ec2.GetAssociatedEnclaveCertificateIamRolesInput) (_result_0 *request.Request, _result_1 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetAssociatedEnclaveCertificateIamRolesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetAssociatedEnclaveCertificateIamRolesInput) *ec2.GetAssociatedEnclaveCertificateIamRolesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetAssociatedEnclaveCertificateIamRolesOutput)
		}
	}

	return r0, r1
}

// GetAssociatedEnclaveCertificateIamRolesWithContext provides a mock function.
func (_m *Mockec2API) GetAssociatedEnclaveCertificateIamRolesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetAssociatedEnclaveCertificateIamRolesInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetAssociatedEnclaveCertificateIamRolesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetAssociatedEnclaveCertificateIamRolesInput, ...request.Option) *ec2.GetAssociatedEnclaveCertificateIamRolesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetAssociatedEnclaveCertificateIamRolesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetAssociatedEnclaveCertificateIamRolesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociatedIpv6PoolCidrs provides a mock function.
func (_m *Mockec2API) GetAssociatedIpv6PoolCidrs(_parameter_0 *ec2.GetAssociatedIpv6PoolCidrsInput) (_result_0 *ec2.GetAssociatedIpv6PoolCidrsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetAssociatedIpv6PoolCidrsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetAssociatedIpv6PoolCidrsInput) *ec2.GetAssociatedIpv6PoolCidrsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetAssociatedIpv6PoolCidrsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetAssociatedIpv6PoolCidrsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociatedIpv6PoolCidrsPages provides a mock function.
func (_m *Mockec2API) GetAssociatedIpv6PoolCidrsPages(_parameter_0 *ec2.GetAssociatedIpv6PoolCidrsInput, _parameter_1 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetAssociatedIpv6PoolCidrsInput, func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAssociatedIpv6PoolCidrsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetAssociatedIpv6PoolCidrsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetAssociatedIpv6PoolCidrsInput, _parameter_2 func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetAssociatedIpv6PoolCidrsInput, func(*ec2.GetAssociatedIpv6PoolCidrsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAssociatedIpv6PoolCidrsRequest provides a mock function.
func (_m *Mockec2API) GetAssociatedIpv6PoolCidrsRequest(_parameter_0 *ec2.GetAssociatedIpv6PoolCidrsInput) (_result_0 *request.Request, _result_1 *ec2.GetAssociatedIpv6PoolCidrsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetAssociatedIpv6PoolCidrsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetAssociatedIpv6PoolCidrsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetAssociatedIpv6PoolCidrsInput) *ec2.GetAssociatedIpv6PoolCidrsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetAssociatedIpv6PoolCidrsOutput)
		}
	}

	return r0, r1
}

// GetAssociatedIpv6PoolCidrsWithContext provides a mock function.
func (_m *Mockec2API) GetAssociatedIpv6PoolCidrsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetAssociatedIpv6PoolCidrsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetAssociatedIpv6PoolCidrsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetAssociatedIpv6PoolCidrsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetAssociatedIpv6PoolCidrsInput, ...request.Option) *ec2.GetAssociatedIpv6PoolCidrsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetAssociatedIpv6PoolCidrsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetAssociatedIpv6PoolCidrsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityReservationUsage provides a mock function.
func (_m *Mockec2API) GetCapacityReservationUsage(_parameter_0 *ec2.GetCapacityReservationUsageInput) (_result_0 *ec2.GetCapacityReservationUsageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetCapacityReservationUsageOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetCapacityReservationUsageInput) *ec2.GetCapacityReservationUsageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetCapacityReservationUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetCapacityReservationUsageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityReservationUsageRequest provides a mock function.
func (_m *Mockec2API) GetCapacityReservationUsageRequest(_parameter_0 *ec2.GetCapacityReservationUsageInput) (_result_0 *request.Request, _result_1 *ec2.GetCapacityReservationUsageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetCapacityReservationUsageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetCapacityReservationUsageOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetCapacityReservationUsageInput) *ec2.GetCapacityReservationUsageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetCapacityReservationUsageOutput)
		}
	}

	return r0, r1
}

// GetCapacityReservationUsageWithContext provides a mock function.
func (_m *Mockec2API) GetCapacityReservationUsageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetCapacityReservationUsageInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetCapacityReservationUsageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetCapacityReservationUsageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetCapacityReservationUsageInput, ...request.Option) *ec2.GetCapacityReservationUsageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetCapacityReservationUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetCapacityReservationUsageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoipPoolUsage provides a mock function.
func (_m *Mockec2API) GetCoipPoolUsage(_parameter_0 *ec2.GetCoipPoolUsageInput) (_result_0 *ec2.GetCoipPoolUsageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetCoipPoolUsageOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetCoipPoolUsageInput) *ec2.GetCoipPoolUsageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetCoipPoolUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetCoipPoolUsageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoipPoolUsageRequest provides a mock function.
func (_m *Mockec2API) GetCoipPoolUsageRequest(_parameter_0 *ec2.GetCoipPoolUsageInput) (_result_0 *request.Request, _result_1 *ec2.GetCoipPoolUsageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetCoipPoolUsageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetCoipPoolUsageOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetCoipPoolUsageInput) *ec2.GetCoipPoolUsageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetCoipPoolUsageOutput)
		}
	}

	return r0, r1
}

// GetCoipPoolUsageWithContext provides a mock function.
func (_m *Mockec2API) GetCoipPoolUsageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetCoipPoolUsageInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetCoipPoolUsageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetCoipPoolUsageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetCoipPoolUsageInput, ...request.Option) *ec2.GetCoipPoolUsageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetCoipPoolUsageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetCoipPoolUsageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleOutput provides a mock function.
func (_m *Mockec2API) GetConsoleOutput(_parameter_0 *ec2.GetConsoleOutputInput) (_result_0 *ec2.GetConsoleOutputOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetConsoleOutputOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetConsoleOutputInput) *ec2.GetConsoleOutputOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetConsoleOutputOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetConsoleOutputInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleOutputRequest provides a mock function.
func (_m *Mockec2API) GetConsoleOutputRequest(_parameter_0 *ec2.GetConsoleOutputInput) (_result_0 *request.Request, _result_1 *ec2.GetConsoleOutputOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetConsoleOutputInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetConsoleOutputOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetConsoleOutputInput) *ec2.GetConsoleOutputOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetConsoleOutputOutput)
		}
	}

	return r0, r1
}

// GetConsoleOutputWithContext provides a mock function.
func (_m *Mockec2API) GetConsoleOutputWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetConsoleOutputInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetConsoleOutputOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetConsoleOutputOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetConsoleOutputInput, ...request.Option) *ec2.GetConsoleOutputOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetConsoleOutputOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetConsoleOutputInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleScreenshot provides a mock function.
func (_m *Mockec2API) GetConsoleScreenshot(_parameter_0 *ec2.GetConsoleScreenshotInput) (_result_0 *ec2.GetConsoleScreenshotOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetConsoleScreenshotOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetConsoleScreenshotInput) *ec2.GetConsoleScreenshotOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetConsoleScreenshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetConsoleScreenshotInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleScreenshotRequest provides a mock function.
func (_m *Mockec2API) GetConsoleScreenshotRequest(_parameter_0 *ec2.GetConsoleScreenshotInput) (_result_0 *request.Request, _result_1 *ec2.GetConsoleScreenshotOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetConsoleScreenshotInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetConsoleScreenshotOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetConsoleScreenshotInput) *ec2.GetConsoleScreenshotOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetConsoleScreenshotOutput)
		}
	}

	return r0, r1
}

// GetConsoleScreenshotWithContext provides a mock function.
func (_m *Mockec2API) GetConsoleScreenshotWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetConsoleScreenshotInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetConsoleScreenshotOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetConsoleScreenshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetConsoleScreenshotInput, ...request.Option) *ec2.GetConsoleScreenshotOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetConsoleScreenshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetConsoleScreenshotInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultCreditSpecification provides a mock function.
func (_m *Mockec2API) GetDefaultCreditSpecification(_parameter_0 *ec2.GetDefaultCreditSpecificationInput) (_result_0 *ec2.GetDefaultCreditSpecificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetDefaultCreditSpecificationInput) *ec2.GetDefaultCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetDefaultCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetDefaultCreditSpecificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultCreditSpecificationRequest provides a mock function.
func (_m *Mockec2API) GetDefaultCreditSpecificationRequest(_parameter_0 *ec2.GetDefaultCreditSpecificationInput) (_result_0 *request.Request, _result_1 *ec2.GetDefaultCreditSpecificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetDefaultCreditSpecificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetDefaultCreditSpecificationInput) *ec2.GetDefaultCreditSpecificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetDefaultCreditSpecificationOutput)
		}
	}

	return r0, r1
}

// GetDefaultCreditSpecificationWithContext provides a mock function.
func (_m *Mockec2API) GetDefaultCreditSpecificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetDefaultCreditSpecificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetDefaultCreditSpecificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetDefaultCreditSpecificationInput, ...request.Option) *ec2.GetDefaultCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetDefaultCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetDefaultCreditSpecificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEbsDefaultKmsKeyId provides a mock function.
func (_m *Mockec2API) GetEbsDefaultKmsKeyId(_parameter_0 *ec2.GetEbsDefaultKmsKeyIdInput) (_result_0 *ec2.GetEbsDefaultKmsKeyIdOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetEbsDefaultKmsKeyIdInput) *ec2.GetEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetEbsDefaultKmsKeyIdInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEbsDefaultKmsKeyIdRequest provides a mock function.
func (_m *Mockec2API) GetEbsDefaultKmsKeyIdRequest(_parameter_0 *ec2.GetEbsDefaultKmsKeyIdInput) (_result_0 *request.Request, _result_1 *ec2.GetEbsDefaultKmsKeyIdOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetEbsDefaultKmsKeyIdInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetEbsDefaultKmsKeyIdInput) *ec2.GetEbsDefaultKmsKeyIdOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetEbsDefaultKmsKeyIdOutput)
		}
	}

	return r0, r1
}

// GetEbsDefaultKmsKeyIdWithContext provides a mock function.
func (_m *Mockec2API) GetEbsDefaultKmsKeyIdWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetEbsDefaultKmsKeyIdInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetEbsDefaultKmsKeyIdOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetEbsDefaultKmsKeyIdInput, ...request.Option) *ec2.GetEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetEbsDefaultKmsKeyIdInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEbsEncryptionByDefault provides a mock function.
func (_m *Mockec2API) GetEbsEncryptionByDefault(_parameter_0 *ec2.GetEbsEncryptionByDefaultInput) (_result_0 *ec2.GetEbsEncryptionByDefaultOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetEbsEncryptionByDefaultInput) *ec2.GetEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetEbsEncryptionByDefaultInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEbsEncryptionByDefaultRequest provides a mock function.
func (_m *Mockec2API) GetEbsEncryptionByDefaultRequest(_parameter_0 *ec2.GetEbsEncryptionByDefaultInput) (_result_0 *request.Request, _result_1 *ec2.GetEbsEncryptionByDefaultOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetEbsEncryptionByDefaultInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetEbsEncryptionByDefaultInput) *ec2.GetEbsEncryptionByDefaultOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetEbsEncryptionByDefaultOutput)
		}
	}

	return r0, r1
}

// GetEbsEncryptionByDefaultWithContext provides a mock function.
func (_m *Mockec2API) GetEbsEncryptionByDefaultWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetEbsEncryptionByDefaultInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetEbsEncryptionByDefaultOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetEbsEncryptionByDefaultOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetEbsEncryptionByDefaultInput, ...request.Option) *ec2.GetEbsEncryptionByDefaultOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetEbsEncryptionByDefaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetEbsEncryptionByDefaultInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsForCapacityReservation provides a mock function.
func (_m *Mockec2API) GetGroupsForCapacityReservation(_parameter_0 *ec2.GetGroupsForCapacityReservationInput) (_result_0 *ec2.GetGroupsForCapacityReservationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetGroupsForCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetGroupsForCapacityReservationInput) *ec2.GetGroupsForCapacityReservationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetGroupsForCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetGroupsForCapacityReservationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsForCapacityReservationPages provides a mock function.
func (_m *Mockec2API) GetGroupsForCapacityReservationPages(_parameter_0 *ec2.GetGroupsForCapacityReservationInput, _parameter_1 func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetGroupsForCapacityReservationInput, func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupsForCapacityReservationPagesWithContext provides a mock function.
func (_m *Mockec2API) GetGroupsForCapacityReservationPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetGroupsForCapacityReservationInput, _parameter_2 func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetGroupsForCapacityReservationInput, func(*ec2.GetGroupsForCapacityReservationOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupsForCapacityReservationRequest provides a mock function.
func (_m *Mockec2API) GetGroupsForCapacityReservationRequest(_parameter_0 *ec2.GetGroupsForCapacityReservationInput) (_result_0 *request.Request, _result_1 *ec2.GetGroupsForCapacityReservationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetGroupsForCapacityReservationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetGroupsForCapacityReservationOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetGroupsForCapacityReservationInput) *ec2.GetGroupsForCapacityReservationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetGroupsForCapacityReservationOutput)
		}
	}

	return r0, r1
}

// GetGroupsForCapacityReservationWithContext provides a mock function.
func (_m *Mockec2API) GetGroupsForCapacityReservationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetGroupsForCapacityReservationInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetGroupsForCapacityReservationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetGroupsForCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetGroupsForCapacityReservationInput, ...request.Option) *ec2.GetGroupsForCapacityReservationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetGroupsForCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetGroupsForCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostReservationPurchasePreview provides a mock function.
func (_m *Mockec2API) GetHostReservationPurchasePreview(_parameter_0 *ec2.GetHostReservationPurchasePreviewInput) (_result_0 *ec2.GetHostReservationPurchasePreviewOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetHostReservationPurchasePreviewOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetHostReservationPurchasePreviewInput) *ec2.GetHostReservationPurchasePreviewOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetHostReservationPurchasePreviewOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetHostReservationPurchasePreviewInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostReservationPurchasePreviewRequest provides a mock function.
func (_m *Mockec2API) GetHostReservationPurchasePreviewRequest(_parameter_0 *ec2.GetHostReservationPurchasePreviewInput) (_result_0 *request.Request, _result_1 *ec2.GetHostReservationPurchasePreviewOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetHostReservationPurchasePreviewInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetHostReservationPurchasePreviewOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetHostReservationPurchasePreviewInput) *ec2.GetHostReservationPurchasePreviewOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetHostReservationPurchasePreviewOutput)
		}
	}

	return r0, r1
}

// GetHostReservationPurchasePreviewWithContext provides a mock function.
func (_m *Mockec2API) GetHostReservationPurchasePreviewWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetHostReservationPurchasePreviewInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetHostReservationPurchasePreviewOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetHostReservationPurchasePreviewOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetHostReservationPurchasePreviewInput, ...request.Option) *ec2.GetHostReservationPurchasePreviewOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetHostReservationPurchasePreviewOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetHostReservationPurchasePreviewInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchTemplateData provides a mock function.
func (_m *Mockec2API) GetLaunchTemplateData(_parameter_0 *ec2.GetLaunchTemplateDataInput) (_result_0 *ec2.GetLaunchTemplateDataOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetLaunchTemplateDataOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetLaunchTemplateDataInput) *ec2.GetLaunchTemplateDataOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetLaunchTemplateDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetLaunchTemplateDataInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchTemplateDataRequest provides a mock function.
func (_m *Mockec2API) GetLaunchTemplateDataRequest(_parameter_0 *ec2.GetLaunchTemplateDataInput) (_result_0 *request.Request, _result_1 *ec2.GetLaunchTemplateDataOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetLaunchTemplateDataInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetLaunchTemplateDataOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetLaunchTemplateDataInput) *ec2.GetLaunchTemplateDataOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetLaunchTemplateDataOutput)
		}
	}

	return r0, r1
}

// GetLaunchTemplateDataWithContext provides a mock function.
func (_m *Mockec2API) GetLaunchTemplateDataWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetLaunchTemplateDataInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetLaunchTemplateDataOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetLaunchTemplateDataOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetLaunchTemplateDataInput, ...request.Option) *ec2.GetLaunchTemplateDataOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetLaunchTemplateDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetLaunchTemplateDataInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedPrefixListAssociations provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListAssociations(_parameter_0 *ec2.GetManagedPrefixListAssociationsInput) (_result_0 *ec2.GetManagedPrefixListAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetManagedPrefixListAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListAssociationsInput) *ec2.GetManagedPrefixListAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetManagedPrefixListAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetManagedPrefixListAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedPrefixListAssociationsPages provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListAssociationsPages(_parameter_0 *ec2.GetManagedPrefixListAssociationsInput, _parameter_1 func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListAssociationsInput, func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManagedPrefixListAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetManagedPrefixListAssociationsInput, _parameter_2 func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetManagedPrefixListAssociationsInput, func(*ec2.GetManagedPrefixListAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManagedPrefixListAssociationsRequest provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListAssociationsRequest(_parameter_0 *ec2.GetManagedPrefixListAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.GetManagedPrefixListAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetManagedPrefixListAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetManagedPrefixListAssociationsInput) *ec2.GetManagedPrefixListAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetManagedPrefixListAssociationsOutput)
		}
	}

	return r0, r1
}

// GetManagedPrefixListAssociationsWithContext provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetManagedPrefixListAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetManagedPrefixListAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetManagedPrefixListAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetManagedPrefixListAssociationsInput, ...request.Option) *ec2.GetManagedPrefixListAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetManagedPrefixListAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetManagedPrefixListAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedPrefixListEntries provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListEntries(_parameter_0 *ec2.GetManagedPrefixListEntriesInput) (_result_0 *ec2.GetManagedPrefixListEntriesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetManagedPrefixListEntriesOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListEntriesInput) *ec2.GetManagedPrefixListEntriesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetManagedPrefixListEntriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetManagedPrefixListEntriesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedPrefixListEntriesPages provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListEntriesPages(_parameter_0 *ec2.GetManagedPrefixListEntriesInput, _parameter_1 func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListEntriesInput, func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManagedPrefixListEntriesPagesWithContext provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListEntriesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetManagedPrefixListEntriesInput, _parameter_2 func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetManagedPrefixListEntriesInput, func(*ec2.GetManagedPrefixListEntriesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManagedPrefixListEntriesRequest provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListEntriesRequest(_parameter_0 *ec2.GetManagedPrefixListEntriesInput) (_result_0 *request.Request, _result_1 *ec2.GetManagedPrefixListEntriesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetManagedPrefixListEntriesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetManagedPrefixListEntriesOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetManagedPrefixListEntriesInput) *ec2.GetManagedPrefixListEntriesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetManagedPrefixListEntriesOutput)
		}
	}

	return r0, r1
}

// GetManagedPrefixListEntriesWithContext provides a mock function.
func (_m *Mockec2API) GetManagedPrefixListEntriesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetManagedPrefixListEntriesInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetManagedPrefixListEntriesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetManagedPrefixListEntriesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetManagedPrefixListEntriesInput, ...request.Option) *ec2.GetManagedPrefixListEntriesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetManagedPrefixListEntriesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetManagedPrefixListEntriesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordData provides a mock function.
func (_m *Mockec2API) GetPasswordData(_parameter_0 *ec2.GetPasswordDataInput) (_result_0 *ec2.GetPasswordDataOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetPasswordDataOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetPasswordDataInput) *ec2.GetPasswordDataOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetPasswordDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetPasswordDataInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPasswordDataRequest provides a mock function.
func (_m *Mockec2API) GetPasswordDataRequest(_parameter_0 *ec2.GetPasswordDataInput) (_result_0 *request.Request, _result_1 *ec2.GetPasswordDataOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetPasswordDataInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetPasswordDataOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetPasswordDataInput) *ec2.GetPasswordDataOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetPasswordDataOutput)
		}
	}

	return r0, r1
}

// GetPasswordDataWithContext provides a mock function.
func (_m *Mockec2API) GetPasswordDataWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetPasswordDataInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetPasswordDataOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetPasswordDataOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetPasswordDataInput, ...request.Option) *ec2.GetPasswordDataOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetPasswordDataOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetPasswordDataInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservedInstancesExchangeQuote provides a mock function.
func (_m *Mockec2API) GetReservedInstancesExchangeQuote(_parameter_0 *ec2.GetReservedInstancesExchangeQuoteInput) (_result_0 *ec2.GetReservedInstancesExchangeQuoteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetReservedInstancesExchangeQuoteInput) *ec2.GetReservedInstancesExchangeQuoteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetReservedInstancesExchangeQuoteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetReservedInstancesExchangeQuoteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservedInstancesExchangeQuoteRequest provides a mock function.
func (_m *Mockec2API) GetReservedInstancesExchangeQuoteRequest(_parameter_0 *ec2.GetReservedInstancesExchangeQuoteInput) (_result_0 *request.Request, _result_1 *ec2.GetReservedInstancesExchangeQuoteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetReservedInstancesExchangeQuoteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetReservedInstancesExchangeQuoteInput) *ec2.GetReservedInstancesExchangeQuoteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetReservedInstancesExchangeQuoteOutput)
		}
	}

	return r0, r1
}

// GetReservedInstancesExchangeQuoteWithContext provides a mock function.
func (_m *Mockec2API) GetReservedInstancesExchangeQuoteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetReservedInstancesExchangeQuoteInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetReservedInstancesExchangeQuoteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetReservedInstancesExchangeQuoteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetReservedInstancesExchangeQuoteInput, ...request.Option) *ec2.GetReservedInstancesExchangeQuoteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetReservedInstancesExchangeQuoteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetReservedInstancesExchangeQuoteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayAttachmentPropagations provides a mock function.
func (_m *Mockec2API) GetTransitGatewayAttachmentPropagations(_parameter_0 *ec2.GetTransitGatewayAttachmentPropagationsInput) (_result_0 *ec2.GetTransitGatewayAttachmentPropagationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayAttachmentPropagationsInput) *ec2.GetTransitGatewayAttachmentPropagationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayAttachmentPropagationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayAttachmentPropagationsPages provides a mock function.
func (_m *Mockec2API) GetTransitGatewayAttachmentPropagationsPages(_parameter_0 *ec2.GetTransitGatewayAttachmentPropagationsInput, _parameter_1 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayAttachmentPropagationsInput, func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayAttachmentPropagationsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayAttachmentPropagationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayAttachmentPropagationsInput, _parameter_2 func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, func(*ec2.GetTransitGatewayAttachmentPropagationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayAttachmentPropagationsRequest provides a mock function.
func (_m *Mockec2API) GetTransitGatewayAttachmentPropagationsRequest(_parameter_0 *ec2.GetTransitGatewayAttachmentPropagationsInput) (_result_0 *request.Request, _result_1 *ec2.GetTransitGatewayAttachmentPropagationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayAttachmentPropagationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayAttachmentPropagationsInput) *ec2.GetTransitGatewayAttachmentPropagationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
		}
	}

	return r0, r1
}

// GetTransitGatewayAttachmentPropagationsWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayAttachmentPropagationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayAttachmentPropagationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetTransitGatewayAttachmentPropagationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetTransitGatewayAttachmentPropagationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, ...request.Option) *ec2.GetTransitGatewayAttachmentPropagationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayAttachmentPropagationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetTransitGatewayAttachmentPropagationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayMulticastDomainAssociations provides a mock function.
func (_m *Mockec2API) GetTransitGatewayMulticastDomainAssociations(_parameter_0 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (_result_0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayMulticastDomainAssociationsInput) *ec2.GetTransitGatewayMulticastDomainAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayMulticastDomainAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayMulticastDomainAssociationsPages provides a mock function.
func (_m *Mockec2API) GetTransitGatewayMulticastDomainAssociationsPages(_parameter_0 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, _parameter_1 func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayMulticastDomainAssociationsInput, func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayMulticastDomainAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayMulticastDomainAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, _parameter_2 func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayMulticastDomainAssociationsInput, func(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayMulticastDomainAssociationsRequest provides a mock function.
func (_m *Mockec2API) GetTransitGatewayMulticastDomainAssociationsRequest(_parameter_0 *ec2.GetTransitGatewayMulticastDomainAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayMulticastDomainAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayMulticastDomainAssociationsInput) *ec2.GetTransitGatewayMulticastDomainAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
		}
	}

	return r0, r1
}

// GetTransitGatewayMulticastDomainAssociationsWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayMulticastDomainAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayMulticastDomainAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetTransitGatewayMulticastDomainAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayMulticastDomainAssociationsInput, ...request.Option) *ec2.GetTransitGatewayMulticastDomainAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayMulticastDomainAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetTransitGatewayMulticastDomainAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayPrefixListReferences provides a mock function.
func (_m *Mockec2API) GetTransitGatewayPrefixListReferences(_parameter_0 *ec2.GetTransitGatewayPrefixListReferencesInput) (_result_0 *ec2.GetTransitGatewayPrefixListReferencesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetTransitGatewayPrefixListReferencesOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayPrefixListReferencesInput) *ec2.GetTransitGatewayPrefixListReferencesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayPrefixListReferencesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayPrefixListReferencesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayPrefixListReferencesPages provides a mock function.
func (_m *Mockec2API) GetTransitGatewayPrefixListReferencesPages(_parameter_0 *ec2.GetTransitGatewayPrefixListReferencesInput, _parameter_1 func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayPrefixListReferencesInput, func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayPrefixListReferencesPagesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayPrefixListReferencesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayPrefixListReferencesInput, _parameter_2 func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayPrefixListReferencesInput, func(*ec2.GetTransitGatewayPrefixListReferencesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayPrefixListReferencesRequest provides a mock function.
func (_m *Mockec2API) GetTransitGatewayPrefixListReferencesRequest(_parameter_0 *ec2.GetTransitGatewayPrefixListReferencesInput) (_result_0 *request.Request, _result_1 *ec2.GetTransitGatewayPrefixListReferencesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayPrefixListReferencesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetTransitGatewayPrefixListReferencesOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayPrefixListReferencesInput) *ec2.GetTransitGatewayPrefixListReferencesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetTransitGatewayPrefixListReferencesOutput)
		}
	}

	return r0, r1
}

// GetTransitGatewayPrefixListReferencesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayPrefixListReferencesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayPrefixListReferencesInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetTransitGatewayPrefixListReferencesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetTransitGatewayPrefixListReferencesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayPrefixListReferencesInput, ...request.Option) *ec2.GetTransitGatewayPrefixListReferencesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayPrefixListReferencesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetTransitGatewayPrefixListReferencesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRouteTableAssociations provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTableAssociations(_parameter_0 *ec2.GetTransitGatewayRouteTableAssociationsInput) (_result_0 *ec2.GetTransitGatewayRouteTableAssociationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTableAssociationsInput) *ec2.GetTransitGatewayRouteTableAssociationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayRouteTableAssociationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRouteTableAssociationsPages provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTableAssociationsPages(_parameter_0 *ec2.GetTransitGatewayRouteTableAssociationsInput, _parameter_1 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTableAssociationsInput, func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayRouteTableAssociationsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTableAssociationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayRouteTableAssociationsInput, _parameter_2 func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, func(*ec2.GetTransitGatewayRouteTableAssociationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayRouteTableAssociationsRequest provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTableAssociationsRequest(_parameter_0 *ec2.GetTransitGatewayRouteTableAssociationsInput) (_result_0 *request.Request, _result_1 *ec2.GetTransitGatewayRouteTableAssociationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTableAssociationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayRouteTableAssociationsInput) *ec2.GetTransitGatewayRouteTableAssociationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
		}
	}

	return r0, r1
}

// GetTransitGatewayRouteTableAssociationsWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTableAssociationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayRouteTableAssociationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetTransitGatewayRouteTableAssociationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetTransitGatewayRouteTableAssociationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, ...request.Option) *ec2.GetTransitGatewayRouteTableAssociationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayRouteTableAssociationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetTransitGatewayRouteTableAssociationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRouteTablePropagations provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTablePropagations(_parameter_0 *ec2.GetTransitGatewayRouteTablePropagationsInput) (_result_0 *ec2.GetTransitGatewayRouteTablePropagationsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTablePropagationsInput) *ec2.GetTransitGatewayRouteTablePropagationsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayRouteTablePropagationsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRouteTablePropagationsPages provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTablePropagationsPages(_parameter_0 *ec2.GetTransitGatewayRouteTablePropagationsInput, _parameter_1 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTablePropagationsInput, func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayRouteTablePropagationsPagesWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTablePropagationsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayRouteTablePropagationsInput, _parameter_2 func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, func(*ec2.GetTransitGatewayRouteTablePropagationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransitGatewayRouteTablePropagationsRequest provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTablePropagationsRequest(_parameter_0 *ec2.GetTransitGatewayRouteTablePropagationsInput) (_result_0 *request.Request, _result_1 *ec2.GetTransitGatewayRouteTablePropagationsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.GetTransitGatewayRouteTablePropagationsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	if rf, ok := ret.Get(1).(func(*ec2.GetTransitGatewayRouteTablePropagationsInput) *ec2.GetTransitGatewayRouteTablePropagationsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
		}
	}

	return r0, r1
}

// GetTransitGatewayRouteTablePropagationsWithContext provides a mock function.
func (_m *Mockec2API) GetTransitGatewayRouteTablePropagationsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetTransitGatewayRouteTablePropagationsInput, _parameter_2 ...request.Option) (_result_0 *ec2.GetTransitGatewayRouteTablePropagationsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.GetTransitGatewayRouteTablePropagationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, ...request.Option) *ec2.GetTransitGatewayRouteTablePropagationsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.GetTransitGatewayRouteTablePropagationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.GetTransitGatewayRouteTablePropagationsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportClientVpnClientCertificateRevocationList provides a mock function.
func (_m *Mockec2API) ImportClientVpnClientCertificateRevocationList(_parameter_0 *ec2.ImportClientVpnClientCertificateRevocationListInput) (_result_0 *ec2.ImportClientVpnClientCertificateRevocationListOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportClientVpnClientCertificateRevocationListInput) *ec2.ImportClientVpnClientCertificateRevocationListOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportClientVpnClientCertificateRevocationListInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportClientVpnClientCertificateRevocationListRequest provides a mock function.
func (_m *Mockec2API) ImportClientVpnClientCertificateRevocationListRequest(_parameter_0 *ec2.ImportClientVpnClientCertificateRevocationListInput) (_result_0 *request.Request, _result_1 *ec2.ImportClientVpnClientCertificateRevocationListOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportClientVpnClientCertificateRevocationListInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportClientVpnClientCertificateRevocationListInput) *ec2.ImportClientVpnClientCertificateRevocationListOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
		}
	}

	return r0, r1
}

// ImportClientVpnClientCertificateRevocationListWithContext provides a mock function.
func (_m *Mockec2API) ImportClientVpnClientCertificateRevocationListWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportClientVpnClientCertificateRevocationListInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportClientVpnClientCertificateRevocationListOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportClientVpnClientCertificateRevocationListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportClientVpnClientCertificateRevocationListInput, ...request.Option) *ec2.ImportClientVpnClientCertificateRevocationListOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportClientVpnClientCertificateRevocationListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportClientVpnClientCertificateRevocationListInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportImage provides a mock function.
func (_m *Mockec2API) ImportImage(_parameter_0 *ec2.ImportImageInput) (_result_0 *ec2.ImportImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportImageInput) *ec2.ImportImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportImageRequest provides a mock function.
func (_m *Mockec2API) ImportImageRequest(_parameter_0 *ec2.ImportImageInput) (_result_0 *request.Request, _result_1 *ec2.ImportImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportImageInput) *ec2.ImportImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportImageOutput)
		}
	}

	return r0, r1
}

// ImportImageWithContext provides a mock function.
func (_m *Mockec2API) ImportImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportImageInput, ...request.Option) *ec2.ImportImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportInstance provides a mock function.
func (_m *Mockec2API) ImportInstance(_parameter_0 *ec2.ImportInstanceInput) (_result_0 *ec2.ImportInstanceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportInstanceOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportInstanceInput) *ec2.ImportInstanceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportInstanceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportInstanceRequest provides a mock function.
func (_m *Mockec2API) ImportInstanceRequest(_parameter_0 *ec2.ImportInstanceInput) (_result_0 *request.Request, _result_1 *ec2.ImportInstanceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportInstanceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportInstanceOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportInstanceInput) *ec2.ImportInstanceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportInstanceOutput)
		}
	}

	return r0, r1
}

// ImportInstanceWithContext provides a mock function.
func (_m *Mockec2API) ImportInstanceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportInstanceInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportInstanceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportInstanceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportInstanceInput, ...request.Option) *ec2.ImportInstanceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportInstanceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKeyPair provides a mock function.
func (_m *Mockec2API) ImportKeyPair(_parameter_0 *ec2.ImportKeyPairInput) (_result_0 *ec2.ImportKeyPairOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportKeyPairOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportKeyPairInput) *ec2.ImportKeyPairOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportKeyPairInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKeyPairRequest provides a mock function.
func (_m *Mockec2API) ImportKeyPairRequest(_parameter_0 *ec2.ImportKeyPairInput) (_result_0 *request.Request, _result_1 *ec2.ImportKeyPairOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportKeyPairInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportKeyPairOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportKeyPairInput) *ec2.ImportKeyPairOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportKeyPairOutput)
		}
	}

	return r0, r1
}

// ImportKeyPairWithContext provides a mock function.
func (_m *Mockec2API) ImportKeyPairWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportKeyPairInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportKeyPairOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportKeyPairOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportKeyPairInput, ...request.Option) *ec2.ImportKeyPairOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportKeyPairOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportKeyPairInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSnapshot provides a mock function.
func (_m *Mockec2API) ImportSnapshot(_parameter_0 *ec2.ImportSnapshotInput) (_result_0 *ec2.ImportSnapshotOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportSnapshotOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportSnapshotInput) *ec2.ImportSnapshotOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportSnapshotInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportSnapshotRequest provides a mock function.
func (_m *Mockec2API) ImportSnapshotRequest(_parameter_0 *ec2.ImportSnapshotInput) (_result_0 *request.Request, _result_1 *ec2.ImportSnapshotOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportSnapshotInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportSnapshotOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportSnapshotInput) *ec2.ImportSnapshotOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportSnapshotOutput)
		}
	}

	return r0, r1
}

// ImportSnapshotWithContext provides a mock function.
func (_m *Mockec2API) ImportSnapshotWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportSnapshotInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportSnapshotOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportSnapshotOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportSnapshotInput, ...request.Option) *ec2.ImportSnapshotOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportSnapshotOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportSnapshotInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportVolume provides a mock function.
func (_m *Mockec2API) ImportVolume(_parameter_0 *ec2.ImportVolumeInput) (_result_0 *ec2.ImportVolumeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ImportVolumeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ImportVolumeInput) *ec2.ImportVolumeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ImportVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportVolumeRequest provides a mock function.
func (_m *Mockec2API) ImportVolumeRequest(_parameter_0 *ec2.ImportVolumeInput) (_result_0 *request.Request, _result_1 *ec2.ImportVolumeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ImportVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ImportVolumeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ImportVolumeInput) *ec2.ImportVolumeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ImportVolumeOutput)
		}
	}

	return r0, r1
}

// ImportVolumeWithContext provides a mock function.
func (_m *Mockec2API) ImportVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ImportVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ImportVolumeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ImportVolumeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ImportVolumeInput, ...request.Option) *ec2.ImportVolumeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ImportVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ImportVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAvailabilityZoneGroup provides a mock function.
func (_m *Mockec2API) ModifyAvailabilityZoneGroup(_parameter_0 *ec2.ModifyAvailabilityZoneGroupInput) (_result_0 *ec2.ModifyAvailabilityZoneGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyAvailabilityZoneGroupOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyAvailabilityZoneGroupInput) *ec2.ModifyAvailabilityZoneGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyAvailabilityZoneGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyAvailabilityZoneGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAvailabilityZoneGroupRequest provides a mock function.
func (_m *Mockec2API) ModifyAvailabilityZoneGroupRequest(_parameter_0 *ec2.ModifyAvailabilityZoneGroupInput) (_result_0 *request.Request, _result_1 *ec2.ModifyAvailabilityZoneGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyAvailabilityZoneGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyAvailabilityZoneGroupOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyAvailabilityZoneGroupInput) *ec2.ModifyAvailabilityZoneGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyAvailabilityZoneGroupOutput)
		}
	}

	return r0, r1
}

// ModifyAvailabilityZoneGroupWithContext provides a mock function.
func (_m *Mockec2API) ModifyAvailabilityZoneGroupWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyAvailabilityZoneGroupInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyAvailabilityZoneGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyAvailabilityZoneGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyAvailabilityZoneGroupInput, ...request.Option) *ec2.ModifyAvailabilityZoneGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyAvailabilityZoneGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyAvailabilityZoneGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCapacityReservation provides a mock function.
func (_m *Mockec2API) ModifyCapacityReservation(_parameter_0 *ec2.ModifyCapacityReservationInput) (_result_0 *ec2.ModifyCapacityReservationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyCapacityReservationInput) *ec2.ModifyCapacityReservationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyCapacityReservationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCapacityReservationRequest provides a mock function.
func (_m *Mockec2API) ModifyCapacityReservationRequest(_parameter_0 *ec2.ModifyCapacityReservationInput) (_result_0 *request.Request, _result_1 *ec2.ModifyCapacityReservationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyCapacityReservationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyCapacityReservationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyCapacityReservationInput) *ec2.ModifyCapacityReservationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyCapacityReservationOutput)
		}
	}

	return r0, r1
}

// ModifyCapacityReservationWithContext provides a mock function.
func (_m *Mockec2API) ModifyCapacityReservationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyCapacityReservationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyCapacityReservationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyCapacityReservationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyCapacityReservationInput, ...request.Option) *ec2.ModifyCapacityReservationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyCapacityReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyCapacityReservationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyClientVpnEndpoint provides a mock function.
func (_m *Mockec2API) ModifyClientVpnEndpoint(_parameter_0 *ec2.ModifyClientVpnEndpointInput) (_result_0 *ec2.ModifyClientVpnEndpointOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyClientVpnEndpointInput) *ec2.ModifyClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyClientVpnEndpointInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyClientVpnEndpointRequest provides a mock function.
func (_m *Mockec2API) ModifyClientVpnEndpointRequest(_parameter_0 *ec2.ModifyClientVpnEndpointInput) (_result_0 *request.Request, _result_1 *ec2.ModifyClientVpnEndpointOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyClientVpnEndpointInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyClientVpnEndpointOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyClientVpnEndpointInput) *ec2.ModifyClientVpnEndpointOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyClientVpnEndpointOutput)
		}
	}

	return r0, r1
}

// ModifyClientVpnEndpointWithContext provides a mock function.
func (_m *Mockec2API) ModifyClientVpnEndpointWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyClientVpnEndpointInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyClientVpnEndpointOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyClientVpnEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyClientVpnEndpointInput, ...request.Option) *ec2.ModifyClientVpnEndpointOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyClientVpnEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyClientVpnEndpointInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDefaultCreditSpecification provides a mock function.
func (_m *Mockec2API) ModifyDefaultCreditSpecification(_parameter_0 *ec2.ModifyDefaultCreditSpecificationInput) (_result_0 *ec2.ModifyDefaultCreditSpecificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyDefaultCreditSpecificationInput) *ec2.ModifyDefaultCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyDefaultCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyDefaultCreditSpecificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDefaultCreditSpecificationRequest provides a mock function.
func (_m *Mockec2API) ModifyDefaultCreditSpecificationRequest(_parameter_0 *ec2.ModifyDefaultCreditSpecificationInput) (_result_0 *request.Request, _result_1 *ec2.ModifyDefaultCreditSpecificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyDefaultCreditSpecificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyDefaultCreditSpecificationInput) *ec2.ModifyDefaultCreditSpecificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyDefaultCreditSpecificationOutput)
		}
	}

	return r0, r1
}

// ModifyDefaultCreditSpecificationWithContext provides a mock function.
func (_m *Mockec2API) ModifyDefaultCreditSpecificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyDefaultCreditSpecificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyDefaultCreditSpecificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyDefaultCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyDefaultCreditSpecificationInput, ...request.Option) *ec2.ModifyDefaultCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyDefaultCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyDefaultCreditSpecificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEbsDefaultKmsKeyId provides a mock function.
func (_m *Mockec2API) ModifyEbsDefaultKmsKeyId(_parameter_0 *ec2.ModifyEbsDefaultKmsKeyIdInput) (_result_0 *ec2.ModifyEbsDefaultKmsKeyIdOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyEbsDefaultKmsKeyIdInput) *ec2.ModifyEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyEbsDefaultKmsKeyIdInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEbsDefaultKmsKeyIdRequest provides a mock function.
func (_m *Mockec2API) ModifyEbsDefaultKmsKeyIdRequest(_parameter_0 *ec2.ModifyEbsDefaultKmsKeyIdInput) (_result_0 *request.Request, _result_1 *ec2.ModifyEbsDefaultKmsKeyIdOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyEbsDefaultKmsKeyIdInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyEbsDefaultKmsKeyIdInput) *ec2.ModifyEbsDefaultKmsKeyIdOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
		}
	}

	return r0, r1
}

// ModifyEbsDefaultKmsKeyIdWithContext provides a mock function.
func (_m *Mockec2API) ModifyEbsDefaultKmsKeyIdWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyEbsDefaultKmsKeyIdInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyEbsDefaultKmsKeyIdOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyEbsDefaultKmsKeyIdInput, ...request.Option) *ec2.ModifyEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyEbsDefaultKmsKeyIdInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFleet provides a mock function.
func (_m *Mockec2API) ModifyFleet(_parameter_0 *ec2.ModifyFleetInput) (_result_0 *ec2.ModifyFleetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyFleetOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyFleetInput) *ec2.ModifyFleetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyFleetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFleetRequest provides a mock function.
func (_m *Mockec2API) ModifyFleetRequest(_parameter_0 *ec2.ModifyFleetInput) (_result_0 *request.Request, _result_1 *ec2.ModifyFleetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyFleetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyFleetOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyFleetInput) *ec2.ModifyFleetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyFleetOutput)
		}
	}

	return r0, r1
}

// ModifyFleetWithContext provides a mock function.
func (_m *Mockec2API) ModifyFleetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyFleetInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyFleetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyFleetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyFleetInput, ...request.Option) *ec2.ModifyFleetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyFleetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFpgaImageAttribute provides a mock function.
func (_m *Mockec2API) ModifyFpgaImageAttribute(_parameter_0 *ec2.ModifyFpgaImageAttributeInput) (_result_0 *ec2.ModifyFpgaImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyFpgaImageAttributeInput) *ec2.ModifyFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyFpgaImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyFpgaImageAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyFpgaImageAttributeRequest(_parameter_0 *ec2.ModifyFpgaImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyFpgaImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyFpgaImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyFpgaImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyFpgaImageAttributeInput) *ec2.ModifyFpgaImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyFpgaImageAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyFpgaImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyFpgaImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyFpgaImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyFpgaImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyFpgaImageAttributeInput, ...request.Option) *ec2.ModifyFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyFpgaImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyHosts provides a mock function.
func (_m *Mockec2API) ModifyHosts(_parameter_0 *ec2.ModifyHostsInput) (_result_0 *ec2.ModifyHostsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyHostsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyHostsInput) *ec2.ModifyHostsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyHostsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyHostsRequest provides a mock function.
func (_m *Mockec2API) ModifyHostsRequest(_parameter_0 *ec2.ModifyHostsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyHostsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyHostsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyHostsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyHostsInput) *ec2.ModifyHostsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyHostsOutput)
		}
	}

	return r0, r1
}

// ModifyHostsWithContext provides a mock function.
func (_m *Mockec2API) ModifyHostsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyHostsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyHostsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyHostsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyHostsInput, ...request.Option) *ec2.ModifyHostsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyHostsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyIdFormat provides a mock function.
func (_m *Mockec2API) ModifyIdFormat(_parameter_0 *ec2.ModifyIdFormatInput) (_result_0 *ec2.ModifyIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyIdFormatInput) *ec2.ModifyIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyIdFormatRequest provides a mock function.
func (_m *Mockec2API) ModifyIdFormatRequest(_parameter_0 *ec2.ModifyIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.ModifyIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyIdFormatInput) *ec2.ModifyIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyIdFormatOutput)
		}
	}

	return r0, r1
}

// ModifyIdFormatWithContext provides a mock function.
func (_m *Mockec2API) ModifyIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyIdFormatInput, ...request.Option) *ec2.ModifyIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyIdentityIdFormat provides a mock function.
func (_m *Mockec2API) ModifyIdentityIdFormat(_parameter_0 *ec2.ModifyIdentityIdFormatInput) (_result_0 *ec2.ModifyIdentityIdFormatOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyIdentityIdFormatOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyIdentityIdFormatInput) *ec2.ModifyIdentityIdFormatOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyIdentityIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyIdentityIdFormatInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyIdentityIdFormatRequest provides a mock function.
func (_m *Mockec2API) ModifyIdentityIdFormatRequest(_parameter_0 *ec2.ModifyIdentityIdFormatInput) (_result_0 *request.Request, _result_1 *ec2.ModifyIdentityIdFormatOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyIdentityIdFormatInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyIdentityIdFormatOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyIdentityIdFormatInput) *ec2.ModifyIdentityIdFormatOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyIdentityIdFormatOutput)
		}
	}

	return r0, r1
}

// ModifyIdentityIdFormatWithContext provides a mock function.
func (_m *Mockec2API) ModifyIdentityIdFormatWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyIdentityIdFormatInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyIdentityIdFormatOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyIdentityIdFormatOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyIdentityIdFormatInput, ...request.Option) *ec2.ModifyIdentityIdFormatOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyIdentityIdFormatOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyIdentityIdFormatInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyImageAttribute provides a mock function.
func (_m *Mockec2API) ModifyImageAttribute(_parameter_0 *ec2.ModifyImageAttributeInput) (_result_0 *ec2.ModifyImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyImageAttributeInput) *ec2.ModifyImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyImageAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyImageAttributeRequest(_parameter_0 *ec2.ModifyImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyImageAttributeInput) *ec2.ModifyImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyImageAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyImageAttributeInput, ...request.Option) *ec2.ModifyImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceAttribute provides a mock function.
func (_m *Mockec2API) ModifyInstanceAttribute(_parameter_0 *ec2.ModifyInstanceAttributeInput) (_result_0 *ec2.ModifyInstanceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceAttributeInput) *ec2.ModifyInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyInstanceAttributeRequest(_parameter_0 *ec2.ModifyInstanceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstanceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstanceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceAttributeInput) *ec2.ModifyInstanceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstanceAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyInstanceAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstanceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstanceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstanceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstanceAttributeInput, ...request.Option) *ec2.ModifyInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstanceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceCapacityReservationAttributes provides a mock function.
func (_m *Mockec2API) ModifyInstanceCapacityReservationAttributes(_parameter_0 *ec2.ModifyInstanceCapacityReservationAttributesInput) (_result_0 *ec2.ModifyInstanceCapacityReservationAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceCapacityReservationAttributesInput) *ec2.ModifyInstanceCapacityReservationAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceCapacityReservationAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceCapacityReservationAttributesRequest provides a mock function.
func (_m *Mockec2API) ModifyInstanceCapacityReservationAttributesRequest(_parameter_0 *ec2.ModifyInstanceCapacityReservationAttributesInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstanceCapacityReservationAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceCapacityReservationAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceCapacityReservationAttributesInput) *ec2.ModifyInstanceCapacityReservationAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
		}
	}

	return r0, r1
}

// ModifyInstanceCapacityReservationAttributesWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstanceCapacityReservationAttributesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstanceCapacityReservationAttributesInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstanceCapacityReservationAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstanceCapacityReservationAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstanceCapacityReservationAttributesInput, ...request.Option) *ec2.ModifyInstanceCapacityReservationAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceCapacityReservationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstanceCapacityReservationAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceCreditSpecification provides a mock function.
func (_m *Mockec2API) ModifyInstanceCreditSpecification(_parameter_0 *ec2.ModifyInstanceCreditSpecificationInput) (_result_0 *ec2.ModifyInstanceCreditSpecificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstanceCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceCreditSpecificationInput) *ec2.ModifyInstanceCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceCreditSpecificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceCreditSpecificationRequest provides a mock function.
func (_m *Mockec2API) ModifyInstanceCreditSpecificationRequest(_parameter_0 *ec2.ModifyInstanceCreditSpecificationInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstanceCreditSpecificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceCreditSpecificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstanceCreditSpecificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceCreditSpecificationInput) *ec2.ModifyInstanceCreditSpecificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstanceCreditSpecificationOutput)
		}
	}

	return r0, r1
}

// ModifyInstanceCreditSpecificationWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstanceCreditSpecificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstanceCreditSpecificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstanceCreditSpecificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstanceCreditSpecificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstanceCreditSpecificationInput, ...request.Option) *ec2.ModifyInstanceCreditSpecificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceCreditSpecificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstanceCreditSpecificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceEventStartTime provides a mock function.
func (_m *Mockec2API) ModifyInstanceEventStartTime(_parameter_0 *ec2.ModifyInstanceEventStartTimeInput) (_result_0 *ec2.ModifyInstanceEventStartTimeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstanceEventStartTimeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceEventStartTimeInput) *ec2.ModifyInstanceEventStartTimeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceEventStartTimeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceEventStartTimeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceEventStartTimeRequest provides a mock function.
func (_m *Mockec2API) ModifyInstanceEventStartTimeRequest(_parameter_0 *ec2.ModifyInstanceEventStartTimeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstanceEventStartTimeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceEventStartTimeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstanceEventStartTimeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceEventStartTimeInput) *ec2.ModifyInstanceEventStartTimeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstanceEventStartTimeOutput)
		}
	}

	return r0, r1
}

// ModifyInstanceEventStartTimeWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstanceEventStartTimeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstanceEventStartTimeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstanceEventStartTimeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstanceEventStartTimeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstanceEventStartTimeInput, ...request.Option) *ec2.ModifyInstanceEventStartTimeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceEventStartTimeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstanceEventStartTimeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceMetadataOptions provides a mock function.
func (_m *Mockec2API) ModifyInstanceMetadataOptions(_parameter_0 *ec2.ModifyInstanceMetadataOptionsInput) (_result_0 *ec2.ModifyInstanceMetadataOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstanceMetadataOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceMetadataOptionsInput) *ec2.ModifyInstanceMetadataOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceMetadataOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceMetadataOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceMetadataOptionsRequest provides a mock function.
func (_m *Mockec2API) ModifyInstanceMetadataOptionsRequest(_parameter_0 *ec2.ModifyInstanceMetadataOptionsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstanceMetadataOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstanceMetadataOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstanceMetadataOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstanceMetadataOptionsInput) *ec2.ModifyInstanceMetadataOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstanceMetadataOptionsOutput)
		}
	}

	return r0, r1
}

// ModifyInstanceMetadataOptionsWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstanceMetadataOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstanceMetadataOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstanceMetadataOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstanceMetadataOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstanceMetadataOptionsInput, ...request.Option) *ec2.ModifyInstanceMetadataOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstanceMetadataOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstanceMetadataOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstancePlacement provides a mock function.
func (_m *Mockec2API) ModifyInstancePlacement(_parameter_0 *ec2.ModifyInstancePlacementInput) (_result_0 *ec2.ModifyInstancePlacementOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyInstancePlacementOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstancePlacementInput) *ec2.ModifyInstancePlacementOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstancePlacementOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstancePlacementInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstancePlacementRequest provides a mock function.
func (_m *Mockec2API) ModifyInstancePlacementRequest(_parameter_0 *ec2.ModifyInstancePlacementInput) (_result_0 *request.Request, _result_1 *ec2.ModifyInstancePlacementOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyInstancePlacementInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyInstancePlacementOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyInstancePlacementInput) *ec2.ModifyInstancePlacementOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyInstancePlacementOutput)
		}
	}

	return r0, r1
}

// ModifyInstancePlacementWithContext provides a mock function.
func (_m *Mockec2API) ModifyInstancePlacementWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyInstancePlacementInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyInstancePlacementOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyInstancePlacementOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyInstancePlacementInput, ...request.Option) *ec2.ModifyInstancePlacementOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyInstancePlacementOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyInstancePlacementInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyLaunchTemplate provides a mock function.
func (_m *Mockec2API) ModifyLaunchTemplate(_parameter_0 *ec2.ModifyLaunchTemplateInput) (_result_0 *ec2.ModifyLaunchTemplateOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyLaunchTemplateInput) *ec2.ModifyLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyLaunchTemplateInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyLaunchTemplateRequest provides a mock function.
func (_m *Mockec2API) ModifyLaunchTemplateRequest(_parameter_0 *ec2.ModifyLaunchTemplateInput) (_result_0 *request.Request, _result_1 *ec2.ModifyLaunchTemplateOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyLaunchTemplateInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyLaunchTemplateOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyLaunchTemplateInput) *ec2.ModifyLaunchTemplateOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyLaunchTemplateOutput)
		}
	}

	return r0, r1
}

// ModifyLaunchTemplateWithContext provides a mock function.
func (_m *Mockec2API) ModifyLaunchTemplateWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyLaunchTemplateInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyLaunchTemplateOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyLaunchTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyLaunchTemplateInput, ...request.Option) *ec2.ModifyLaunchTemplateOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyLaunchTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyLaunchTemplateInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyManagedPrefixList provides a mock function.
func (_m *Mockec2API) ModifyManagedPrefixList(_parameter_0 *ec2.ModifyManagedPrefixListInput) (_result_0 *ec2.ModifyManagedPrefixListOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyManagedPrefixListInput) *ec2.ModifyManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyManagedPrefixListInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyManagedPrefixListRequest provides a mock function.
func (_m *Mockec2API) ModifyManagedPrefixListRequest(_parameter_0 *ec2.ModifyManagedPrefixListInput) (_result_0 *request.Request, _result_1 *ec2.ModifyManagedPrefixListOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyManagedPrefixListInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyManagedPrefixListOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyManagedPrefixListInput) *ec2.ModifyManagedPrefixListOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyManagedPrefixListOutput)
		}
	}

	return r0, r1
}

// ModifyManagedPrefixListWithContext provides a mock function.
func (_m *Mockec2API) ModifyManagedPrefixListWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyManagedPrefixListInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyManagedPrefixListOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyManagedPrefixListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyManagedPrefixListInput, ...request.Option) *ec2.ModifyManagedPrefixListOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyManagedPrefixListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyManagedPrefixListInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyNetworkInterfaceAttribute provides a mock function.
func (_m *Mockec2API) ModifyNetworkInterfaceAttribute(_parameter_0 *ec2.ModifyNetworkInterfaceAttributeInput) (_result_0 *ec2.ModifyNetworkInterfaceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyNetworkInterfaceAttributeInput) *ec2.ModifyNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyNetworkInterfaceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyNetworkInterfaceAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyNetworkInterfaceAttributeRequest(_parameter_0 *ec2.ModifyNetworkInterfaceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyNetworkInterfaceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyNetworkInterfaceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyNetworkInterfaceAttributeInput) *ec2.ModifyNetworkInterfaceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyNetworkInterfaceAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyNetworkInterfaceAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyNetworkInterfaceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyNetworkInterfaceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyNetworkInterfaceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyNetworkInterfaceAttributeInput, ...request.Option) *ec2.ModifyNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyNetworkInterfaceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReservedInstances provides a mock function.
func (_m *Mockec2API) ModifyReservedInstances(_parameter_0 *ec2.ModifyReservedInstancesInput) (_result_0 *ec2.ModifyReservedInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyReservedInstancesInput) *ec2.ModifyReservedInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyReservedInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReservedInstancesRequest provides a mock function.
func (_m *Mockec2API) ModifyReservedInstancesRequest(_parameter_0 *ec2.ModifyReservedInstancesInput) (_result_0 *request.Request, _result_1 *ec2.ModifyReservedInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyReservedInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyReservedInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyReservedInstancesInput) *ec2.ModifyReservedInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyReservedInstancesOutput)
		}
	}

	return r0, r1
}

// ModifyReservedInstancesWithContext provides a mock function.
func (_m *Mockec2API) ModifyReservedInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyReservedInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyReservedInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyReservedInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyReservedInstancesInput, ...request.Option) *ec2.ModifyReservedInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyReservedInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyReservedInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySnapshotAttribute provides a mock function.
func (_m *Mockec2API) ModifySnapshotAttribute(_parameter_0 *ec2.ModifySnapshotAttributeInput) (_result_0 *ec2.ModifySnapshotAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifySnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifySnapshotAttributeInput) *ec2.ModifySnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifySnapshotAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySnapshotAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifySnapshotAttributeRequest(_parameter_0 *ec2.ModifySnapshotAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifySnapshotAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifySnapshotAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifySnapshotAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifySnapshotAttributeInput) *ec2.ModifySnapshotAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifySnapshotAttributeOutput)
		}
	}

	return r0, r1
}

// ModifySnapshotAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifySnapshotAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifySnapshotAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifySnapshotAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifySnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifySnapshotAttributeInput, ...request.Option) *ec2.ModifySnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifySnapshotAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySpotFleetRequest provides a mock function.
func (_m *Mockec2API) ModifySpotFleetRequest(_parameter_0 *ec2.ModifySpotFleetRequestInput) (_result_0 *ec2.ModifySpotFleetRequestOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifySpotFleetRequestOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifySpotFleetRequestInput) *ec2.ModifySpotFleetRequestOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySpotFleetRequestOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifySpotFleetRequestInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySpotFleetRequestRequest provides a mock function.
func (_m *Mockec2API) ModifySpotFleetRequestRequest(_parameter_0 *ec2.ModifySpotFleetRequestInput) (_result_0 *request.Request, _result_1 *ec2.ModifySpotFleetRequestOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifySpotFleetRequestInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifySpotFleetRequestOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifySpotFleetRequestInput) *ec2.ModifySpotFleetRequestOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifySpotFleetRequestOutput)
		}
	}

	return r0, r1
}

// ModifySpotFleetRequestWithContext provides a mock function.
func (_m *Mockec2API) ModifySpotFleetRequestWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifySpotFleetRequestInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifySpotFleetRequestOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifySpotFleetRequestOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifySpotFleetRequestInput, ...request.Option) *ec2.ModifySpotFleetRequestOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySpotFleetRequestOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifySpotFleetRequestInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySubnetAttribute provides a mock function.
func (_m *Mockec2API) ModifySubnetAttribute(_parameter_0 *ec2.ModifySubnetAttributeInput) (_result_0 *ec2.ModifySubnetAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifySubnetAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifySubnetAttributeInput) *ec2.ModifySubnetAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySubnetAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifySubnetAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySubnetAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifySubnetAttributeRequest(_parameter_0 *ec2.ModifySubnetAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifySubnetAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifySubnetAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifySubnetAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifySubnetAttributeInput) *ec2.ModifySubnetAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifySubnetAttributeOutput)
		}
	}

	return r0, r1
}

// ModifySubnetAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifySubnetAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifySubnetAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifySubnetAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifySubnetAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifySubnetAttributeInput, ...request.Option) *ec2.ModifySubnetAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifySubnetAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifySubnetAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterNetworkServices provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterNetworkServices(_parameter_0 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (_result_0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorFilterNetworkServicesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterNetworkServicesRequest provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterNetworkServicesRequest(_parameter_0 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorFilterNetworkServicesInput) *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
		}
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterNetworkServicesWithContext provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterNetworkServicesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, ...request.Option) *ec2.ModifyTrafficMirrorFilterNetworkServicesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorFilterNetworkServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTrafficMirrorFilterNetworkServicesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterRule provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterRule(_parameter_0 *ec2.ModifyTrafficMirrorFilterRuleInput) (_result_0 *ec2.ModifyTrafficMirrorFilterRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorFilterRuleInput) *ec2.ModifyTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorFilterRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterRuleRequest provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterRuleRequest(_parameter_0 *ec2.ModifyTrafficMirrorFilterRuleInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTrafficMirrorFilterRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorFilterRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorFilterRuleInput) *ec2.ModifyTrafficMirrorFilterRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTrafficMirrorFilterRuleOutput)
		}
	}

	return r0, r1
}

// ModifyTrafficMirrorFilterRuleWithContext provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorFilterRuleWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTrafficMirrorFilterRuleInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTrafficMirrorFilterRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTrafficMirrorFilterRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTrafficMirrorFilterRuleInput, ...request.Option) *ec2.ModifyTrafficMirrorFilterRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorFilterRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTrafficMirrorFilterRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorSession provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorSession(_parameter_0 *ec2.ModifyTrafficMirrorSessionInput) (_result_0 *ec2.ModifyTrafficMirrorSessionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorSessionInput) *ec2.ModifyTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorSessionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTrafficMirrorSessionRequest provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorSessionRequest(_parameter_0 *ec2.ModifyTrafficMirrorSessionInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTrafficMirrorSessionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTrafficMirrorSessionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTrafficMirrorSessionOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTrafficMirrorSessionInput) *ec2.ModifyTrafficMirrorSessionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTrafficMirrorSessionOutput)
		}
	}

	return r0, r1
}

// ModifyTrafficMirrorSessionWithContext provides a mock function.
func (_m *Mockec2API) ModifyTrafficMirrorSessionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTrafficMirrorSessionInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTrafficMirrorSessionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTrafficMirrorSessionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTrafficMirrorSessionInput, ...request.Option) *ec2.ModifyTrafficMirrorSessionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTrafficMirrorSessionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTrafficMirrorSessionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGateway provides a mock function.
func (_m *Mockec2API) ModifyTransitGateway(_parameter_0 *ec2.ModifyTransitGatewayInput) (_result_0 *ec2.ModifyTransitGatewayOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayInput) *ec2.ModifyTransitGatewayOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGatewayPrefixListReference provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayPrefixListReference(_parameter_0 *ec2.ModifyTransitGatewayPrefixListReferenceInput) (_result_0 *ec2.ModifyTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayPrefixListReferenceInput) *ec2.ModifyTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayPrefixListReferenceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGatewayPrefixListReferenceRequest provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayPrefixListReferenceRequest(_parameter_0 *ec2.ModifyTransitGatewayPrefixListReferenceInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTransitGatewayPrefixListReferenceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayPrefixListReferenceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayPrefixListReferenceInput) *ec2.ModifyTransitGatewayPrefixListReferenceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTransitGatewayPrefixListReferenceOutput)
		}
	}

	return r0, r1
}

// ModifyTransitGatewayPrefixListReferenceWithContext provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayPrefixListReferenceWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTransitGatewayPrefixListReferenceInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTransitGatewayPrefixListReferenceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTransitGatewayPrefixListReferenceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTransitGatewayPrefixListReferenceInput, ...request.Option) *ec2.ModifyTransitGatewayPrefixListReferenceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayPrefixListReferenceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTransitGatewayPrefixListReferenceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGatewayRequest provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayRequest(_parameter_0 *ec2.ModifyTransitGatewayInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTransitGatewayOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTransitGatewayOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayInput) *ec2.ModifyTransitGatewayOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTransitGatewayOutput)
		}
	}

	return r0, r1
}

// ModifyTransitGatewayVpcAttachment provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayVpcAttachment(_parameter_0 *ec2.ModifyTransitGatewayVpcAttachmentInput) (_result_0 *ec2.ModifyTransitGatewayVpcAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayVpcAttachmentInput) *ec2.ModifyTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayVpcAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGatewayVpcAttachmentRequest provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayVpcAttachmentRequest(_parameter_0 *ec2.ModifyTransitGatewayVpcAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.ModifyTransitGatewayVpcAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyTransitGatewayVpcAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyTransitGatewayVpcAttachmentInput) *ec2.ModifyTransitGatewayVpcAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
		}
	}

	return r0, r1
}

// ModifyTransitGatewayVpcAttachmentWithContext provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayVpcAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTransitGatewayVpcAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTransitGatewayVpcAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTransitGatewayVpcAttachmentInput, ...request.Option) *ec2.ModifyTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTransitGatewayVpcAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTransitGatewayWithContext provides a mock function.
func (_m *Mockec2API) ModifyTransitGatewayWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyTransitGatewayInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyTransitGatewayOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyTransitGatewayOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyTransitGatewayInput, ...request.Option) *ec2.ModifyTransitGatewayOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyTransitGatewayOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyTransitGatewayInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolume provides a mock function.
func (_m *Mockec2API) ModifyVolume(_parameter_0 *ec2.ModifyVolumeInput) (_result_0 *ec2.ModifyVolumeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVolumeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVolumeInput) *ec2.ModifyVolumeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVolumeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolumeAttribute provides a mock function.
func (_m *Mockec2API) ModifyVolumeAttribute(_parameter_0 *ec2.ModifyVolumeAttributeInput) (_result_0 *ec2.ModifyVolumeAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVolumeAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVolumeAttributeInput) *ec2.ModifyVolumeAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVolumeAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVolumeAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolumeAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyVolumeAttributeRequest(_parameter_0 *ec2.ModifyVolumeAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVolumeAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVolumeAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVolumeAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVolumeAttributeInput) *ec2.ModifyVolumeAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVolumeAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyVolumeAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyVolumeAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVolumeAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVolumeAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVolumeAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVolumeAttributeInput, ...request.Option) *ec2.ModifyVolumeAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVolumeAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVolumeAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVolumeRequest provides a mock function.
func (_m *Mockec2API) ModifyVolumeRequest(_parameter_0 *ec2.ModifyVolumeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVolumeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVolumeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVolumeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVolumeInput) *ec2.ModifyVolumeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVolumeOutput)
		}
	}

	return r0, r1
}

// ModifyVolumeWithContext provides a mock function.
func (_m *Mockec2API) ModifyVolumeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVolumeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVolumeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVolumeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVolumeInput, ...request.Option) *ec2.ModifyVolumeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVolumeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVolumeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcAttribute provides a mock function.
func (_m *Mockec2API) ModifyVpcAttribute(_parameter_0 *ec2.ModifyVpcAttributeInput) (_result_0 *ec2.ModifyVpcAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcAttributeInput) *ec2.ModifyVpcAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcAttributeRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcAttributeRequest(_parameter_0 *ec2.ModifyVpcAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcAttributeInput) *ec2.ModifyVpcAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcAttributeOutput)
		}
	}

	return r0, r1
}

// ModifyVpcAttributeWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcAttributeInput, ...request.Option) *ec2.ModifyVpcAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpoint provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpoint(_parameter_0 *ec2.ModifyVpcEndpointInput) (_result_0 *ec2.ModifyVpcEndpointOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcEndpointOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointInput) *ec2.ModifyVpcEndpointOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointConnectionNotification provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointConnectionNotification(_parameter_0 *ec2.ModifyVpcEndpointConnectionNotificationInput) (_result_0 *ec2.ModifyVpcEndpointConnectionNotificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointConnectionNotificationInput) *ec2.ModifyVpcEndpointConnectionNotificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointConnectionNotificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointConnectionNotificationRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointConnectionNotificationRequest(_parameter_0 *ec2.ModifyVpcEndpointConnectionNotificationInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcEndpointConnectionNotificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointConnectionNotificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointConnectionNotificationInput) *ec2.ModifyVpcEndpointConnectionNotificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
		}
	}

	return r0, r1
}

// ModifyVpcEndpointConnectionNotificationWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointConnectionNotificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcEndpointConnectionNotificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcEndpointConnectionNotificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcEndpointConnectionNotificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcEndpointConnectionNotificationInput, ...request.Option) *ec2.ModifyVpcEndpointConnectionNotificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointConnectionNotificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcEndpointConnectionNotificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointRequest(_parameter_0 *ec2.ModifyVpcEndpointInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcEndpointOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcEndpointOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointInput) *ec2.ModifyVpcEndpointOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcEndpointOutput)
		}
	}

	return r0, r1
}

// ModifyVpcEndpointServiceConfiguration provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServiceConfiguration(_parameter_0 *ec2.ModifyVpcEndpointServiceConfigurationInput) (_result_0 *ec2.ModifyVpcEndpointServiceConfigurationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointServiceConfigurationInput) *ec2.ModifyVpcEndpointServiceConfigurationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointServiceConfigurationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointServiceConfigurationRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServiceConfigurationRequest(_parameter_0 *ec2.ModifyVpcEndpointServiceConfigurationInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcEndpointServiceConfigurationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointServiceConfigurationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointServiceConfigurationInput) *ec2.ModifyVpcEndpointServiceConfigurationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
		}
	}

	return r0, r1
}

// ModifyVpcEndpointServiceConfigurationWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServiceConfigurationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcEndpointServiceConfigurationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcEndpointServiceConfigurationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcEndpointServiceConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcEndpointServiceConfigurationInput, ...request.Option) *ec2.ModifyVpcEndpointServiceConfigurationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointServiceConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcEndpointServiceConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointServicePermissions provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServicePermissions(_parameter_0 *ec2.ModifyVpcEndpointServicePermissionsInput) (_result_0 *ec2.ModifyVpcEndpointServicePermissionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointServicePermissionsInput) *ec2.ModifyVpcEndpointServicePermissionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointServicePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointServicePermissionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointServicePermissionsRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServicePermissionsRequest(_parameter_0 *ec2.ModifyVpcEndpointServicePermissionsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcEndpointServicePermissionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcEndpointServicePermissionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcEndpointServicePermissionsInput) *ec2.ModifyVpcEndpointServicePermissionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcEndpointServicePermissionsOutput)
		}
	}

	return r0, r1
}

// ModifyVpcEndpointServicePermissionsWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointServicePermissionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcEndpointServicePermissionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcEndpointServicePermissionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcEndpointServicePermissionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...request.Option) *ec2.ModifyVpcEndpointServicePermissionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointServicePermissionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcEndpointWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcEndpointWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcEndpointInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcEndpointOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcEndpointOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcEndpointInput, ...request.Option) *ec2.ModifyVpcEndpointOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcEndpointInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcPeeringConnectionOptions provides a mock function.
func (_m *Mockec2API) ModifyVpcPeeringConnectionOptions(_parameter_0 *ec2.ModifyVpcPeeringConnectionOptionsInput) (_result_0 *ec2.ModifyVpcPeeringConnectionOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcPeeringConnectionOptionsInput) *ec2.ModifyVpcPeeringConnectionOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcPeeringConnectionOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcPeeringConnectionOptionsRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcPeeringConnectionOptionsRequest(_parameter_0 *ec2.ModifyVpcPeeringConnectionOptionsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcPeeringConnectionOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcPeeringConnectionOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcPeeringConnectionOptionsInput) *ec2.ModifyVpcPeeringConnectionOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
		}
	}

	return r0, r1
}

// ModifyVpcPeeringConnectionOptionsWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcPeeringConnectionOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcPeeringConnectionOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcPeeringConnectionOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcPeeringConnectionOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcPeeringConnectionOptionsInput, ...request.Option) *ec2.ModifyVpcPeeringConnectionOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcPeeringConnectionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcPeeringConnectionOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcTenancy provides a mock function.
func (_m *Mockec2API) ModifyVpcTenancy(_parameter_0 *ec2.ModifyVpcTenancyInput) (_result_0 *ec2.ModifyVpcTenancyOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpcTenancyOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcTenancyInput) *ec2.ModifyVpcTenancyOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcTenancyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcTenancyInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpcTenancyRequest provides a mock function.
func (_m *Mockec2API) ModifyVpcTenancyRequest(_parameter_0 *ec2.ModifyVpcTenancyInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpcTenancyOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpcTenancyInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpcTenancyOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpcTenancyInput) *ec2.ModifyVpcTenancyOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpcTenancyOutput)
		}
	}

	return r0, r1
}

// ModifyVpcTenancyWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpcTenancyWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpcTenancyInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpcTenancyOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpcTenancyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpcTenancyInput, ...request.Option) *ec2.ModifyVpcTenancyOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpcTenancyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpcTenancyInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnConnection provides a mock function.
func (_m *Mockec2API) ModifyVpnConnection(_parameter_0 *ec2.ModifyVpnConnectionInput) (_result_0 *ec2.ModifyVpnConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnConnectionInput) *ec2.ModifyVpnConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnConnectionOptions provides a mock function.
func (_m *Mockec2API) ModifyVpnConnectionOptions(_parameter_0 *ec2.ModifyVpnConnectionOptionsInput) (_result_0 *ec2.ModifyVpnConnectionOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpnConnectionOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnConnectionOptionsInput) *ec2.ModifyVpnConnectionOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnConnectionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnConnectionOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnConnectionOptionsRequest provides a mock function.
func (_m *Mockec2API) ModifyVpnConnectionOptionsRequest(_parameter_0 *ec2.ModifyVpnConnectionOptionsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpnConnectionOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnConnectionOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpnConnectionOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnConnectionOptionsInput) *ec2.ModifyVpnConnectionOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpnConnectionOptionsOutput)
		}
	}

	return r0, r1
}

// ModifyVpnConnectionOptionsWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpnConnectionOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpnConnectionOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpnConnectionOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpnConnectionOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpnConnectionOptionsInput, ...request.Option) *ec2.ModifyVpnConnectionOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnConnectionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpnConnectionOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnConnectionRequest provides a mock function.
func (_m *Mockec2API) ModifyVpnConnectionRequest(_parameter_0 *ec2.ModifyVpnConnectionInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpnConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpnConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnConnectionInput) *ec2.ModifyVpnConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpnConnectionOutput)
		}
	}

	return r0, r1
}

// ModifyVpnConnectionWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpnConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpnConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpnConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpnConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpnConnectionInput, ...request.Option) *ec2.ModifyVpnConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpnConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnTunnelCertificate provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelCertificate(_parameter_0 *ec2.ModifyVpnTunnelCertificateInput) (_result_0 *ec2.ModifyVpnTunnelCertificateOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpnTunnelCertificateOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnTunnelCertificateInput) *ec2.ModifyVpnTunnelCertificateOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnTunnelCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnTunnelCertificateInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnTunnelCertificateRequest provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelCertificateRequest(_parameter_0 *ec2.ModifyVpnTunnelCertificateInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpnTunnelCertificateOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnTunnelCertificateInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpnTunnelCertificateOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnTunnelCertificateInput) *ec2.ModifyVpnTunnelCertificateOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpnTunnelCertificateOutput)
		}
	}

	return r0, r1
}

// ModifyVpnTunnelCertificateWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelCertificateWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpnTunnelCertificateInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpnTunnelCertificateOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpnTunnelCertificateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpnTunnelCertificateInput, ...request.Option) *ec2.ModifyVpnTunnelCertificateOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnTunnelCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpnTunnelCertificateInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnTunnelOptions provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelOptions(_parameter_0 *ec2.ModifyVpnTunnelOptionsInput) (_result_0 *ec2.ModifyVpnTunnelOptionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ModifyVpnTunnelOptionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnTunnelOptionsInput) *ec2.ModifyVpnTunnelOptionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnTunnelOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnTunnelOptionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyVpnTunnelOptionsRequest provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelOptionsRequest(_parameter_0 *ec2.ModifyVpnTunnelOptionsInput) (_result_0 *request.Request, _result_1 *ec2.ModifyVpnTunnelOptionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ModifyVpnTunnelOptionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ModifyVpnTunnelOptionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ModifyVpnTunnelOptionsInput) *ec2.ModifyVpnTunnelOptionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ModifyVpnTunnelOptionsOutput)
		}
	}

	return r0, r1
}

// ModifyVpnTunnelOptionsWithContext provides a mock function.
func (_m *Mockec2API) ModifyVpnTunnelOptionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ModifyVpnTunnelOptionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ModifyVpnTunnelOptionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ModifyVpnTunnelOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ModifyVpnTunnelOptionsInput, ...request.Option) *ec2.ModifyVpnTunnelOptionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ModifyVpnTunnelOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ModifyVpnTunnelOptionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonitorInstances provides a mock function.
func (_m *Mockec2API) MonitorInstances(_parameter_0 *ec2.MonitorInstancesInput) (_result_0 *ec2.MonitorInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.MonitorInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.MonitorInstancesInput) *ec2.MonitorInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.MonitorInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.MonitorInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonitorInstancesRequest provides a mock function.
func (_m *Mockec2API) MonitorInstancesRequest(_parameter_0 *ec2.MonitorInstancesInput) (_result_0 *request.Request, _result_1 *ec2.MonitorInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.MonitorInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.MonitorInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.MonitorInstancesInput) *ec2.MonitorInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.MonitorInstancesOutput)
		}
	}

	return r0, r1
}

// MonitorInstancesWithContext provides a mock function.
func (_m *Mockec2API) MonitorInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.MonitorInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.MonitorInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.MonitorInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.MonitorInstancesInput, ...request.Option) *ec2.MonitorInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.MonitorInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.MonitorInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveAddressToVpc provides a mock function.
func (_m *Mockec2API) MoveAddressToVpc(_parameter_0 *ec2.MoveAddressToVpcInput) (_result_0 *ec2.MoveAddressToVpcOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.MoveAddressToVpcOutput
	if rf, ok := ret.Get(0).(func(*ec2.MoveAddressToVpcInput) *ec2.MoveAddressToVpcOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.MoveAddressToVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.MoveAddressToVpcInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveAddressToVpcRequest provides a mock function.
func (_m *Mockec2API) MoveAddressToVpcRequest(_parameter_0 *ec2.MoveAddressToVpcInput) (_result_0 *request.Request, _result_1 *ec2.MoveAddressToVpcOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.MoveAddressToVpcInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.MoveAddressToVpcOutput
	if rf, ok := ret.Get(1).(func(*ec2.MoveAddressToVpcInput) *ec2.MoveAddressToVpcOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.MoveAddressToVpcOutput)
		}
	}

	return r0, r1
}

// MoveAddressToVpcWithContext provides a mock function.
func (_m *Mockec2API) MoveAddressToVpcWithContext(_parameter_0 context.Context, _parameter_1 *ec2.MoveAddressToVpcInput, _parameter_2 ...request.Option) (_result_0 *ec2.MoveAddressToVpcOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.MoveAddressToVpcOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.MoveAddressToVpcInput, ...request.Option) *ec2.MoveAddressToVpcOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.MoveAddressToVpcOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.MoveAddressToVpcInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvisionByoipCidr provides a mock function.
func (_m *Mockec2API) ProvisionByoipCidr(_parameter_0 *ec2.ProvisionByoipCidrInput) (_result_0 *ec2.ProvisionByoipCidrOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ProvisionByoipCidrOutput
	if rf, ok := ret.Get(0).(func(*ec2.ProvisionByoipCidrInput) *ec2.ProvisionByoipCidrOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ProvisionByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ProvisionByoipCidrInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvisionByoipCidrRequest provides a mock function.
func (_m *Mockec2API) ProvisionByoipCidrRequest(_parameter_0 *ec2.ProvisionByoipCidrInput) (_result_0 *request.Request, _result_1 *ec2.ProvisionByoipCidrOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ProvisionByoipCidrInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ProvisionByoipCidrOutput
	if rf, ok := ret.Get(1).(func(*ec2.ProvisionByoipCidrInput) *ec2.ProvisionByoipCidrOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ProvisionByoipCidrOutput)
		}
	}

	return r0, r1
}

// ProvisionByoipCidrWithContext provides a mock function.
func (_m *Mockec2API) ProvisionByoipCidrWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ProvisionByoipCidrInput, _parameter_2 ...request.Option) (_result_0 *ec2.ProvisionByoipCidrOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ProvisionByoipCidrOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ProvisionByoipCidrInput, ...request.Option) *ec2.ProvisionByoipCidrOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ProvisionByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ProvisionByoipCidrInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseHostReservation provides a mock function.
func (_m *Mockec2API) PurchaseHostReservation(_parameter_0 *ec2.PurchaseHostReservationInput) (_result_0 *ec2.PurchaseHostReservationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.PurchaseHostReservationOutput
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseHostReservationInput) *ec2.PurchaseHostReservationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseHostReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseHostReservationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseHostReservationRequest provides a mock function.
func (_m *Mockec2API) PurchaseHostReservationRequest(_parameter_0 *ec2.PurchaseHostReservationInput) (_result_0 *request.Request, _result_1 *ec2.PurchaseHostReservationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseHostReservationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.PurchaseHostReservationOutput
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseHostReservationInput) *ec2.PurchaseHostReservationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.PurchaseHostReservationOutput)
		}
	}

	return r0, r1
}

// PurchaseHostReservationWithContext provides a mock function.
func (_m *Mockec2API) PurchaseHostReservationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.PurchaseHostReservationInput, _parameter_2 ...request.Option) (_result_0 *ec2.PurchaseHostReservationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.PurchaseHostReservationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.PurchaseHostReservationInput, ...request.Option) *ec2.PurchaseHostReservationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseHostReservationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.PurchaseHostReservationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseReservedInstancesOffering provides a mock function.
func (_m *Mockec2API) PurchaseReservedInstancesOffering(_parameter_0 *ec2.PurchaseReservedInstancesOfferingInput) (_result_0 *ec2.PurchaseReservedInstancesOfferingOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.PurchaseReservedInstancesOfferingOutput
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseReservedInstancesOfferingInput) *ec2.PurchaseReservedInstancesOfferingOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseReservedInstancesOfferingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseReservedInstancesOfferingInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseReservedInstancesOfferingRequest provides a mock function.
func (_m *Mockec2API) PurchaseReservedInstancesOfferingRequest(_parameter_0 *ec2.PurchaseReservedInstancesOfferingInput) (_result_0 *request.Request, _result_1 *ec2.PurchaseReservedInstancesOfferingOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseReservedInstancesOfferingInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.PurchaseReservedInstancesOfferingOutput
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseReservedInstancesOfferingInput) *ec2.PurchaseReservedInstancesOfferingOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.PurchaseReservedInstancesOfferingOutput)
		}
	}

	return r0, r1
}

// PurchaseReservedInstancesOfferingWithContext provides a mock function.
func (_m *Mockec2API) PurchaseReservedInstancesOfferingWithContext(_parameter_0 context.Context, _parameter_1 *ec2.PurchaseReservedInstancesOfferingInput, _parameter_2 ...request.Option) (_result_0 *ec2.PurchaseReservedInstancesOfferingOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.PurchaseReservedInstancesOfferingOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.PurchaseReservedInstancesOfferingInput, ...request.Option) *ec2.PurchaseReservedInstancesOfferingOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseReservedInstancesOfferingOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.PurchaseReservedInstancesOfferingInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseScheduledInstances provides a mock function.
func (_m *Mockec2API) PurchaseScheduledInstances(_parameter_0 *ec2.PurchaseScheduledInstancesInput) (_result_0 *ec2.PurchaseScheduledInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.PurchaseScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseScheduledInstancesInput) *ec2.PurchaseScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseScheduledInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseScheduledInstancesRequest provides a mock function.
func (_m *Mockec2API) PurchaseScheduledInstancesRequest(_parameter_0 *ec2.PurchaseScheduledInstancesInput) (_result_0 *request.Request, _result_1 *ec2.PurchaseScheduledInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.PurchaseScheduledInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.PurchaseScheduledInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.PurchaseScheduledInstancesInput) *ec2.PurchaseScheduledInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.PurchaseScheduledInstancesOutput)
		}
	}

	return r0, r1
}

// PurchaseScheduledInstancesWithContext provides a mock function.
func (_m *Mockec2API) PurchaseScheduledInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.PurchaseScheduledInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.PurchaseScheduledInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.PurchaseScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.PurchaseScheduledInstancesInput, ...request.Option) *ec2.PurchaseScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.PurchaseScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.PurchaseScheduledInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstances provides a mock function.
func (_m *Mockec2API) RebootInstances(_parameter_0 *ec2.RebootInstancesInput) (_result_0 *ec2.RebootInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RebootInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.RebootInstancesInput) *ec2.RebootInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RebootInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RebootInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstancesRequest provides a mock function.
func (_m *Mockec2API) RebootInstancesRequest(_parameter_0 *ec2.RebootInstancesInput) (_result_0 *request.Request, _result_1 *ec2.RebootInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RebootInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RebootInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.RebootInstancesInput) *ec2.RebootInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RebootInstancesOutput)
		}
	}

	return r0, r1
}

// RebootInstancesWithContext provides a mock function.
func (_m *Mockec2API) RebootInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RebootInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.RebootInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RebootInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RebootInstancesInput, ...request.Option) *ec2.RebootInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RebootInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RebootInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterImage provides a mock function.
func (_m *Mockec2API) RegisterImage(_parameter_0 *ec2.RegisterImageInput) (_result_0 *ec2.RegisterImageOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RegisterImageOutput
	if rf, ok := ret.Get(0).(func(*ec2.RegisterImageInput) *ec2.RegisterImageOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RegisterImageInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterImageRequest provides a mock function.
func (_m *Mockec2API) RegisterImageRequest(_parameter_0 *ec2.RegisterImageInput) (_result_0 *request.Request, _result_1 *ec2.RegisterImageOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RegisterImageInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RegisterImageOutput
	if rf, ok := ret.Get(1).(func(*ec2.RegisterImageInput) *ec2.RegisterImageOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RegisterImageOutput)
		}
	}

	return r0, r1
}

// RegisterImageWithContext provides a mock function.
func (_m *Mockec2API) RegisterImageWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RegisterImageInput, _parameter_2 ...request.Option) (_result_0 *ec2.RegisterImageOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RegisterImageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RegisterImageInput, ...request.Option) *ec2.RegisterImageOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterImageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RegisterImageInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstanceEventNotificationAttributes provides a mock function.
func (_m *Mockec2API) RegisterInstanceEventNotificationAttributes(_parameter_0 *ec2.RegisterInstanceEventNotificationAttributesInput) (_result_0 *ec2.RegisterInstanceEventNotificationAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RegisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(*ec2.RegisterInstanceEventNotificationAttributesInput) *ec2.RegisterInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RegisterInstanceEventNotificationAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstanceEventNotificationAttributesRequest provides a mock function.
func (_m *Mockec2API) RegisterInstanceEventNotificationAttributesRequest(_parameter_0 *ec2.RegisterInstanceEventNotificationAttributesInput) (_result_0 *request.Request, _result_1 *ec2.RegisterInstanceEventNotificationAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RegisterInstanceEventNotificationAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RegisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(1).(func(*ec2.RegisterInstanceEventNotificationAttributesInput) *ec2.RegisterInstanceEventNotificationAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RegisterInstanceEventNotificationAttributesOutput)
		}
	}

	return r0, r1
}

// RegisterInstanceEventNotificationAttributesWithContext provides a mock function.
func (_m *Mockec2API) RegisterInstanceEventNotificationAttributesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RegisterInstanceEventNotificationAttributesInput, _parameter_2 ...request.Option) (_result_0 *ec2.RegisterInstanceEventNotificationAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RegisterInstanceEventNotificationAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RegisterInstanceEventNotificationAttributesInput, ...request.Option) *ec2.RegisterInstanceEventNotificationAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterInstanceEventNotificationAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RegisterInstanceEventNotificationAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupMembers provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupMembers(_parameter_0 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (_result_0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(0).(func(*ec2.RegisterTransitGatewayMulticastGroupMembersInput) *ec2.RegisterTransitGatewayMulticastGroupMembersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RegisterTransitGatewayMulticastGroupMembersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupMembersRequest provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupMembersRequest(_parameter_0 *ec2.RegisterTransitGatewayMulticastGroupMembersInput) (_result_0 *request.Request, _result_1 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RegisterTransitGatewayMulticastGroupMembersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(1).(func(*ec2.RegisterTransitGatewayMulticastGroupMembersInput) *ec2.RegisterTransitGatewayMulticastGroupMembersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupMembersWithContext provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupMembersWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RegisterTransitGatewayMulticastGroupMembersInput, _parameter_2 ...request.Option) (_result_0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RegisterTransitGatewayMulticastGroupMembersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RegisterTransitGatewayMulticastGroupMembersInput, ...request.Option) *ec2.RegisterTransitGatewayMulticastGroupMembersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterTransitGatewayMulticastGroupMembersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RegisterTransitGatewayMulticastGroupMembersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupSources provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupSources(_parameter_0 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (_result_0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(0).(func(*ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RegisterTransitGatewayMulticastGroupSourcesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupSourcesRequest provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupSourcesRequest(_parameter_0 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput) (_result_0 *request.Request, _result_1 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(1).(func(*ec2.RegisterTransitGatewayMulticastGroupSourcesInput) *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	return r0, r1
}

// RegisterTransitGatewayMulticastGroupSourcesWithContext provides a mock function.
func (_m *Mockec2API) RegisterTransitGatewayMulticastGroupSourcesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, _parameter_2 ...request.Option) (_result_0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, ...request.Option) *ec2.RegisterTransitGatewayMulticastGroupSourcesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RegisterTransitGatewayMulticastGroupSourcesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RegisterTransitGatewayMulticastGroupSourcesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTransitGatewayPeeringAttachment provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayPeeringAttachment(_parameter_0 *ec2.RejectTransitGatewayPeeringAttachmentInput) (_result_0 *ec2.RejectTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RejectTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.RejectTransitGatewayPeeringAttachmentInput) *ec2.RejectTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RejectTransitGatewayPeeringAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTransitGatewayPeeringAttachmentRequest provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayPeeringAttachmentRequest(_parameter_0 *ec2.RejectTransitGatewayPeeringAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.RejectTransitGatewayPeeringAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RejectTransitGatewayPeeringAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RejectTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.RejectTransitGatewayPeeringAttachmentInput) *ec2.RejectTransitGatewayPeeringAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
		}
	}

	return r0, r1
}

// RejectTransitGatewayPeeringAttachmentWithContext provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayPeeringAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RejectTransitGatewayPeeringAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.RejectTransitGatewayPeeringAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RejectTransitGatewayPeeringAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RejectTransitGatewayPeeringAttachmentInput, ...request.Option) *ec2.RejectTransitGatewayPeeringAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectTransitGatewayPeeringAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RejectTransitGatewayPeeringAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTransitGatewayVpcAttachment provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayVpcAttachment(_parameter_0 *ec2.RejectTransitGatewayVpcAttachmentInput) (_result_0 *ec2.RejectTransitGatewayVpcAttachmentOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RejectTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(*ec2.RejectTransitGatewayVpcAttachmentInput) *ec2.RejectTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RejectTransitGatewayVpcAttachmentInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTransitGatewayVpcAttachmentRequest provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayVpcAttachmentRequest(_parameter_0 *ec2.RejectTransitGatewayVpcAttachmentInput) (_result_0 *request.Request, _result_1 *ec2.RejectTransitGatewayVpcAttachmentOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RejectTransitGatewayVpcAttachmentInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RejectTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(1).(func(*ec2.RejectTransitGatewayVpcAttachmentInput) *ec2.RejectTransitGatewayVpcAttachmentOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RejectTransitGatewayVpcAttachmentOutput)
		}
	}

	return r0, r1
}

// RejectTransitGatewayVpcAttachmentWithContext provides a mock function.
func (_m *Mockec2API) RejectTransitGatewayVpcAttachmentWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RejectTransitGatewayVpcAttachmentInput, _parameter_2 ...request.Option) (_result_0 *ec2.RejectTransitGatewayVpcAttachmentOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RejectTransitGatewayVpcAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RejectTransitGatewayVpcAttachmentInput, ...request.Option) *ec2.RejectTransitGatewayVpcAttachmentOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectTransitGatewayVpcAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RejectTransitGatewayVpcAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectVpcEndpointConnections provides a mock function.
func (_m *Mockec2API) RejectVpcEndpointConnections(_parameter_0 *ec2.RejectVpcEndpointConnectionsInput) (_result_0 *ec2.RejectVpcEndpointConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RejectVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.RejectVpcEndpointConnectionsInput) *ec2.RejectVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RejectVpcEndpointConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectVpcEndpointConnectionsRequest provides a mock function.
func (_m *Mockec2API) RejectVpcEndpointConnectionsRequest(_parameter_0 *ec2.RejectVpcEndpointConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.RejectVpcEndpointConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RejectVpcEndpointConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RejectVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.RejectVpcEndpointConnectionsInput) *ec2.RejectVpcEndpointConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RejectVpcEndpointConnectionsOutput)
		}
	}

	return r0, r1
}

// RejectVpcEndpointConnectionsWithContext provides a mock function.
func (_m *Mockec2API) RejectVpcEndpointConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RejectVpcEndpointConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.RejectVpcEndpointConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RejectVpcEndpointConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RejectVpcEndpointConnectionsInput, ...request.Option) *ec2.RejectVpcEndpointConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectVpcEndpointConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RejectVpcEndpointConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectVpcPeeringConnection provides a mock function.
func (_m *Mockec2API) RejectVpcPeeringConnection(_parameter_0 *ec2.RejectVpcPeeringConnectionInput) (_result_0 *ec2.RejectVpcPeeringConnectionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RejectVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(*ec2.RejectVpcPeeringConnectionInput) *ec2.RejectVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RejectVpcPeeringConnectionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectVpcPeeringConnectionRequest provides a mock function.
func (_m *Mockec2API) RejectVpcPeeringConnectionRequest(_parameter_0 *ec2.RejectVpcPeeringConnectionInput) (_result_0 *request.Request, _result_1 *ec2.RejectVpcPeeringConnectionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RejectVpcPeeringConnectionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RejectVpcPeeringConnectionOutput
	if rf, ok := ret.Get(1).(func(*ec2.RejectVpcPeeringConnectionInput) *ec2.RejectVpcPeeringConnectionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RejectVpcPeeringConnectionOutput)
		}
	}

	return r0, r1
}

// RejectVpcPeeringConnectionWithContext provides a mock function.
func (_m *Mockec2API) RejectVpcPeeringConnectionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RejectVpcPeeringConnectionInput, _parameter_2 ...request.Option) (_result_0 *ec2.RejectVpcPeeringConnectionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RejectVpcPeeringConnectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RejectVpcPeeringConnectionInput, ...request.Option) *ec2.RejectVpcPeeringConnectionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RejectVpcPeeringConnectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RejectVpcPeeringConnectionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseAddress provides a mock function.
func (_m *Mockec2API) ReleaseAddress(_parameter_0 *ec2.ReleaseAddressInput) (_result_0 *ec2.ReleaseAddressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReleaseAddressOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReleaseAddressInput) *ec2.ReleaseAddressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReleaseAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReleaseAddressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseAddressRequest provides a mock function.
func (_m *Mockec2API) ReleaseAddressRequest(_parameter_0 *ec2.ReleaseAddressInput) (_result_0 *request.Request, _result_1 *ec2.ReleaseAddressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReleaseAddressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReleaseAddressOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReleaseAddressInput) *ec2.ReleaseAddressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReleaseAddressOutput)
		}
	}

	return r0, r1
}

// ReleaseAddressWithContext provides a mock function.
func (_m *Mockec2API) ReleaseAddressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReleaseAddressInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReleaseAddressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReleaseAddressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReleaseAddressInput, ...request.Option) *ec2.ReleaseAddressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReleaseAddressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReleaseAddressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseHosts provides a mock function.
func (_m *Mockec2API) ReleaseHosts(_parameter_0 *ec2.ReleaseHostsInput) (_result_0 *ec2.ReleaseHostsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReleaseHostsOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReleaseHostsInput) *ec2.ReleaseHostsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReleaseHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReleaseHostsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseHostsRequest provides a mock function.
func (_m *Mockec2API) ReleaseHostsRequest(_parameter_0 *ec2.ReleaseHostsInput) (_result_0 *request.Request, _result_1 *ec2.ReleaseHostsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReleaseHostsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReleaseHostsOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReleaseHostsInput) *ec2.ReleaseHostsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReleaseHostsOutput)
		}
	}

	return r0, r1
}

// ReleaseHostsWithContext provides a mock function.
func (_m *Mockec2API) ReleaseHostsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReleaseHostsInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReleaseHostsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReleaseHostsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReleaseHostsInput, ...request.Option) *ec2.ReleaseHostsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReleaseHostsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReleaseHostsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceIamInstanceProfileAssociation provides a mock function.
func (_m *Mockec2API) ReplaceIamInstanceProfileAssociation(_parameter_0 *ec2.ReplaceIamInstanceProfileAssociationInput) (_result_0 *ec2.ReplaceIamInstanceProfileAssociationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceIamInstanceProfileAssociationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceIamInstanceProfileAssociationInput) *ec2.ReplaceIamInstanceProfileAssociationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceIamInstanceProfileAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceIamInstanceProfileAssociationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceIamInstanceProfileAssociationRequest provides a mock function.
func (_m *Mockec2API) ReplaceIamInstanceProfileAssociationRequest(_parameter_0 *ec2.ReplaceIamInstanceProfileAssociationInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceIamInstanceProfileAssociationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceIamInstanceProfileAssociationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceIamInstanceProfileAssociationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceIamInstanceProfileAssociationInput) *ec2.ReplaceIamInstanceProfileAssociationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceIamInstanceProfileAssociationOutput)
		}
	}

	return r0, r1
}

// ReplaceIamInstanceProfileAssociationWithContext provides a mock function.
func (_m *Mockec2API) ReplaceIamInstanceProfileAssociationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceIamInstanceProfileAssociationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceIamInstanceProfileAssociationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceIamInstanceProfileAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceIamInstanceProfileAssociationInput, ...request.Option) *ec2.ReplaceIamInstanceProfileAssociationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceIamInstanceProfileAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceIamInstanceProfileAssociationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNetworkAclAssociation provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclAssociation(_parameter_0 *ec2.ReplaceNetworkAclAssociationInput) (_result_0 *ec2.ReplaceNetworkAclAssociationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceNetworkAclAssociationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceNetworkAclAssociationInput) *ec2.ReplaceNetworkAclAssociationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceNetworkAclAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceNetworkAclAssociationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNetworkAclAssociationRequest provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclAssociationRequest(_parameter_0 *ec2.ReplaceNetworkAclAssociationInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceNetworkAclAssociationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceNetworkAclAssociationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceNetworkAclAssociationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceNetworkAclAssociationInput) *ec2.ReplaceNetworkAclAssociationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceNetworkAclAssociationOutput)
		}
	}

	return r0, r1
}

// ReplaceNetworkAclAssociationWithContext provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclAssociationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceNetworkAclAssociationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceNetworkAclAssociationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceNetworkAclAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceNetworkAclAssociationInput, ...request.Option) *ec2.ReplaceNetworkAclAssociationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceNetworkAclAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceNetworkAclAssociationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNetworkAclEntry provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclEntry(_parameter_0 *ec2.ReplaceNetworkAclEntryInput) (_result_0 *ec2.ReplaceNetworkAclEntryOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceNetworkAclEntryInput) *ec2.ReplaceNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceNetworkAclEntryInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceNetworkAclEntryRequest provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclEntryRequest(_parameter_0 *ec2.ReplaceNetworkAclEntryInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceNetworkAclEntryOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceNetworkAclEntryInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceNetworkAclEntryOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceNetworkAclEntryInput) *ec2.ReplaceNetworkAclEntryOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceNetworkAclEntryOutput)
		}
	}

	return r0, r1
}

// ReplaceNetworkAclEntryWithContext provides a mock function.
func (_m *Mockec2API) ReplaceNetworkAclEntryWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceNetworkAclEntryInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceNetworkAclEntryOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceNetworkAclEntryOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceNetworkAclEntryInput, ...request.Option) *ec2.ReplaceNetworkAclEntryOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceNetworkAclEntryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceNetworkAclEntryInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceRoute provides a mock function.
func (_m *Mockec2API) ReplaceRoute(_parameter_0 *ec2.ReplaceRouteInput) (_result_0 *ec2.ReplaceRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceRouteInput) *ec2.ReplaceRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceRouteRequest provides a mock function.
func (_m *Mockec2API) ReplaceRouteRequest(_parameter_0 *ec2.ReplaceRouteInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceRouteInput) *ec2.ReplaceRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceRouteOutput)
		}
	}

	return r0, r1
}

// ReplaceRouteTableAssociation provides a mock function.
func (_m *Mockec2API) ReplaceRouteTableAssociation(_parameter_0 *ec2.ReplaceRouteTableAssociationInput) (_result_0 *ec2.ReplaceRouteTableAssociationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceRouteTableAssociationOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceRouteTableAssociationInput) *ec2.ReplaceRouteTableAssociationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceRouteTableAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceRouteTableAssociationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceRouteTableAssociationRequest provides a mock function.
func (_m *Mockec2API) ReplaceRouteTableAssociationRequest(_parameter_0 *ec2.ReplaceRouteTableAssociationInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceRouteTableAssociationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceRouteTableAssociationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceRouteTableAssociationOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceRouteTableAssociationInput) *ec2.ReplaceRouteTableAssociationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceRouteTableAssociationOutput)
		}
	}

	return r0, r1
}

// ReplaceRouteTableAssociationWithContext provides a mock function.
func (_m *Mockec2API) ReplaceRouteTableAssociationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceRouteTableAssociationInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceRouteTableAssociationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceRouteTableAssociationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceRouteTableAssociationInput, ...request.Option) *ec2.ReplaceRouteTableAssociationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceRouteTableAssociationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceRouteTableAssociationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceRouteWithContext provides a mock function.
func (_m *Mockec2API) ReplaceRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceRouteInput, ...request.Option) *ec2.ReplaceRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceTransitGatewayRoute provides a mock function.
func (_m *Mockec2API) ReplaceTransitGatewayRoute(_parameter_0 *ec2.ReplaceTransitGatewayRouteInput) (_result_0 *ec2.ReplaceTransitGatewayRouteOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReplaceTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceTransitGatewayRouteInput) *ec2.ReplaceTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceTransitGatewayRouteInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceTransitGatewayRouteRequest provides a mock function.
func (_m *Mockec2API) ReplaceTransitGatewayRouteRequest(_parameter_0 *ec2.ReplaceTransitGatewayRouteInput) (_result_0 *request.Request, _result_1 *ec2.ReplaceTransitGatewayRouteOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReplaceTransitGatewayRouteInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReplaceTransitGatewayRouteOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReplaceTransitGatewayRouteInput) *ec2.ReplaceTransitGatewayRouteOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReplaceTransitGatewayRouteOutput)
		}
	}

	return r0, r1
}

// ReplaceTransitGatewayRouteWithContext provides a mock function.
func (_m *Mockec2API) ReplaceTransitGatewayRouteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReplaceTransitGatewayRouteInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReplaceTransitGatewayRouteOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReplaceTransitGatewayRouteOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReplaceTransitGatewayRouteInput, ...request.Option) *ec2.ReplaceTransitGatewayRouteOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReplaceTransitGatewayRouteOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReplaceTransitGatewayRouteInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportInstanceStatus provides a mock function.
func (_m *Mockec2API) ReportInstanceStatus(_parameter_0 *ec2.ReportInstanceStatusInput) (_result_0 *ec2.ReportInstanceStatusOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ReportInstanceStatusOutput
	if rf, ok := ret.Get(0).(func(*ec2.ReportInstanceStatusInput) *ec2.ReportInstanceStatusOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReportInstanceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ReportInstanceStatusInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportInstanceStatusRequest provides a mock function.
func (_m *Mockec2API) ReportInstanceStatusRequest(_parameter_0 *ec2.ReportInstanceStatusInput) (_result_0 *request.Request, _result_1 *ec2.ReportInstanceStatusOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ReportInstanceStatusInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ReportInstanceStatusOutput
	if rf, ok := ret.Get(1).(func(*ec2.ReportInstanceStatusInput) *ec2.ReportInstanceStatusOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ReportInstanceStatusOutput)
		}
	}

	return r0, r1
}

// ReportInstanceStatusWithContext provides a mock function.
func (_m *Mockec2API) ReportInstanceStatusWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ReportInstanceStatusInput, _parameter_2 ...request.Option) (_result_0 *ec2.ReportInstanceStatusOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ReportInstanceStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ReportInstanceStatusInput, ...request.Option) *ec2.ReportInstanceStatusOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ReportInstanceStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ReportInstanceStatusInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSpotFleet provides a mock function.
func (_m *Mockec2API) RequestSpotFleet(_parameter_0 *ec2.RequestSpotFleetInput) (_result_0 *ec2.RequestSpotFleetOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RequestSpotFleetOutput
	if rf, ok := ret.Get(0).(func(*ec2.RequestSpotFleetInput) *ec2.RequestSpotFleetOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RequestSpotFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RequestSpotFleetInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSpotFleetRequest provides a mock function.
func (_m *Mockec2API) RequestSpotFleetRequest(_parameter_0 *ec2.RequestSpotFleetInput) (_result_0 *request.Request, _result_1 *ec2.RequestSpotFleetOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RequestSpotFleetInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RequestSpotFleetOutput
	if rf, ok := ret.Get(1).(func(*ec2.RequestSpotFleetInput) *ec2.RequestSpotFleetOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RequestSpotFleetOutput)
		}
	}

	return r0, r1
}

// RequestSpotFleetWithContext provides a mock function.
func (_m *Mockec2API) RequestSpotFleetWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RequestSpotFleetInput, _parameter_2 ...request.Option) (_result_0 *ec2.RequestSpotFleetOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RequestSpotFleetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RequestSpotFleetInput, ...request.Option) *ec2.RequestSpotFleetOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RequestSpotFleetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RequestSpotFleetInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSpotInstances provides a mock function.
func (_m *Mockec2API) RequestSpotInstances(_parameter_0 *ec2.RequestSpotInstancesInput) (_result_0 *ec2.RequestSpotInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RequestSpotInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.RequestSpotInstancesInput) *ec2.RequestSpotInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RequestSpotInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RequestSpotInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestSpotInstancesRequest provides a mock function.
func (_m *Mockec2API) RequestSpotInstancesRequest(_parameter_0 *ec2.RequestSpotInstancesInput) (_result_0 *request.Request, _result_1 *ec2.RequestSpotInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RequestSpotInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RequestSpotInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.RequestSpotInstancesInput) *ec2.RequestSpotInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RequestSpotInstancesOutput)
		}
	}

	return r0, r1
}

// RequestSpotInstancesWithContext provides a mock function.
func (_m *Mockec2API) RequestSpotInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RequestSpotInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.RequestSpotInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RequestSpotInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RequestSpotInstancesInput, ...request.Option) *ec2.RequestSpotInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RequestSpotInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RequestSpotInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetEbsDefaultKmsKeyId provides a mock function.
func (_m *Mockec2API) ResetEbsDefaultKmsKeyId(_parameter_0 *ec2.ResetEbsDefaultKmsKeyIdInput) (_result_0 *ec2.ResetEbsDefaultKmsKeyIdOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetEbsDefaultKmsKeyIdInput) *ec2.ResetEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetEbsDefaultKmsKeyIdInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetEbsDefaultKmsKeyIdRequest provides a mock function.
func (_m *Mockec2API) ResetEbsDefaultKmsKeyIdRequest(_parameter_0 *ec2.ResetEbsDefaultKmsKeyIdInput) (_result_0 *request.Request, _result_1 *ec2.ResetEbsDefaultKmsKeyIdOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetEbsDefaultKmsKeyIdInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetEbsDefaultKmsKeyIdInput) *ec2.ResetEbsDefaultKmsKeyIdOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetEbsDefaultKmsKeyIdOutput)
		}
	}

	return r0, r1
}

// ResetEbsDefaultKmsKeyIdWithContext provides a mock function.
func (_m *Mockec2API) ResetEbsDefaultKmsKeyIdWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetEbsDefaultKmsKeyIdInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetEbsDefaultKmsKeyIdOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetEbsDefaultKmsKeyIdOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetEbsDefaultKmsKeyIdInput, ...request.Option) *ec2.ResetEbsDefaultKmsKeyIdOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetEbsDefaultKmsKeyIdOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetEbsDefaultKmsKeyIdInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetFpgaImageAttribute provides a mock function.
func (_m *Mockec2API) ResetFpgaImageAttribute(_parameter_0 *ec2.ResetFpgaImageAttributeInput) (_result_0 *ec2.ResetFpgaImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetFpgaImageAttributeInput) *ec2.ResetFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetFpgaImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetFpgaImageAttributeRequest provides a mock function.
func (_m *Mockec2API) ResetFpgaImageAttributeRequest(_parameter_0 *ec2.ResetFpgaImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ResetFpgaImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetFpgaImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetFpgaImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetFpgaImageAttributeInput) *ec2.ResetFpgaImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetFpgaImageAttributeOutput)
		}
	}

	return r0, r1
}

// ResetFpgaImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) ResetFpgaImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetFpgaImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetFpgaImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetFpgaImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetFpgaImageAttributeInput, ...request.Option) *ec2.ResetFpgaImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetFpgaImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetFpgaImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetImageAttribute provides a mock function.
func (_m *Mockec2API) ResetImageAttribute(_parameter_0 *ec2.ResetImageAttributeInput) (_result_0 *ec2.ResetImageAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetImageAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetImageAttributeInput) *ec2.ResetImageAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetImageAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetImageAttributeRequest provides a mock function.
func (_m *Mockec2API) ResetImageAttributeRequest(_parameter_0 *ec2.ResetImageAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ResetImageAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetImageAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetImageAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetImageAttributeInput) *ec2.ResetImageAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetImageAttributeOutput)
		}
	}

	return r0, r1
}

// ResetImageAttributeWithContext provides a mock function.
func (_m *Mockec2API) ResetImageAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetImageAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetImageAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetImageAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetImageAttributeInput, ...request.Option) *ec2.ResetImageAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetImageAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetImageAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstanceAttribute provides a mock function.
func (_m *Mockec2API) ResetInstanceAttribute(_parameter_0 *ec2.ResetInstanceAttributeInput) (_result_0 *ec2.ResetInstanceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetInstanceAttributeInput) *ec2.ResetInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetInstanceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetInstanceAttributeRequest provides a mock function.
func (_m *Mockec2API) ResetInstanceAttributeRequest(_parameter_0 *ec2.ResetInstanceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ResetInstanceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetInstanceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetInstanceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetInstanceAttributeInput) *ec2.ResetInstanceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetInstanceAttributeOutput)
		}
	}

	return r0, r1
}

// ResetInstanceAttributeWithContext provides a mock function.
func (_m *Mockec2API) ResetInstanceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetInstanceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetInstanceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetInstanceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetInstanceAttributeInput, ...request.Option) *ec2.ResetInstanceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetInstanceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetInstanceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNetworkInterfaceAttribute provides a mock function.
func (_m *Mockec2API) ResetNetworkInterfaceAttribute(_parameter_0 *ec2.ResetNetworkInterfaceAttributeInput) (_result_0 *ec2.ResetNetworkInterfaceAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetNetworkInterfaceAttributeInput) *ec2.ResetNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetNetworkInterfaceAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNetworkInterfaceAttributeRequest provides a mock function.
func (_m *Mockec2API) ResetNetworkInterfaceAttributeRequest(_parameter_0 *ec2.ResetNetworkInterfaceAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ResetNetworkInterfaceAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetNetworkInterfaceAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetNetworkInterfaceAttributeInput) *ec2.ResetNetworkInterfaceAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetNetworkInterfaceAttributeOutput)
		}
	}

	return r0, r1
}

// ResetNetworkInterfaceAttributeWithContext provides a mock function.
func (_m *Mockec2API) ResetNetworkInterfaceAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetNetworkInterfaceAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetNetworkInterfaceAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetNetworkInterfaceAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetNetworkInterfaceAttributeInput, ...request.Option) *ec2.ResetNetworkInterfaceAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetNetworkInterfaceAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetNetworkInterfaceAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSnapshotAttribute provides a mock function.
func (_m *Mockec2API) ResetSnapshotAttribute(_parameter_0 *ec2.ResetSnapshotAttributeInput) (_result_0 *ec2.ResetSnapshotAttributeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.ResetSnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(*ec2.ResetSnapshotAttributeInput) *ec2.ResetSnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetSnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.ResetSnapshotAttributeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetSnapshotAttributeRequest provides a mock function.
func (_m *Mockec2API) ResetSnapshotAttributeRequest(_parameter_0 *ec2.ResetSnapshotAttributeInput) (_result_0 *request.Request, _result_1 *ec2.ResetSnapshotAttributeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.ResetSnapshotAttributeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.ResetSnapshotAttributeOutput
	if rf, ok := ret.Get(1).(func(*ec2.ResetSnapshotAttributeInput) *ec2.ResetSnapshotAttributeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.ResetSnapshotAttributeOutput)
		}
	}

	return r0, r1
}

// ResetSnapshotAttributeWithContext provides a mock function.
func (_m *Mockec2API) ResetSnapshotAttributeWithContext(_parameter_0 context.Context, _parameter_1 *ec2.ResetSnapshotAttributeInput, _parameter_2 ...request.Option) (_result_0 *ec2.ResetSnapshotAttributeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.ResetSnapshotAttributeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.ResetSnapshotAttributeInput, ...request.Option) *ec2.ResetSnapshotAttributeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.ResetSnapshotAttributeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.ResetSnapshotAttributeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreAddressToClassic provides a mock function.
func (_m *Mockec2API) RestoreAddressToClassic(_parameter_0 *ec2.RestoreAddressToClassicInput) (_result_0 *ec2.RestoreAddressToClassicOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RestoreAddressToClassicOutput
	if rf, ok := ret.Get(0).(func(*ec2.RestoreAddressToClassicInput) *ec2.RestoreAddressToClassicOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RestoreAddressToClassicOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RestoreAddressToClassicInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreAddressToClassicRequest provides a mock function.
func (_m *Mockec2API) RestoreAddressToClassicRequest(_parameter_0 *ec2.RestoreAddressToClassicInput) (_result_0 *request.Request, _result_1 *ec2.RestoreAddressToClassicOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RestoreAddressToClassicInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RestoreAddressToClassicOutput
	if rf, ok := ret.Get(1).(func(*ec2.RestoreAddressToClassicInput) *ec2.RestoreAddressToClassicOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RestoreAddressToClassicOutput)
		}
	}

	return r0, r1
}

// RestoreAddressToClassicWithContext provides a mock function.
func (_m *Mockec2API) RestoreAddressToClassicWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RestoreAddressToClassicInput, _parameter_2 ...request.Option) (_result_0 *ec2.RestoreAddressToClassicOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RestoreAddressToClassicOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RestoreAddressToClassicInput, ...request.Option) *ec2.RestoreAddressToClassicOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RestoreAddressToClassicOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RestoreAddressToClassicInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreManagedPrefixListVersion provides a mock function.
func (_m *Mockec2API) RestoreManagedPrefixListVersion(_parameter_0 *ec2.RestoreManagedPrefixListVersionInput) (_result_0 *ec2.RestoreManagedPrefixListVersionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RestoreManagedPrefixListVersionOutput
	if rf, ok := ret.Get(0).(func(*ec2.RestoreManagedPrefixListVersionInput) *ec2.RestoreManagedPrefixListVersionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RestoreManagedPrefixListVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RestoreManagedPrefixListVersionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreManagedPrefixListVersionRequest provides a mock function.
func (_m *Mockec2API) RestoreManagedPrefixListVersionRequest(_parameter_0 *ec2.RestoreManagedPrefixListVersionInput) (_result_0 *request.Request, _result_1 *ec2.RestoreManagedPrefixListVersionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RestoreManagedPrefixListVersionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RestoreManagedPrefixListVersionOutput
	if rf, ok := ret.Get(1).(func(*ec2.RestoreManagedPrefixListVersionInput) *ec2.RestoreManagedPrefixListVersionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RestoreManagedPrefixListVersionOutput)
		}
	}

	return r0, r1
}

// RestoreManagedPrefixListVersionWithContext provides a mock function.
func (_m *Mockec2API) RestoreManagedPrefixListVersionWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RestoreManagedPrefixListVersionInput, _parameter_2 ...request.Option) (_result_0 *ec2.RestoreManagedPrefixListVersionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RestoreManagedPrefixListVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RestoreManagedPrefixListVersionInput, ...request.Option) *ec2.RestoreManagedPrefixListVersionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RestoreManagedPrefixListVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RestoreManagedPrefixListVersionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeClientVpnIngress provides a mock function.
func (_m *Mockec2API) RevokeClientVpnIngress(_parameter_0 *ec2.RevokeClientVpnIngressInput) (_result_0 *ec2.RevokeClientVpnIngressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RevokeClientVpnIngressOutput
	if rf, ok := ret.Get(0).(func(*ec2.RevokeClientVpnIngressInput) *ec2.RevokeClientVpnIngressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeClientVpnIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RevokeClientVpnIngressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeClientVpnIngressRequest provides a mock function.
func (_m *Mockec2API) RevokeClientVpnIngressRequest(_parameter_0 *ec2.RevokeClientVpnIngressInput) (_result_0 *request.Request, _result_1 *ec2.RevokeClientVpnIngressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RevokeClientVpnIngressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RevokeClientVpnIngressOutput
	if rf, ok := ret.Get(1).(func(*ec2.RevokeClientVpnIngressInput) *ec2.RevokeClientVpnIngressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RevokeClientVpnIngressOutput)
		}
	}

	return r0, r1
}

// RevokeClientVpnIngressWithContext provides a mock function.
func (_m *Mockec2API) RevokeClientVpnIngressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RevokeClientVpnIngressInput, _parameter_2 ...request.Option) (_result_0 *ec2.RevokeClientVpnIngressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RevokeClientVpnIngressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RevokeClientVpnIngressInput, ...request.Option) *ec2.RevokeClientVpnIngressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeClientVpnIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RevokeClientVpnIngressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSecurityGroupEgress provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupEgress(_parameter_0 *ec2.RevokeSecurityGroupEgressInput) (_result_0 *ec2.RevokeSecurityGroupEgressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RevokeSecurityGroupEgressOutput
	if rf, ok := ret.Get(0).(func(*ec2.RevokeSecurityGroupEgressInput) *ec2.RevokeSecurityGroupEgressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeSecurityGroupEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RevokeSecurityGroupEgressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSecurityGroupEgressRequest provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupEgressRequest(_parameter_0 *ec2.RevokeSecurityGroupEgressInput) (_result_0 *request.Request, _result_1 *ec2.RevokeSecurityGroupEgressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RevokeSecurityGroupEgressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RevokeSecurityGroupEgressOutput
	if rf, ok := ret.Get(1).(func(*ec2.RevokeSecurityGroupEgressInput) *ec2.RevokeSecurityGroupEgressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RevokeSecurityGroupEgressOutput)
		}
	}

	return r0, r1
}

// RevokeSecurityGroupEgressWithContext provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupEgressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RevokeSecurityGroupEgressInput, _parameter_2 ...request.Option) (_result_0 *ec2.RevokeSecurityGroupEgressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RevokeSecurityGroupEgressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RevokeSecurityGroupEgressInput, ...request.Option) *ec2.RevokeSecurityGroupEgressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeSecurityGroupEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RevokeSecurityGroupEgressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSecurityGroupIngress provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupIngress(_parameter_0 *ec2.RevokeSecurityGroupIngressInput) (_result_0 *ec2.RevokeSecurityGroupIngressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RevokeSecurityGroupIngressOutput
	if rf, ok := ret.Get(0).(func(*ec2.RevokeSecurityGroupIngressInput) *ec2.RevokeSecurityGroupIngressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeSecurityGroupIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RevokeSecurityGroupIngressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSecurityGroupIngressRequest provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupIngressRequest(_parameter_0 *ec2.RevokeSecurityGroupIngressInput) (_result_0 *request.Request, _result_1 *ec2.RevokeSecurityGroupIngressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RevokeSecurityGroupIngressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RevokeSecurityGroupIngressOutput
	if rf, ok := ret.Get(1).(func(*ec2.RevokeSecurityGroupIngressInput) *ec2.RevokeSecurityGroupIngressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RevokeSecurityGroupIngressOutput)
		}
	}

	return r0, r1
}

// RevokeSecurityGroupIngressWithContext provides a mock function.
func (_m *Mockec2API) RevokeSecurityGroupIngressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RevokeSecurityGroupIngressInput, _parameter_2 ...request.Option) (_result_0 *ec2.RevokeSecurityGroupIngressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RevokeSecurityGroupIngressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RevokeSecurityGroupIngressInput, ...request.Option) *ec2.RevokeSecurityGroupIngressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RevokeSecurityGroupIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RevokeSecurityGroupIngressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunInstances provides a mock function.
func (_m *Mockec2API) RunInstances(_parameter_0 *ec2.RunInstancesInput) (_result_0 *ec2.Reservation, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.Reservation
	if rf, ok := ret.Get(0).(func(*ec2.RunInstancesInput) *ec2.Reservation); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RunInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunInstancesRequest provides a mock function.
func (_m *Mockec2API) RunInstancesRequest(_parameter_0 *ec2.RunInstancesInput) (_result_0 *request.Request, _result_1 *ec2.Reservation) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RunInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.Reservation
	if rf, ok := ret.Get(1).(func(*ec2.RunInstancesInput) *ec2.Reservation); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.Reservation)
		}
	}

	return r0, r1
}

// RunInstancesWithContext provides a mock function.
func (_m *Mockec2API) RunInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RunInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.Reservation, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RunInstancesInput, ...request.Option) *ec2.Reservation); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RunInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunScheduledInstances provides a mock function.
func (_m *Mockec2API) RunScheduledInstances(_parameter_0 *ec2.RunScheduledInstancesInput) (_result_0 *ec2.RunScheduledInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.RunScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.RunScheduledInstancesInput) *ec2.RunScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RunScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.RunScheduledInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunScheduledInstancesRequest provides a mock function.
func (_m *Mockec2API) RunScheduledInstancesRequest(_parameter_0 *ec2.RunScheduledInstancesInput) (_result_0 *request.Request, _result_1 *ec2.RunScheduledInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.RunScheduledInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.RunScheduledInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.RunScheduledInstancesInput) *ec2.RunScheduledInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.RunScheduledInstancesOutput)
		}
	}

	return r0, r1
}

// RunScheduledInstancesWithContext provides a mock function.
func (_m *Mockec2API) RunScheduledInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.RunScheduledInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.RunScheduledInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.RunScheduledInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.RunScheduledInstancesInput, ...request.Option) *ec2.RunScheduledInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.RunScheduledInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.RunScheduledInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchLocalGatewayRoutes provides a mock function.
func (_m *Mockec2API) SearchLocalGatewayRoutes(_parameter_0 *ec2.SearchLocalGatewayRoutesInput) (_result_0 *ec2.SearchLocalGatewayRoutesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.SearchLocalGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(*ec2.SearchLocalGatewayRoutesInput) *ec2.SearchLocalGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchLocalGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.SearchLocalGatewayRoutesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchLocalGatewayRoutesPages provides a mock function.
func (_m *Mockec2API) SearchLocalGatewayRoutesPages(_parameter_0 *ec2.SearchLocalGatewayRoutesInput, _parameter_1 func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.SearchLocalGatewayRoutesInput, func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchLocalGatewayRoutesPagesWithContext provides a mock function.
func (_m *Mockec2API) SearchLocalGatewayRoutesPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SearchLocalGatewayRoutesInput, _parameter_2 func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SearchLocalGatewayRoutesInput, func(*ec2.SearchLocalGatewayRoutesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchLocalGatewayRoutesRequest provides a mock function.
func (_m *Mockec2API) SearchLocalGatewayRoutesRequest(_parameter_0 *ec2.SearchLocalGatewayRoutesInput) (_result_0 *request.Request, _result_1 *ec2.SearchLocalGatewayRoutesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.SearchLocalGatewayRoutesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.SearchLocalGatewayRoutesOutput
	if rf, ok := ret.Get(1).(func(*ec2.SearchLocalGatewayRoutesInput) *ec2.SearchLocalGatewayRoutesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.SearchLocalGatewayRoutesOutput)
		}
	}

	return r0, r1
}

// SearchLocalGatewayRoutesWithContext provides a mock function.
func (_m *Mockec2API) SearchLocalGatewayRoutesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SearchLocalGatewayRoutesInput, _parameter_2 ...request.Option) (_result_0 *ec2.SearchLocalGatewayRoutesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.SearchLocalGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SearchLocalGatewayRoutesInput, ...request.Option) *ec2.SearchLocalGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchLocalGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.SearchLocalGatewayRoutesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTransitGatewayMulticastGroups provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayMulticastGroups(_parameter_0 *ec2.SearchTransitGatewayMulticastGroupsInput) (_result_0 *ec2.SearchTransitGatewayMulticastGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.SearchTransitGatewayMulticastGroupsOutput
	if rf, ok := ret.Get(0).(func(*ec2.SearchTransitGatewayMulticastGroupsInput) *ec2.SearchTransitGatewayMulticastGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchTransitGatewayMulticastGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.SearchTransitGatewayMulticastGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTransitGatewayMulticastGroupsPages provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayMulticastGroupsPages(_parameter_0 *ec2.SearchTransitGatewayMulticastGroupsInput, _parameter_1 func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.SearchTransitGatewayMulticastGroupsInput, func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchTransitGatewayMulticastGroupsPagesWithContext provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayMulticastGroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SearchTransitGatewayMulticastGroupsInput, _parameter_2 func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SearchTransitGatewayMulticastGroupsInput, func(*ec2.SearchTransitGatewayMulticastGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchTransitGatewayMulticastGroupsRequest provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayMulticastGroupsRequest(_parameter_0 *ec2.SearchTransitGatewayMulticastGroupsInput) (_result_0 *request.Request, _result_1 *ec2.SearchTransitGatewayMulticastGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.SearchTransitGatewayMulticastGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.SearchTransitGatewayMulticastGroupsOutput
	if rf, ok := ret.Get(1).(func(*ec2.SearchTransitGatewayMulticastGroupsInput) *ec2.SearchTransitGatewayMulticastGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.SearchTransitGatewayMulticastGroupsOutput)
		}
	}

	return r0, r1
}

// SearchTransitGatewayMulticastGroupsWithContext provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayMulticastGroupsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SearchTransitGatewayMulticastGroupsInput, _parameter_2 ...request.Option) (_result_0 *ec2.SearchTransitGatewayMulticastGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.SearchTransitGatewayMulticastGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SearchTransitGatewayMulticastGroupsInput, ...request.Option) *ec2.SearchTransitGatewayMulticastGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchTransitGatewayMulticastGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.SearchTransitGatewayMulticastGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTransitGatewayRoutes provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayRoutes(_parameter_0 *ec2.SearchTransitGatewayRoutesInput) (_result_0 *ec2.SearchTransitGatewayRoutesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.SearchTransitGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(*ec2.SearchTransitGatewayRoutesInput) *ec2.SearchTransitGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchTransitGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.SearchTransitGatewayRoutesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTransitGatewayRoutesRequest provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayRoutesRequest(_parameter_0 *ec2.SearchTransitGatewayRoutesInput) (_result_0 *request.Request, _result_1 *ec2.SearchTransitGatewayRoutesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.SearchTransitGatewayRoutesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.SearchTransitGatewayRoutesOutput
	if rf, ok := ret.Get(1).(func(*ec2.SearchTransitGatewayRoutesInput) *ec2.SearchTransitGatewayRoutesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.SearchTransitGatewayRoutesOutput)
		}
	}

	return r0, r1
}

// SearchTransitGatewayRoutesWithContext provides a mock function.
func (_m *Mockec2API) SearchTransitGatewayRoutesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SearchTransitGatewayRoutesInput, _parameter_2 ...request.Option) (_result_0 *ec2.SearchTransitGatewayRoutesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.SearchTransitGatewayRoutesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SearchTransitGatewayRoutesInput, ...request.Option) *ec2.SearchTransitGatewayRoutesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SearchTransitGatewayRoutesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.SearchTransitGatewayRoutesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendDiagnosticInterrupt provides a mock function.
func (_m *Mockec2API) SendDiagnosticInterrupt(_parameter_0 *ec2.SendDiagnosticInterruptInput) (_result_0 *ec2.SendDiagnosticInterruptOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.SendDiagnosticInterruptOutput
	if rf, ok := ret.Get(0).(func(*ec2.SendDiagnosticInterruptInput) *ec2.SendDiagnosticInterruptOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SendDiagnosticInterruptOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.SendDiagnosticInterruptInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendDiagnosticInterruptRequest provides a mock function.
func (_m *Mockec2API) SendDiagnosticInterruptRequest(_parameter_0 *ec2.SendDiagnosticInterruptInput) (_result_0 *request.Request, _result_1 *ec2.SendDiagnosticInterruptOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.SendDiagnosticInterruptInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.SendDiagnosticInterruptOutput
	if rf, ok := ret.Get(1).(func(*ec2.SendDiagnosticInterruptInput) *ec2.SendDiagnosticInterruptOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.SendDiagnosticInterruptOutput)
		}
	}

	return r0, r1
}

// SendDiagnosticInterruptWithContext provides a mock function.
func (_m *Mockec2API) SendDiagnosticInterruptWithContext(_parameter_0 context.Context, _parameter_1 *ec2.SendDiagnosticInterruptInput, _parameter_2 ...request.Option) (_result_0 *ec2.SendDiagnosticInterruptOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.SendDiagnosticInterruptOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.SendDiagnosticInterruptInput, ...request.Option) *ec2.SendDiagnosticInterruptOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.SendDiagnosticInterruptOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.SendDiagnosticInterruptInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstances provides a mock function.
func (_m *Mockec2API) StartInstances(_parameter_0 *ec2.StartInstancesInput) (_result_0 *ec2.StartInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.StartInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.StartInstancesInput) *ec2.StartInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StartInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.StartInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstancesRequest provides a mock function.
func (_m *Mockec2API) StartInstancesRequest(_parameter_0 *ec2.StartInstancesInput) (_result_0 *request.Request, _result_1 *ec2.StartInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.StartInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.StartInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.StartInstancesInput) *ec2.StartInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.StartInstancesOutput)
		}
	}

	return r0, r1
}

// StartInstancesWithContext provides a mock function.
func (_m *Mockec2API) StartInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.StartInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.StartInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.StartInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.StartInstancesInput, ...request.Option) *ec2.StartInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StartInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.StartInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVpcEndpointServicePrivateDnsVerification provides a mock function.
func (_m *Mockec2API) StartVpcEndpointServicePrivateDnsVerification(_parameter_0 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (_result_0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	if rf, ok := ret.Get(0).(func(*ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.StartVpcEndpointServicePrivateDnsVerificationInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVpcEndpointServicePrivateDnsVerificationRequest provides a mock function.
func (_m *Mockec2API) StartVpcEndpointServicePrivateDnsVerificationRequest(_parameter_0 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput) (_result_0 *request.Request, _result_1 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	if rf, ok := ret.Get(1).(func(*ec2.StartVpcEndpointServicePrivateDnsVerificationInput) *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
		}
	}

	return r0, r1
}

// StartVpcEndpointServicePrivateDnsVerificationWithContext provides a mock function.
func (_m *Mockec2API) StartVpcEndpointServicePrivateDnsVerificationWithContext(_parameter_0 context.Context, _parameter_1 *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, _parameter_2 ...request.Option) (_result_0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, ...request.Option) *ec2.StartVpcEndpointServicePrivateDnsVerificationOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StartVpcEndpointServicePrivateDnsVerificationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.StartVpcEndpointServicePrivateDnsVerificationInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstances provides a mock function.
func (_m *Mockec2API) StopInstances(_parameter_0 *ec2.StopInstancesInput) (_result_0 *ec2.StopInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.StopInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.StopInstancesInput) *ec2.StopInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StopInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.StopInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstancesRequest provides a mock function.
func (_m *Mockec2API) StopInstancesRequest(_parameter_0 *ec2.StopInstancesInput) (_result_0 *request.Request, _result_1 *ec2.StopInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.StopInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.StopInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.StopInstancesInput) *ec2.StopInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.StopInstancesOutput)
		}
	}

	return r0, r1
}

// StopInstancesWithContext provides a mock function.
func (_m *Mockec2API) StopInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.StopInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.StopInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.StopInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.StopInstancesInput, ...request.Option) *ec2.StopInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.StopInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.StopInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateClientVpnConnections provides a mock function.
func (_m *Mockec2API) TerminateClientVpnConnections(_parameter_0 *ec2.TerminateClientVpnConnectionsInput) (_result_0 *ec2.TerminateClientVpnConnectionsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.TerminateClientVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(*ec2.TerminateClientVpnConnectionsInput) *ec2.TerminateClientVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.TerminateClientVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.TerminateClientVpnConnectionsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateClientVpnConnectionsRequest provides a mock function.
func (_m *Mockec2API) TerminateClientVpnConnectionsRequest(_parameter_0 *ec2.TerminateClientVpnConnectionsInput) (_result_0 *request.Request, _result_1 *ec2.TerminateClientVpnConnectionsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.TerminateClientVpnConnectionsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.TerminateClientVpnConnectionsOutput
	if rf, ok := ret.Get(1).(func(*ec2.TerminateClientVpnConnectionsInput) *ec2.TerminateClientVpnConnectionsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.TerminateClientVpnConnectionsOutput)
		}
	}

	return r0, r1
}

// TerminateClientVpnConnectionsWithContext provides a mock function.
func (_m *Mockec2API) TerminateClientVpnConnectionsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.TerminateClientVpnConnectionsInput, _parameter_2 ...request.Option) (_result_0 *ec2.TerminateClientVpnConnectionsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.TerminateClientVpnConnectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.TerminateClientVpnConnectionsInput, ...request.Option) *ec2.TerminateClientVpnConnectionsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.TerminateClientVpnConnectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.TerminateClientVpnConnectionsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateInstances provides a mock function.
func (_m *Mockec2API) TerminateInstances(_parameter_0 *ec2.TerminateInstancesInput) (_result_0 *ec2.TerminateInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.TerminateInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.TerminateInstancesInput) *ec2.TerminateInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.TerminateInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.TerminateInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateInstancesRequest provides a mock function.
func (_m *Mockec2API) TerminateInstancesRequest(_parameter_0 *ec2.TerminateInstancesInput) (_result_0 *request.Request, _result_1 *ec2.TerminateInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.TerminateInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.TerminateInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.TerminateInstancesInput) *ec2.TerminateInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.TerminateInstancesOutput)
		}
	}

	return r0, r1
}

// TerminateInstancesWithContext provides a mock function.
func (_m *Mockec2API) TerminateInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.TerminateInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.TerminateInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.TerminateInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.TerminateInstancesInput, ...request.Option) *ec2.TerminateInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.TerminateInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.TerminateInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignIpv6Addresses provides a mock function.
func (_m *Mockec2API) UnassignIpv6Addresses(_parameter_0 *ec2.UnassignIpv6AddressesInput) (_result_0 *ec2.UnassignIpv6AddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.UnassignIpv6AddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.UnassignIpv6AddressesInput) *ec2.UnassignIpv6AddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnassignIpv6AddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.UnassignIpv6AddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignIpv6AddressesRequest provides a mock function.
func (_m *Mockec2API) UnassignIpv6AddressesRequest(_parameter_0 *ec2.UnassignIpv6AddressesInput) (_result_0 *request.Request, _result_1 *ec2.UnassignIpv6AddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.UnassignIpv6AddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.UnassignIpv6AddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.UnassignIpv6AddressesInput) *ec2.UnassignIpv6AddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.UnassignIpv6AddressesOutput)
		}
	}

	return r0, r1
}

// UnassignIpv6AddressesWithContext provides a mock function.
func (_m *Mockec2API) UnassignIpv6AddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.UnassignIpv6AddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.UnassignIpv6AddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.UnassignIpv6AddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.UnassignIpv6AddressesInput, ...request.Option) *ec2.UnassignIpv6AddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnassignIpv6AddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.UnassignIpv6AddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignPrivateIpAddresses provides a mock function.
func (_m *Mockec2API) UnassignPrivateIpAddresses(_parameter_0 *ec2.UnassignPrivateIpAddressesInput) (_result_0 *ec2.UnassignPrivateIpAddressesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.UnassignPrivateIpAddressesOutput
	if rf, ok := ret.Get(0).(func(*ec2.UnassignPrivateIpAddressesInput) *ec2.UnassignPrivateIpAddressesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnassignPrivateIpAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.UnassignPrivateIpAddressesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignPrivateIpAddressesRequest provides a mock function.
func (_m *Mockec2API) UnassignPrivateIpAddressesRequest(_parameter_0 *ec2.UnassignPrivateIpAddressesInput) (_result_0 *request.Request, _result_1 *ec2.UnassignPrivateIpAddressesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.UnassignPrivateIpAddressesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.UnassignPrivateIpAddressesOutput
	if rf, ok := ret.Get(1).(func(*ec2.UnassignPrivateIpAddressesInput) *ec2.UnassignPrivateIpAddressesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.UnassignPrivateIpAddressesOutput)
		}
	}

	return r0, r1
}

// UnassignPrivateIpAddressesWithContext provides a mock function.
func (_m *Mockec2API) UnassignPrivateIpAddressesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.UnassignPrivateIpAddressesInput, _parameter_2 ...request.Option) (_result_0 *ec2.UnassignPrivateIpAddressesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.UnassignPrivateIpAddressesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.UnassignPrivateIpAddressesInput, ...request.Option) *ec2.UnassignPrivateIpAddressesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnassignPrivateIpAddressesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.UnassignPrivateIpAddressesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmonitorInstances provides a mock function.
func (_m *Mockec2API) UnmonitorInstances(_parameter_0 *ec2.UnmonitorInstancesInput) (_result_0 *ec2.UnmonitorInstancesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.UnmonitorInstancesOutput
	if rf, ok := ret.Get(0).(func(*ec2.UnmonitorInstancesInput) *ec2.UnmonitorInstancesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnmonitorInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.UnmonitorInstancesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmonitorInstancesRequest provides a mock function.
func (_m *Mockec2API) UnmonitorInstancesRequest(_parameter_0 *ec2.UnmonitorInstancesInput) (_result_0 *request.Request, _result_1 *ec2.UnmonitorInstancesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.UnmonitorInstancesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.UnmonitorInstancesOutput
	if rf, ok := ret.Get(1).(func(*ec2.UnmonitorInstancesInput) *ec2.UnmonitorInstancesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.UnmonitorInstancesOutput)
		}
	}

	return r0, r1
}

// UnmonitorInstancesWithContext provides a mock function.
func (_m *Mockec2API) UnmonitorInstancesWithContext(_parameter_0 context.Context, _parameter_1 *ec2.UnmonitorInstancesInput, _parameter_2 ...request.Option) (_result_0 *ec2.UnmonitorInstancesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.UnmonitorInstancesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.UnmonitorInstancesInput, ...request.Option) *ec2.UnmonitorInstancesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UnmonitorInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.UnmonitorInstancesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsEgress provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsEgress(_parameter_0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (_result_0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	if rf, ok := ret.Get(0).(func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsEgressRequest provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsEgressRequest(_parameter_0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) (_result_0 *request.Request, _result_1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	if rf, ok := ret.Get(1).(func(*ec2.UpdateSecurityGroupRuleDescriptionsEgressInput) *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
		}
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsEgressWithContext provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsEgressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, _parameter_2 ...request.Option) (_result_0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, ...request.Option) *ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UpdateSecurityGroupRuleDescriptionsEgressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.UpdateSecurityGroupRuleDescriptionsEgressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsIngress provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsIngress(_parameter_0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (_result_0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	if rf, ok := ret.Get(0).(func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsIngressRequest provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsIngressRequest(_parameter_0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) (_result_0 *request.Request, _result_1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	if rf, ok := ret.Get(1).(func(*ec2.UpdateSecurityGroupRuleDescriptionsIngressInput) *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
		}
	}

	return r0, r1
}

// UpdateSecurityGroupRuleDescriptionsIngressWithContext provides a mock function.
func (_m *Mockec2API) UpdateSecurityGroupRuleDescriptionsIngressWithContext(_parameter_0 context.Context, _parameter_1 *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, _parameter_2 ...request.Option) (_result_0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, ...request.Option) *ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.UpdateSecurityGroupRuleDescriptionsIngressOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.UpdateSecurityGroupRuleDescriptionsIngressInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilBundleTaskComplete provides a mock function.
func (_m *Mockec2API) WaitUntilBundleTaskComplete(_parameter_0 *ec2.DescribeBundleTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeBundleTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilBundleTaskCompleteWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilBundleTaskCompleteWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeBundleTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeBundleTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskCancelled provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskCancelled(_parameter_0 *ec2.DescribeConversionTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeConversionTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskCancelledWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskCancelledWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeConversionTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskCompleted provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskCompleted(_parameter_0 *ec2.DescribeConversionTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeConversionTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskCompletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskCompletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeConversionTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskDeleted provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskDeleted(_parameter_0 *ec2.DescribeConversionTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeConversionTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilConversionTaskDeletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilConversionTaskDeletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeConversionTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeConversionTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilCustomerGatewayAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilCustomerGatewayAvailable(_parameter_0 *ec2.DescribeCustomerGatewaysInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeCustomerGatewaysInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilCustomerGatewayAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilCustomerGatewayAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeCustomerGatewaysInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeCustomerGatewaysInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilExportTaskCancelled provides a mock function.
func (_m *Mockec2API) WaitUntilExportTaskCancelled(_parameter_0 *ec2.DescribeExportTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilExportTaskCancelledWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilExportTaskCancelledWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeExportTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilExportTaskCompleted provides a mock function.
func (_m *Mockec2API) WaitUntilExportTaskCompleted(_parameter_0 *ec2.DescribeExportTasksInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeExportTasksInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilExportTaskCompletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilExportTaskCompletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeExportTasksInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeExportTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilImageAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilImageAvailable(_parameter_0 *ec2.DescribeImagesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImagesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilImageAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilImageAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImagesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilImageExists provides a mock function.
func (_m *Mockec2API) WaitUntilImageExists(_parameter_0 *ec2.DescribeImagesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeImagesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilImageExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilImageExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeImagesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeImagesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceExists provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceExists(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceRunning provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceRunning(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceRunningWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceRunningWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceStatusOk provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceStatusOk(_parameter_0 *ec2.DescribeInstanceStatusInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceStatusInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceStatusOkWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceStatusOkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceStatusInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceStopped provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceStopped(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceStoppedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceStoppedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceTerminated provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceTerminated(_parameter_0 *ec2.DescribeInstancesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstancesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilInstanceTerminatedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilInstanceTerminatedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstancesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstancesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilKeyPairExists provides a mock function.
func (_m *Mockec2API) WaitUntilKeyPairExists(_parameter_0 *ec2.DescribeKeyPairsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeKeyPairsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilKeyPairExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilKeyPairExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeKeyPairsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeKeyPairsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNatGatewayAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilNatGatewayAvailable(_parameter_0 *ec2.DescribeNatGatewaysInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNatGatewaysInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNatGatewayAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilNatGatewayAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNatGatewaysInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNatGatewaysInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNetworkInterfaceAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilNetworkInterfaceAvailable(_parameter_0 *ec2.DescribeNetworkInterfacesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeNetworkInterfacesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNetworkInterfaceAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilNetworkInterfaceAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeNetworkInterfacesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeNetworkInterfacesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilPasswordDataAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilPasswordDataAvailable(_parameter_0 *ec2.GetPasswordDataInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.GetPasswordDataInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilPasswordDataAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilPasswordDataAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.GetPasswordDataInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.GetPasswordDataInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSecurityGroupExists provides a mock function.
func (_m *Mockec2API) WaitUntilSecurityGroupExists(_parameter_0 *ec2.DescribeSecurityGroupsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSecurityGroupsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSecurityGroupExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilSecurityGroupExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSecurityGroupsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSecurityGroupsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSnapshotCompleted provides a mock function.
func (_m *Mockec2API) WaitUntilSnapshotCompleted(_parameter_0 *ec2.DescribeSnapshotsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSnapshotsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSnapshotCompletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilSnapshotCompletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSnapshotsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSnapshotsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSpotInstanceRequestFulfilled provides a mock function.
func (_m *Mockec2API) WaitUntilSpotInstanceRequestFulfilled(_parameter_0 *ec2.DescribeSpotInstanceRequestsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSpotInstanceRequestsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSpotInstanceRequestFulfilledWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilSpotInstanceRequestFulfilledWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSpotInstanceRequestsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSpotInstanceRequestsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSubnetAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilSubnetAvailable(_parameter_0 *ec2.DescribeSubnetsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeSubnetsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSubnetAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilSubnetAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeSubnetsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeSubnetsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSystemStatusOk provides a mock function.
func (_m *Mockec2API) WaitUntilSystemStatusOk(_parameter_0 *ec2.DescribeInstanceStatusInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeInstanceStatusInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilSystemStatusOkWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilSystemStatusOkWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeInstanceStatusInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeInstanceStatusInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeAvailable(_parameter_0 *ec2.DescribeVolumesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeDeleted provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeDeleted(_parameter_0 *ec2.DescribeVolumesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeDeletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeDeletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeInUse provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeInUse(_parameter_0 *ec2.DescribeVolumesInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVolumesInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVolumeInUseWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVolumeInUseWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVolumesInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVolumesInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilVpcAvailable(_parameter_0 *ec2.DescribeVpcsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpcAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcExists provides a mock function.
func (_m *Mockec2API) WaitUntilVpcExists(_parameter_0 *ec2.DescribeVpcsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpcExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcPeeringConnectionDeleted provides a mock function.
func (_m *Mockec2API) WaitUntilVpcPeeringConnectionDeleted(_parameter_0 *ec2.DescribeVpcPeeringConnectionsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcPeeringConnectionsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcPeeringConnectionDeletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpcPeeringConnectionDeletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcPeeringConnectionsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcPeeringConnectionExists provides a mock function.
func (_m *Mockec2API) WaitUntilVpcPeeringConnectionExists(_parameter_0 *ec2.DescribeVpcPeeringConnectionsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpcPeeringConnectionsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpcPeeringConnectionExistsWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpcPeeringConnectionExistsWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpcPeeringConnectionsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpcPeeringConnectionsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpnConnectionAvailable provides a mock function.
func (_m *Mockec2API) WaitUntilVpnConnectionAvailable(_parameter_0 *ec2.DescribeVpnConnectionsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnConnectionsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpnConnectionAvailableWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpnConnectionAvailableWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpnConnectionsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpnConnectionDeleted provides a mock function.
func (_m *Mockec2API) WaitUntilVpnConnectionDeleted(_parameter_0 *ec2.DescribeVpnConnectionsInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ec2.DescribeVpnConnectionsInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVpnConnectionDeletedWithContext provides a mock function.
func (_m *Mockec2API) WaitUntilVpnConnectionDeletedWithContext(_parameter_0 context.Context, _parameter_1 *ec2.DescribeVpnConnectionsInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.DescribeVpnConnectionsInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawByoipCidr provides a mock function.
func (_m *Mockec2API) WithdrawByoipCidr(_parameter_0 *ec2.WithdrawByoipCidrInput) (_result_0 *ec2.WithdrawByoipCidrOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *ec2.WithdrawByoipCidrOutput
	if rf, ok := ret.Get(0).(func(*ec2.WithdrawByoipCidrInput) *ec2.WithdrawByoipCidrOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.WithdrawByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.WithdrawByoipCidrInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawByoipCidrRequest provides a mock function.
func (_m *Mockec2API) WithdrawByoipCidrRequest(_parameter_0 *ec2.WithdrawByoipCidrInput) (_result_0 *request.Request, _result_1 *ec2.WithdrawByoipCidrOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ec2.WithdrawByoipCidrInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ec2.WithdrawByoipCidrOutput
	if rf, ok := ret.Get(1).(func(*ec2.WithdrawByoipCidrInput) *ec2.WithdrawByoipCidrOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ec2.WithdrawByoipCidrOutput)
		}
	}

	return r0, r1
}

// WithdrawByoipCidrWithContext provides a mock function.
func (_m *Mockec2API) WithdrawByoipCidrWithContext(_parameter_0 context.Context, _parameter_1 *ec2.WithdrawByoipCidrInput, _parameter_2 ...request.Option) (_result_0 *ec2.WithdrawByoipCidrOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *ec2.WithdrawByoipCidrOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ec2.WithdrawByoipCidrInput, ...request.Option) *ec2.WithdrawByoipCidrOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.WithdrawByoipCidrOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ec2.WithdrawByoipCidrInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEC2APIFactory is an autogenerated mock for the EC2APIFactory type.
type MockEC2APIFactory struct {
	mock.Mock
}

// New provides a mock function.
func (_m *MockEC2APIFactory) New(configProvider client.ConfigProvider, configs ...*aws.Config) (ec2API ec2iface.EC2API) {
	varParams := make([]interface{}, 1+len(configs))
	varParams[0] = configProvider
	for varIndex, varParam := range configs {
		varParams[1+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 ec2iface.EC2API
	if rf, ok := ret.Get(0).(func(client.ConfigProvider, ...*aws.Config) ec2iface.EC2API); ok {
		r0 = rf(configProvider, configs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ec2iface.EC2API)
		}
	}

	return r0
}
