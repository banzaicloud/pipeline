// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package workflow

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/client"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/eks"
	"github.com/aws/aws-sdk-go/service/eks/eksiface"
	"github.com/stretchr/testify/mock"
)

// MockeksAPI is an autogenerated mock for the eksAPI type.
type MockeksAPI struct {
	mock.Mock
}

// CreateCluster provides a mock function.
func (_m *MockeksAPI) CreateCluster(_parameter_0 *eks.CreateClusterInput) (_result_0 *eks.CreateClusterOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.CreateClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.CreateClusterInput) *eks.CreateClusterOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.CreateClusterInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterRequest provides a mock function.
func (_m *MockeksAPI) CreateClusterRequest(_parameter_0 *eks.CreateClusterInput) (_result_0 *request.Request, _result_1 *eks.CreateClusterOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.CreateClusterInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.CreateClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.CreateClusterInput) *eks.CreateClusterOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.CreateClusterOutput)
		}
	}

	return r0, r1
}

// CreateClusterWithContext provides a mock function.
func (_m *MockeksAPI) CreateClusterWithContext(_parameter_0 context.Context, _parameter_1 *eks.CreateClusterInput, _parameter_2 ...request.Option) (_result_0 *eks.CreateClusterOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.CreateClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.CreateClusterInput, ...request.Option) *eks.CreateClusterOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.CreateClusterInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFargateProfile provides a mock function.
func (_m *MockeksAPI) CreateFargateProfile(_parameter_0 *eks.CreateFargateProfileInput) (_result_0 *eks.CreateFargateProfileOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.CreateFargateProfileOutput
	if rf, ok := ret.Get(0).(func(*eks.CreateFargateProfileInput) *eks.CreateFargateProfileOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.CreateFargateProfileInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFargateProfileRequest provides a mock function.
func (_m *MockeksAPI) CreateFargateProfileRequest(_parameter_0 *eks.CreateFargateProfileInput) (_result_0 *request.Request, _result_1 *eks.CreateFargateProfileOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.CreateFargateProfileInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.CreateFargateProfileOutput
	if rf, ok := ret.Get(1).(func(*eks.CreateFargateProfileInput) *eks.CreateFargateProfileOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.CreateFargateProfileOutput)
		}
	}

	return r0, r1
}

// CreateFargateProfileWithContext provides a mock function.
func (_m *MockeksAPI) CreateFargateProfileWithContext(_parameter_0 context.Context, _parameter_1 *eks.CreateFargateProfileInput, _parameter_2 ...request.Option) (_result_0 *eks.CreateFargateProfileOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.CreateFargateProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.CreateFargateProfileInput, ...request.Option) *eks.CreateFargateProfileOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.CreateFargateProfileInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNodegroup provides a mock function.
func (_m *MockeksAPI) CreateNodegroup(_parameter_0 *eks.CreateNodegroupInput) (_result_0 *eks.CreateNodegroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.CreateNodegroupOutput
	if rf, ok := ret.Get(0).(func(*eks.CreateNodegroupInput) *eks.CreateNodegroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.CreateNodegroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNodegroupRequest provides a mock function.
func (_m *MockeksAPI) CreateNodegroupRequest(_parameter_0 *eks.CreateNodegroupInput) (_result_0 *request.Request, _result_1 *eks.CreateNodegroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.CreateNodegroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.CreateNodegroupOutput
	if rf, ok := ret.Get(1).(func(*eks.CreateNodegroupInput) *eks.CreateNodegroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.CreateNodegroupOutput)
		}
	}

	return r0, r1
}

// CreateNodegroupWithContext provides a mock function.
func (_m *MockeksAPI) CreateNodegroupWithContext(_parameter_0 context.Context, _parameter_1 *eks.CreateNodegroupInput, _parameter_2 ...request.Option) (_result_0 *eks.CreateNodegroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.CreateNodegroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.CreateNodegroupInput, ...request.Option) *eks.CreateNodegroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.CreateNodegroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function.
func (_m *MockeksAPI) DeleteCluster(_parameter_0 *eks.DeleteClusterInput) (_result_0 *eks.DeleteClusterOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.DeleteClusterInput) *eks.DeleteClusterOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DeleteClusterInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterRequest provides a mock function.
func (_m *MockeksAPI) DeleteClusterRequest(_parameter_0 *eks.DeleteClusterInput) (_result_0 *request.Request, _result_1 *eks.DeleteClusterOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DeleteClusterInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.DeleteClusterInput) *eks.DeleteClusterOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DeleteClusterOutput)
		}
	}

	return r0, r1
}

// DeleteClusterWithContext provides a mock function.
func (_m *MockeksAPI) DeleteClusterWithContext(_parameter_0 context.Context, _parameter_1 *eks.DeleteClusterInput, _parameter_2 ...request.Option) (_result_0 *eks.DeleteClusterOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DeleteClusterInput, ...request.Option) *eks.DeleteClusterOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DeleteClusterInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFargateProfile provides a mock function.
func (_m *MockeksAPI) DeleteFargateProfile(_parameter_0 *eks.DeleteFargateProfileInput) (_result_0 *eks.DeleteFargateProfileOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DeleteFargateProfileOutput
	if rf, ok := ret.Get(0).(func(*eks.DeleteFargateProfileInput) *eks.DeleteFargateProfileOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DeleteFargateProfileInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFargateProfileRequest provides a mock function.
func (_m *MockeksAPI) DeleteFargateProfileRequest(_parameter_0 *eks.DeleteFargateProfileInput) (_result_0 *request.Request, _result_1 *eks.DeleteFargateProfileOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DeleteFargateProfileInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DeleteFargateProfileOutput
	if rf, ok := ret.Get(1).(func(*eks.DeleteFargateProfileInput) *eks.DeleteFargateProfileOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DeleteFargateProfileOutput)
		}
	}

	return r0, r1
}

// DeleteFargateProfileWithContext provides a mock function.
func (_m *MockeksAPI) DeleteFargateProfileWithContext(_parameter_0 context.Context, _parameter_1 *eks.DeleteFargateProfileInput, _parameter_2 ...request.Option) (_result_0 *eks.DeleteFargateProfileOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DeleteFargateProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DeleteFargateProfileInput, ...request.Option) *eks.DeleteFargateProfileOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DeleteFargateProfileInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodegroup provides a mock function.
func (_m *MockeksAPI) DeleteNodegroup(_parameter_0 *eks.DeleteNodegroupInput) (_result_0 *eks.DeleteNodegroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DeleteNodegroupOutput
	if rf, ok := ret.Get(0).(func(*eks.DeleteNodegroupInput) *eks.DeleteNodegroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DeleteNodegroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNodegroupRequest provides a mock function.
func (_m *MockeksAPI) DeleteNodegroupRequest(_parameter_0 *eks.DeleteNodegroupInput) (_result_0 *request.Request, _result_1 *eks.DeleteNodegroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DeleteNodegroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DeleteNodegroupOutput
	if rf, ok := ret.Get(1).(func(*eks.DeleteNodegroupInput) *eks.DeleteNodegroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DeleteNodegroupOutput)
		}
	}

	return r0, r1
}

// DeleteNodegroupWithContext provides a mock function.
func (_m *MockeksAPI) DeleteNodegroupWithContext(_parameter_0 context.Context, _parameter_1 *eks.DeleteNodegroupInput, _parameter_2 ...request.Option) (_result_0 *eks.DeleteNodegroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DeleteNodegroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DeleteNodegroupInput, ...request.Option) *eks.DeleteNodegroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DeleteNodegroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCluster provides a mock function.
func (_m *MockeksAPI) DescribeCluster(_parameter_0 *eks.DescribeClusterInput) (_result_0 *eks.DescribeClusterOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) *eks.DescribeClusterOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeClusterInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusterRequest provides a mock function.
func (_m *MockeksAPI) DescribeClusterRequest(_parameter_0 *eks.DescribeClusterInput) (_result_0 *request.Request, _result_1 *eks.DescribeClusterOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeClusterInput) *eks.DescribeClusterOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeClusterOutput)
		}
	}

	return r0, r1
}

// DescribeClusterWithContext provides a mock function.
func (_m *MockeksAPI) DescribeClusterWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeClusterInput, _parameter_2 ...request.Option) (_result_0 *eks.DescribeClusterOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.Option) *eks.DescribeClusterOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeClusterInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFargateProfile provides a mock function.
func (_m *MockeksAPI) DescribeFargateProfile(_parameter_0 *eks.DescribeFargateProfileInput) (_result_0 *eks.DescribeFargateProfileOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DescribeFargateProfileOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeFargateProfileInput) *eks.DescribeFargateProfileOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeFargateProfileInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFargateProfileRequest provides a mock function.
func (_m *MockeksAPI) DescribeFargateProfileRequest(_parameter_0 *eks.DescribeFargateProfileInput) (_result_0 *request.Request, _result_1 *eks.DescribeFargateProfileOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeFargateProfileInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeFargateProfileOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeFargateProfileInput) *eks.DescribeFargateProfileOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeFargateProfileOutput)
		}
	}

	return r0, r1
}

// DescribeFargateProfileWithContext provides a mock function.
func (_m *MockeksAPI) DescribeFargateProfileWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeFargateProfileInput, _parameter_2 ...request.Option) (_result_0 *eks.DescribeFargateProfileOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DescribeFargateProfileOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeFargateProfileInput, ...request.Option) *eks.DescribeFargateProfileOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeFargateProfileOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeFargateProfileInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNodegroup provides a mock function.
func (_m *MockeksAPI) DescribeNodegroup(_parameter_0 *eks.DescribeNodegroupInput) (_result_0 *eks.DescribeNodegroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DescribeNodegroupOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeNodegroupInput) *eks.DescribeNodegroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeNodegroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNodegroupRequest provides a mock function.
func (_m *MockeksAPI) DescribeNodegroupRequest(_parameter_0 *eks.DescribeNodegroupInput) (_result_0 *request.Request, _result_1 *eks.DescribeNodegroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeNodegroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeNodegroupOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeNodegroupInput) *eks.DescribeNodegroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeNodegroupOutput)
		}
	}

	return r0, r1
}

// DescribeNodegroupWithContext provides a mock function.
func (_m *MockeksAPI) DescribeNodegroupWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeNodegroupInput, _parameter_2 ...request.Option) (_result_0 *eks.DescribeNodegroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DescribeNodegroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeNodegroupInput, ...request.Option) *eks.DescribeNodegroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeNodegroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeNodegroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUpdate provides a mock function.
func (_m *MockeksAPI) DescribeUpdate(_parameter_0 *eks.DescribeUpdateInput) (_result_0 *eks.DescribeUpdateOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeUpdateInput) *eks.DescribeUpdateOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeUpdateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeUpdateInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUpdateRequest provides a mock function.
func (_m *MockeksAPI) DescribeUpdateRequest(_parameter_0 *eks.DescribeUpdateInput) (_result_0 *request.Request, _result_1 *eks.DescribeUpdateOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeUpdateInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeUpdateInput) *eks.DescribeUpdateOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeUpdateOutput)
		}
	}

	return r0, r1
}

// DescribeUpdateWithContext provides a mock function.
func (_m *MockeksAPI) DescribeUpdateWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeUpdateInput, _parameter_2 ...request.Option) (_result_0 *eks.DescribeUpdateOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeUpdateInput, ...request.Option) *eks.DescribeUpdateOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeUpdateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeUpdateInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function.
func (_m *MockeksAPI) ListClusters(_parameter_0 *eks.ListClustersInput) (_result_0 *eks.ListClustersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.ListClustersOutput
	if rf, ok := ret.Get(0).(func(*eks.ListClustersInput) *eks.ListClustersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListClustersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersPages provides a mock function.
func (_m *MockeksAPI) ListClustersPages(_parameter_0 *eks.ListClustersInput, _parameter_1 func(*eks.ListClustersOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.ListClustersInput, func(*eks.ListClustersOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListClustersPagesWithContext provides a mock function.
func (_m *MockeksAPI) ListClustersPagesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListClustersInput, _parameter_2 func(*eks.ListClustersOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListClustersInput, func(*eks.ListClustersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListClustersRequest provides a mock function.
func (_m *MockeksAPI) ListClustersRequest(_parameter_0 *eks.ListClustersInput) (_result_0 *request.Request, _result_1 *eks.ListClustersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListClustersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListClustersOutput
	if rf, ok := ret.Get(1).(func(*eks.ListClustersInput) *eks.ListClustersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListClustersOutput)
		}
	}

	return r0, r1
}

// ListClustersWithContext provides a mock function.
func (_m *MockeksAPI) ListClustersWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListClustersInput, _parameter_2 ...request.Option) (_result_0 *eks.ListClustersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.ListClustersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListClustersInput, ...request.Option) *eks.ListClustersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListClustersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFargateProfiles provides a mock function.
func (_m *MockeksAPI) ListFargateProfiles(_parameter_0 *eks.ListFargateProfilesInput) (_result_0 *eks.ListFargateProfilesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.ListFargateProfilesOutput
	if rf, ok := ret.Get(0).(func(*eks.ListFargateProfilesInput) *eks.ListFargateProfilesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListFargateProfilesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListFargateProfilesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFargateProfilesPages provides a mock function.
func (_m *MockeksAPI) ListFargateProfilesPages(_parameter_0 *eks.ListFargateProfilesInput, _parameter_1 func(*eks.ListFargateProfilesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.ListFargateProfilesInput, func(*eks.ListFargateProfilesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFargateProfilesPagesWithContext provides a mock function.
func (_m *MockeksAPI) ListFargateProfilesPagesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListFargateProfilesInput, _parameter_2 func(*eks.ListFargateProfilesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListFargateProfilesInput, func(*eks.ListFargateProfilesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListFargateProfilesRequest provides a mock function.
func (_m *MockeksAPI) ListFargateProfilesRequest(_parameter_0 *eks.ListFargateProfilesInput) (_result_0 *request.Request, _result_1 *eks.ListFargateProfilesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListFargateProfilesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListFargateProfilesOutput
	if rf, ok := ret.Get(1).(func(*eks.ListFargateProfilesInput) *eks.ListFargateProfilesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListFargateProfilesOutput)
		}
	}

	return r0, r1
}

// ListFargateProfilesWithContext provides a mock function.
func (_m *MockeksAPI) ListFargateProfilesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListFargateProfilesInput, _parameter_2 ...request.Option) (_result_0 *eks.ListFargateProfilesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.ListFargateProfilesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListFargateProfilesInput, ...request.Option) *eks.ListFargateProfilesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListFargateProfilesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListFargateProfilesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodegroups provides a mock function.
func (_m *MockeksAPI) ListNodegroups(_parameter_0 *eks.ListNodegroupsInput) (_result_0 *eks.ListNodegroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.ListNodegroupsOutput
	if rf, ok := ret.Get(0).(func(*eks.ListNodegroupsInput) *eks.ListNodegroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListNodegroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListNodegroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodegroupsPages provides a mock function.
func (_m *MockeksAPI) ListNodegroupsPages(_parameter_0 *eks.ListNodegroupsInput, _parameter_1 func(*eks.ListNodegroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.ListNodegroupsInput, func(*eks.ListNodegroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNodegroupsPagesWithContext provides a mock function.
func (_m *MockeksAPI) ListNodegroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListNodegroupsInput, _parameter_2 func(*eks.ListNodegroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListNodegroupsInput, func(*eks.ListNodegroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNodegroupsRequest provides a mock function.
func (_m *MockeksAPI) ListNodegroupsRequest(_parameter_0 *eks.ListNodegroupsInput) (_result_0 *request.Request, _result_1 *eks.ListNodegroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListNodegroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListNodegroupsOutput
	if rf, ok := ret.Get(1).(func(*eks.ListNodegroupsInput) *eks.ListNodegroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListNodegroupsOutput)
		}
	}

	return r0, r1
}

// ListNodegroupsWithContext provides a mock function.
func (_m *MockeksAPI) ListNodegroupsWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListNodegroupsInput, _parameter_2 ...request.Option) (_result_0 *eks.ListNodegroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.ListNodegroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListNodegroupsInput, ...request.Option) *eks.ListNodegroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListNodegroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListNodegroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function.
func (_m *MockeksAPI) ListTagsForResource(_parameter_0 *eks.ListTagsForResourceInput) (_result_0 *eks.ListTagsForResourceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*eks.ListTagsForResourceInput) *eks.ListTagsForResourceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListTagsForResourceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function.
func (_m *MockeksAPI) ListTagsForResourceRequest(_parameter_0 *eks.ListTagsForResourceInput) (_result_0 *request.Request, _result_1 *eks.ListTagsForResourceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*eks.ListTagsForResourceInput) *eks.ListTagsForResourceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function.
func (_m *MockeksAPI) ListTagsForResourceWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListTagsForResourceInput, _parameter_2 ...request.Option) (_result_0 *eks.ListTagsForResourceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListTagsForResourceInput, ...request.Option) *eks.ListTagsForResourceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpdates provides a mock function.
func (_m *MockeksAPI) ListUpdates(_parameter_0 *eks.ListUpdatesInput) (_result_0 *eks.ListUpdatesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(0).(func(*eks.ListUpdatesInput) *eks.ListUpdatesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListUpdatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListUpdatesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpdatesPages provides a mock function.
func (_m *MockeksAPI) ListUpdatesPages(_parameter_0 *eks.ListUpdatesInput, _parameter_1 func(*eks.ListUpdatesOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.ListUpdatesInput, func(*eks.ListUpdatesOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUpdatesPagesWithContext provides a mock function.
func (_m *MockeksAPI) ListUpdatesPagesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListUpdatesInput, _parameter_2 func(*eks.ListUpdatesOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListUpdatesInput, func(*eks.ListUpdatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUpdatesRequest provides a mock function.
func (_m *MockeksAPI) ListUpdatesRequest(_parameter_0 *eks.ListUpdatesInput) (_result_0 *request.Request, _result_1 *eks.ListUpdatesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListUpdatesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(1).(func(*eks.ListUpdatesInput) *eks.ListUpdatesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListUpdatesOutput)
		}
	}

	return r0, r1
}

// ListUpdatesWithContext provides a mock function.
func (_m *MockeksAPI) ListUpdatesWithContext(_parameter_0 context.Context, _parameter_1 *eks.ListUpdatesInput, _parameter_2 ...request.Option) (_result_0 *eks.ListUpdatesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListUpdatesInput, ...request.Option) *eks.ListUpdatesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListUpdatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListUpdatesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function.
func (_m *MockeksAPI) TagResource(_parameter_0 *eks.TagResourceInput) (_result_0 *eks.TagResourceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*eks.TagResourceInput) *eks.TagResourceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.TagResourceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function.
func (_m *MockeksAPI) TagResourceRequest(_parameter_0 *eks.TagResourceInput) (_result_0 *request.Request, _result_1 *eks.TagResourceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.TagResourceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*eks.TagResourceInput) *eks.TagResourceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function.
func (_m *MockeksAPI) TagResourceWithContext(_parameter_0 context.Context, _parameter_1 *eks.TagResourceInput, _parameter_2 ...request.Option) (_result_0 *eks.TagResourceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.TagResourceInput, ...request.Option) *eks.TagResourceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function.
func (_m *MockeksAPI) UntagResource(_parameter_0 *eks.UntagResourceInput) (_result_0 *eks.UntagResourceOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*eks.UntagResourceInput) *eks.UntagResourceOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UntagResourceInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function.
func (_m *MockeksAPI) UntagResourceRequest(_parameter_0 *eks.UntagResourceInput) (_result_0 *request.Request, _result_1 *eks.UntagResourceOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UntagResourceInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*eks.UntagResourceInput) *eks.UntagResourceOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function.
func (_m *MockeksAPI) UntagResourceWithContext(_parameter_0 context.Context, _parameter_1 *eks.UntagResourceInput, _parameter_2 ...request.Option) (_result_0 *eks.UntagResourceOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UntagResourceInput, ...request.Option) *eks.UntagResourceOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfig provides a mock function.
func (_m *MockeksAPI) UpdateClusterConfig(_parameter_0 *eks.UpdateClusterConfigInput) (_result_0 *eks.UpdateClusterConfigOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterConfigInput) *eks.UpdateClusterConfigOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterConfigInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfigRequest provides a mock function.
func (_m *MockeksAPI) UpdateClusterConfigRequest(_parameter_0 *eks.UpdateClusterConfigInput) (_result_0 *request.Request, _result_1 *eks.UpdateClusterConfigOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterConfigInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterConfigInput) *eks.UpdateClusterConfigOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateClusterConfigOutput)
		}
	}

	return r0, r1
}

// UpdateClusterConfigWithContext provides a mock function.
func (_m *MockeksAPI) UpdateClusterConfigWithContext(_parameter_0 context.Context, _parameter_1 *eks.UpdateClusterConfigInput, _parameter_2 ...request.Option) (_result_0 *eks.UpdateClusterConfigOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateClusterConfigInput, ...request.Option) *eks.UpdateClusterConfigOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateClusterConfigInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterVersion provides a mock function.
func (_m *MockeksAPI) UpdateClusterVersion(_parameter_0 *eks.UpdateClusterVersionInput) (_result_0 *eks.UpdateClusterVersionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterVersionInput) *eks.UpdateClusterVersionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterVersionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterVersionRequest provides a mock function.
func (_m *MockeksAPI) UpdateClusterVersionRequest(_parameter_0 *eks.UpdateClusterVersionInput) (_result_0 *request.Request, _result_1 *eks.UpdateClusterVersionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterVersionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterVersionInput) *eks.UpdateClusterVersionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateClusterVersionOutput)
		}
	}

	return r0, r1
}

// UpdateClusterVersionWithContext provides a mock function.
func (_m *MockeksAPI) UpdateClusterVersionWithContext(_parameter_0 context.Context, _parameter_1 *eks.UpdateClusterVersionInput, _parameter_2 ...request.Option) (_result_0 *eks.UpdateClusterVersionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateClusterVersionInput, ...request.Option) *eks.UpdateClusterVersionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateClusterVersionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodegroupConfig provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupConfig(_parameter_0 *eks.UpdateNodegroupConfigInput) (_result_0 *eks.UpdateNodegroupConfigOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.UpdateNodegroupConfigOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateNodegroupConfigInput) *eks.UpdateNodegroupConfigOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateNodegroupConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateNodegroupConfigInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodegroupConfigRequest provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupConfigRequest(_parameter_0 *eks.UpdateNodegroupConfigInput) (_result_0 *request.Request, _result_1 *eks.UpdateNodegroupConfigOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateNodegroupConfigInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateNodegroupConfigOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateNodegroupConfigInput) *eks.UpdateNodegroupConfigOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateNodegroupConfigOutput)
		}
	}

	return r0, r1
}

// UpdateNodegroupConfigWithContext provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupConfigWithContext(_parameter_0 context.Context, _parameter_1 *eks.UpdateNodegroupConfigInput, _parameter_2 ...request.Option) (_result_0 *eks.UpdateNodegroupConfigOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.UpdateNodegroupConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateNodegroupConfigInput, ...request.Option) *eks.UpdateNodegroupConfigOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateNodegroupConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateNodegroupConfigInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodegroupVersion provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupVersion(_parameter_0 *eks.UpdateNodegroupVersionInput) (_result_0 *eks.UpdateNodegroupVersionOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *eks.UpdateNodegroupVersionOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateNodegroupVersionInput) *eks.UpdateNodegroupVersionOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateNodegroupVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateNodegroupVersionInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodegroupVersionRequest provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupVersionRequest(_parameter_0 *eks.UpdateNodegroupVersionInput) (_result_0 *request.Request, _result_1 *eks.UpdateNodegroupVersionOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateNodegroupVersionInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateNodegroupVersionOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateNodegroupVersionInput) *eks.UpdateNodegroupVersionOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateNodegroupVersionOutput)
		}
	}

	return r0, r1
}

// UpdateNodegroupVersionWithContext provides a mock function.
func (_m *MockeksAPI) UpdateNodegroupVersionWithContext(_parameter_0 context.Context, _parameter_1 *eks.UpdateNodegroupVersionInput, _parameter_2 ...request.Option) (_result_0 *eks.UpdateNodegroupVersionOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *eks.UpdateNodegroupVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateNodegroupVersionInput, ...request.Option) *eks.UpdateNodegroupVersionOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateNodegroupVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateNodegroupVersionInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilClusterActive provides a mock function.
func (_m *MockeksAPI) WaitUntilClusterActive(_parameter_0 *eks.DescribeClusterInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterActiveWithContext provides a mock function.
func (_m *MockeksAPI) WaitUntilClusterActiveWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeClusterInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterDeleted provides a mock function.
func (_m *MockeksAPI) WaitUntilClusterDeleted(_parameter_0 *eks.DescribeClusterInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterDeletedWithContext provides a mock function.
func (_m *MockeksAPI) WaitUntilClusterDeletedWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeClusterInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNodegroupActive provides a mock function.
func (_m *MockeksAPI) WaitUntilNodegroupActive(_parameter_0 *eks.DescribeNodegroupInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeNodegroupInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNodegroupActiveWithContext provides a mock function.
func (_m *MockeksAPI) WaitUntilNodegroupActiveWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeNodegroupInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeNodegroupInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNodegroupDeleted provides a mock function.
func (_m *MockeksAPI) WaitUntilNodegroupDeleted(_parameter_0 *eks.DescribeNodegroupInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeNodegroupInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilNodegroupDeletedWithContext provides a mock function.
func (_m *MockeksAPI) WaitUntilNodegroupDeletedWithContext(_parameter_0 context.Context, _parameter_1 *eks.DescribeNodegroupInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeNodegroupInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEKSAPIFactory is an autogenerated mock for the EKSAPIFactory type.
type MockEKSAPIFactory struct {
	mock.Mock
}

// New provides a mock function.
func (_m *MockEKSAPIFactory) New(configProvider client.ConfigProvider, configs ...*aws.Config) (eksAPI eksiface.EKSAPI) {
	varParams := make([]interface{}, 1+len(configs))
	varParams[0] = configProvider
	for varIndex, varParam := range configs {
		varParams[1+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 eksiface.EKSAPI
	if rf, ok := ret.Get(0).(func(client.ConfigProvider, ...*aws.Config) eksiface.EKSAPI); ok {
		r0 = rf(configProvider, configs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eksiface.EKSAPI)
		}
	}

	return r0
}
