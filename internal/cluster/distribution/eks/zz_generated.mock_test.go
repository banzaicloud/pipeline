// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package eks

import (
	"context"
	"github.com/banzaicloud/pipeline/internal/cluster"
	"github.com/stretchr/testify/mock"
)

// MockImageSelector is an autogenerated mock for the ImageSelector type.
type MockImageSelector struct {
	mock.Mock
}

// SelectImage provides a mock function.
func (_m *MockImageSelector) SelectImage(ctx context.Context, criteria ImageSelectionCriteria) (_result_0 string, _result_1 error) {
	ret := _m.Called(ctx, criteria)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, ImageSelectionCriteria) string); ok {
		r0 = rf(ctx, criteria)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ImageSelectionCriteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodePoolStore is an autogenerated mock for the NodePoolStore type.
type MockNodePoolStore struct {
	mock.Mock
}

// CreateNodePool provides a mock function.
func (_m *MockNodePoolStore) CreateNodePool(ctx context.Context, clusterID uint, createdBy uint, nodePool NewNodePool) (_result_0 error) {
	ret := _m.Called(ctx, clusterID, createdBy, nodePool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, NewNodePool) error); ok {
		r0 = rf(ctx, clusterID, createdBy, nodePool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListNodePoolNames provides a mock function.
func (_m *MockNodePoolStore) ListNodePoolNames(ctx context.Context, clusterID uint) (nodePoolNames []string, err error) {
	ret := _m.Called(ctx, clusterID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, uint) []string); ok {
		r0 = rf(ctx, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodePoolManager is an autogenerated mock for the NodePoolManager type.
type MockNodePoolManager struct {
	mock.Mock
}

// ListNodePools provides a mock function.
func (_m *MockNodePoolManager) ListNodePools(ctx context.Context, c cluster.Cluster, nodePoolNames []string) (_result_0 []NodePool, _result_1 error) {
	ret := _m.Called(ctx, c, nodePoolNames)

	var r0 []NodePool
	if rf, ok := ret.Get(0).(func(context.Context, cluster.Cluster, []string) []NodePool); ok {
		r0 = rf(ctx, c, nodePoolNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cluster.Cluster, []string) error); ok {
		r1 = rf(ctx, c, nodePoolNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNodePool provides a mock function.
func (_m *MockNodePoolManager) UpdateNodePool(ctx context.Context, c cluster.Cluster, nodePoolName string, nodePoolUpdate NodePoolUpdate) (_result_0 string, _result_1 error) {
	ret := _m.Called(ctx, c, nodePoolName, nodePoolUpdate)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, cluster.Cluster, string, NodePoolUpdate) string); ok {
		r0 = rf(ctx, c, nodePoolName, nodePoolUpdate)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cluster.Cluster, string, NodePoolUpdate) error); ok {
		r1 = rf(ctx, c, nodePoolName, nodePoolUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore is an autogenerated mock for the Store type.
type MockStore struct {
	mock.Mock
}

// GetCluster provides a mock function.
func (_m *MockStore) GetCluster(ctx context.Context, id uint) (_result_0 cluster.Cluster, _result_1 error) {
	ret := _m.Called(ctx, id)

	var r0 cluster.Cluster
	if rf, ok := ret.Get(0).(func(context.Context, uint) cluster.Cluster); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(cluster.Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function.
func (_m *MockStore) SetStatus(ctx context.Context, id uint, status string, statusMessage string) (_result_0 error) {
	ret := _m.Called(ctx, id, status, statusMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) error); ok {
		r0 = rf(ctx, id, status, statusMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
