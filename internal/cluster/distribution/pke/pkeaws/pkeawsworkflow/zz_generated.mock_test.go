// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package pkeawsworkflow

import (
	"context"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/client"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/elbv2"
	"github.com/aws/aws-sdk-go/service/elbv2/elbv2iface"
	"github.com/stretchr/testify/mock"
)

// MockAWSSessionFactory is an autogenerated mock for the AWSSessionFactory type.
type MockAWSSessionFactory struct {
	mock.Mock
}

// New provides a mock function.
func (_m *MockAWSSessionFactory) New(organizationID uint, secretID string, region string) (_result_0 *session.Session, _result_1 error) {
	ret := _m.Called(organizationID, secretID, region)

	var r0 *session.Session
	if rf, ok := ret.Get(0).(func(uint, string, string) *session.Session); ok {
		r0 = rf(organizationID, secretID, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(organizationID, secretID, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockelbv2API is an autogenerated mock for the elbv2API type.
type Mockelbv2API struct {
	mock.Mock
}

// AddListenerCertificates provides a mock function.
func (_m *Mockelbv2API) AddListenerCertificates(_parameter_0 *elbv2.AddListenerCertificatesInput) (_result_0 *elbv2.AddListenerCertificatesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.AddListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.AddListenerCertificatesInput) *elbv2.AddListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.AddListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.AddListenerCertificatesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddListenerCertificatesRequest provides a mock function.
func (_m *Mockelbv2API) AddListenerCertificatesRequest(_parameter_0 *elbv2.AddListenerCertificatesInput) (_result_0 *request.Request, _result_1 *elbv2.AddListenerCertificatesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.AddListenerCertificatesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.AddListenerCertificatesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.AddListenerCertificatesInput) *elbv2.AddListenerCertificatesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.AddListenerCertificatesOutput)
		}
	}

	return r0, r1
}

// AddListenerCertificatesWithContext provides a mock function.
func (_m *Mockelbv2API) AddListenerCertificatesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.AddListenerCertificatesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.AddListenerCertificatesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.AddListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.AddListenerCertificatesInput, ...request.Option) *elbv2.AddListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.AddListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.AddListenerCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTags provides a mock function.
func (_m *Mockelbv2API) AddTags(_parameter_0 *elbv2.AddTagsInput) (_result_0 *elbv2.AddTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.AddTagsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.AddTagsInput) *elbv2.AddTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.AddTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.AddTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsRequest provides a mock function.
func (_m *Mockelbv2API) AddTagsRequest(_parameter_0 *elbv2.AddTagsInput) (_result_0 *request.Request, _result_1 *elbv2.AddTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.AddTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.AddTagsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.AddTagsInput) *elbv2.AddTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.AddTagsOutput)
		}
	}

	return r0, r1
}

// AddTagsWithContext provides a mock function.
func (_m *Mockelbv2API) AddTagsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.AddTagsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.AddTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.AddTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.AddTagsInput, ...request.Option) *elbv2.AddTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.AddTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.AddTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListener provides a mock function.
func (_m *Mockelbv2API) CreateListener(_parameter_0 *elbv2.CreateListenerInput) (_result_0 *elbv2.CreateListenerOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.CreateListenerOutput
	if rf, ok := ret.Get(0).(func(*elbv2.CreateListenerInput) *elbv2.CreateListenerOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.CreateListenerInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListenerRequest provides a mock function.
func (_m *Mockelbv2API) CreateListenerRequest(_parameter_0 *elbv2.CreateListenerInput) (_result_0 *request.Request, _result_1 *elbv2.CreateListenerOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.CreateListenerInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.CreateListenerOutput
	if rf, ok := ret.Get(1).(func(*elbv2.CreateListenerInput) *elbv2.CreateListenerOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.CreateListenerOutput)
		}
	}

	return r0, r1
}

// CreateListenerWithContext provides a mock function.
func (_m *Mockelbv2API) CreateListenerWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.CreateListenerInput, _parameter_2 ...request.Option) (_result_0 *elbv2.CreateListenerOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.CreateListenerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.CreateListenerInput, ...request.Option) *elbv2.CreateListenerOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.CreateListenerInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancer provides a mock function.
func (_m *Mockelbv2API) CreateLoadBalancer(_parameter_0 *elbv2.CreateLoadBalancerInput) (_result_0 *elbv2.CreateLoadBalancerOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.CreateLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*elbv2.CreateLoadBalancerInput) *elbv2.CreateLoadBalancerOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.CreateLoadBalancerInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerRequest provides a mock function.
func (_m *Mockelbv2API) CreateLoadBalancerRequest(_parameter_0 *elbv2.CreateLoadBalancerInput) (_result_0 *request.Request, _result_1 *elbv2.CreateLoadBalancerOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.CreateLoadBalancerInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.CreateLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*elbv2.CreateLoadBalancerInput) *elbv2.CreateLoadBalancerOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.CreateLoadBalancerOutput)
		}
	}

	return r0, r1
}

// CreateLoadBalancerWithContext provides a mock function.
func (_m *Mockelbv2API) CreateLoadBalancerWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.CreateLoadBalancerInput, _parameter_2 ...request.Option) (_result_0 *elbv2.CreateLoadBalancerOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.CreateLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.CreateLoadBalancerInput, ...request.Option) *elbv2.CreateLoadBalancerOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.CreateLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRule provides a mock function.
func (_m *Mockelbv2API) CreateRule(_parameter_0 *elbv2.CreateRuleInput) (_result_0 *elbv2.CreateRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.CreateRuleOutput
	if rf, ok := ret.Get(0).(func(*elbv2.CreateRuleInput) *elbv2.CreateRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.CreateRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleRequest provides a mock function.
func (_m *Mockelbv2API) CreateRuleRequest(_parameter_0 *elbv2.CreateRuleInput) (_result_0 *request.Request, _result_1 *elbv2.CreateRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.CreateRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.CreateRuleOutput
	if rf, ok := ret.Get(1).(func(*elbv2.CreateRuleInput) *elbv2.CreateRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.CreateRuleOutput)
		}
	}

	return r0, r1
}

// CreateRuleWithContext provides a mock function.
func (_m *Mockelbv2API) CreateRuleWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.CreateRuleInput, _parameter_2 ...request.Option) (_result_0 *elbv2.CreateRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.CreateRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.CreateRuleInput, ...request.Option) *elbv2.CreateRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.CreateRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTargetGroup provides a mock function.
func (_m *Mockelbv2API) CreateTargetGroup(_parameter_0 *elbv2.CreateTargetGroupInput) (_result_0 *elbv2.CreateTargetGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.CreateTargetGroupOutput
	if rf, ok := ret.Get(0).(func(*elbv2.CreateTargetGroupInput) *elbv2.CreateTargetGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.CreateTargetGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTargetGroupRequest provides a mock function.
func (_m *Mockelbv2API) CreateTargetGroupRequest(_parameter_0 *elbv2.CreateTargetGroupInput) (_result_0 *request.Request, _result_1 *elbv2.CreateTargetGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.CreateTargetGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.CreateTargetGroupOutput
	if rf, ok := ret.Get(1).(func(*elbv2.CreateTargetGroupInput) *elbv2.CreateTargetGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.CreateTargetGroupOutput)
		}
	}

	return r0, r1
}

// CreateTargetGroupWithContext provides a mock function.
func (_m *Mockelbv2API) CreateTargetGroupWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.CreateTargetGroupInput, _parameter_2 ...request.Option) (_result_0 *elbv2.CreateTargetGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.CreateTargetGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.CreateTargetGroupInput, ...request.Option) *elbv2.CreateTargetGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.CreateTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.CreateTargetGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteListener provides a mock function.
func (_m *Mockelbv2API) DeleteListener(_parameter_0 *elbv2.DeleteListenerInput) (_result_0 *elbv2.DeleteListenerOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DeleteListenerOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteListenerInput) *elbv2.DeleteListenerOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteListenerInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteListenerRequest provides a mock function.
func (_m *Mockelbv2API) DeleteListenerRequest(_parameter_0 *elbv2.DeleteListenerInput) (_result_0 *request.Request, _result_1 *elbv2.DeleteListenerOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteListenerInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DeleteListenerOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteListenerInput) *elbv2.DeleteListenerOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DeleteListenerOutput)
		}
	}

	return r0, r1
}

// DeleteListenerWithContext provides a mock function.
func (_m *Mockelbv2API) DeleteListenerWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DeleteListenerInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DeleteListenerOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DeleteListenerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DeleteListenerInput, ...request.Option) *elbv2.DeleteListenerOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DeleteListenerInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancer provides a mock function.
func (_m *Mockelbv2API) DeleteLoadBalancer(_parameter_0 *elbv2.DeleteLoadBalancerInput) (_result_0 *elbv2.DeleteLoadBalancerOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteLoadBalancerInput) *elbv2.DeleteLoadBalancerOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteLoadBalancerInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerRequest provides a mock function.
func (_m *Mockelbv2API) DeleteLoadBalancerRequest(_parameter_0 *elbv2.DeleteLoadBalancerInput) (_result_0 *request.Request, _result_1 *elbv2.DeleteLoadBalancerOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteLoadBalancerInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteLoadBalancerInput) *elbv2.DeleteLoadBalancerOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DeleteLoadBalancerOutput)
		}
	}

	return r0, r1
}

// DeleteLoadBalancerWithContext provides a mock function.
func (_m *Mockelbv2API) DeleteLoadBalancerWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DeleteLoadBalancerInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DeleteLoadBalancerOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DeleteLoadBalancerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DeleteLoadBalancerInput, ...request.Option) *elbv2.DeleteLoadBalancerOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteLoadBalancerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DeleteLoadBalancerInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function.
func (_m *Mockelbv2API) DeleteRule(_parameter_0 *elbv2.DeleteRuleInput) (_result_0 *elbv2.DeleteRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteRuleInput) *elbv2.DeleteRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function.
func (_m *Mockelbv2API) DeleteRuleRequest(_parameter_0 *elbv2.DeleteRuleInput) (_result_0 *request.Request, _result_1 *elbv2.DeleteRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteRuleInput) *elbv2.DeleteRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function.
func (_m *Mockelbv2API) DeleteRuleWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DeleteRuleInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DeleteRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DeleteRuleInput, ...request.Option) *elbv2.DeleteRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTargetGroup provides a mock function.
func (_m *Mockelbv2API) DeleteTargetGroup(_parameter_0 *elbv2.DeleteTargetGroupInput) (_result_0 *elbv2.DeleteTargetGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DeleteTargetGroupOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteTargetGroupInput) *elbv2.DeleteTargetGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteTargetGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTargetGroupRequest provides a mock function.
func (_m *Mockelbv2API) DeleteTargetGroupRequest(_parameter_0 *elbv2.DeleteTargetGroupInput) (_result_0 *request.Request, _result_1 *elbv2.DeleteTargetGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DeleteTargetGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DeleteTargetGroupOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DeleteTargetGroupInput) *elbv2.DeleteTargetGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DeleteTargetGroupOutput)
		}
	}

	return r0, r1
}

// DeleteTargetGroupWithContext provides a mock function.
func (_m *Mockelbv2API) DeleteTargetGroupWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DeleteTargetGroupInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DeleteTargetGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DeleteTargetGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DeleteTargetGroupInput, ...request.Option) *elbv2.DeleteTargetGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeleteTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DeleteTargetGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTargets provides a mock function.
func (_m *Mockelbv2API) DeregisterTargets(_parameter_0 *elbv2.DeregisterTargetsInput) (_result_0 *elbv2.DeregisterTargetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DeregisterTargetsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DeregisterTargetsInput) *elbv2.DeregisterTargetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeregisterTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DeregisterTargetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTargetsRequest provides a mock function.
func (_m *Mockelbv2API) DeregisterTargetsRequest(_parameter_0 *elbv2.DeregisterTargetsInput) (_result_0 *request.Request, _result_1 *elbv2.DeregisterTargetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DeregisterTargetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DeregisterTargetsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DeregisterTargetsInput) *elbv2.DeregisterTargetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DeregisterTargetsOutput)
		}
	}

	return r0, r1
}

// DeregisterTargetsWithContext provides a mock function.
func (_m *Mockelbv2API) DeregisterTargetsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DeregisterTargetsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DeregisterTargetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DeregisterTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DeregisterTargetsInput, ...request.Option) *elbv2.DeregisterTargetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DeregisterTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DeregisterTargetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountLimits provides a mock function.
func (_m *Mockelbv2API) DescribeAccountLimits(_parameter_0 *elbv2.DescribeAccountLimitsInput) (_result_0 *elbv2.DescribeAccountLimitsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeAccountLimitsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeAccountLimitsInput) *elbv2.DescribeAccountLimitsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeAccountLimitsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeAccountLimitsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountLimitsRequest provides a mock function.
func (_m *Mockelbv2API) DescribeAccountLimitsRequest(_parameter_0 *elbv2.DescribeAccountLimitsInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeAccountLimitsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeAccountLimitsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeAccountLimitsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeAccountLimitsInput) *elbv2.DescribeAccountLimitsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeAccountLimitsOutput)
		}
	}

	return r0, r1
}

// DescribeAccountLimitsWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeAccountLimitsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeAccountLimitsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeAccountLimitsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeAccountLimitsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeAccountLimitsInput, ...request.Option) *elbv2.DescribeAccountLimitsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeAccountLimitsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeAccountLimitsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeListenerCertificates provides a mock function.
func (_m *Mockelbv2API) DescribeListenerCertificates(_parameter_0 *elbv2.DescribeListenerCertificatesInput) (_result_0 *elbv2.DescribeListenerCertificatesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeListenerCertificatesInput) *elbv2.DescribeListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeListenerCertificatesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeListenerCertificatesRequest provides a mock function.
func (_m *Mockelbv2API) DescribeListenerCertificatesRequest(_parameter_0 *elbv2.DescribeListenerCertificatesInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeListenerCertificatesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeListenerCertificatesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeListenerCertificatesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeListenerCertificatesInput) *elbv2.DescribeListenerCertificatesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeListenerCertificatesOutput)
		}
	}

	return r0, r1
}

// DescribeListenerCertificatesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeListenerCertificatesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeListenerCertificatesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeListenerCertificatesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeListenerCertificatesInput, ...request.Option) *elbv2.DescribeListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeListenerCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeListeners provides a mock function.
func (_m *Mockelbv2API) DescribeListeners(_parameter_0 *elbv2.DescribeListenersInput) (_result_0 *elbv2.DescribeListenersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeListenersOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeListenersInput) *elbv2.DescribeListenersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeListenersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeListenersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeListenersPages provides a mock function.
func (_m *Mockelbv2API) DescribeListenersPages(_parameter_0 *elbv2.DescribeListenersInput, _parameter_1 func(*elbv2.DescribeListenersOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeListenersPagesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeListenersPagesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeListenersInput, _parameter_2 func(*elbv2.DescribeListenersOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeListenersInput, func(*elbv2.DescribeListenersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeListenersRequest provides a mock function.
func (_m *Mockelbv2API) DescribeListenersRequest(_parameter_0 *elbv2.DescribeListenersInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeListenersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeListenersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeListenersOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeListenersInput) *elbv2.DescribeListenersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeListenersOutput)
		}
	}

	return r0, r1
}

// DescribeListenersWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeListenersWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeListenersInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeListenersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeListenersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeListenersInput, ...request.Option) *elbv2.DescribeListenersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeListenersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeListenersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoadBalancerAttributes provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancerAttributes(_parameter_0 *elbv2.DescribeLoadBalancerAttributesInput) (_result_0 *elbv2.DescribeLoadBalancerAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeLoadBalancerAttributesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancerAttributesInput) *elbv2.DescribeLoadBalancerAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeLoadBalancerAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeLoadBalancerAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoadBalancerAttributesRequest provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancerAttributesRequest(_parameter_0 *elbv2.DescribeLoadBalancerAttributesInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeLoadBalancerAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancerAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeLoadBalancerAttributesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeLoadBalancerAttributesInput) *elbv2.DescribeLoadBalancerAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeLoadBalancerAttributesOutput)
		}
	}

	return r0, r1
}

// DescribeLoadBalancerAttributesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancerAttributesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancerAttributesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeLoadBalancerAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeLoadBalancerAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancerAttributesInput, ...request.Option) *elbv2.DescribeLoadBalancerAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeLoadBalancerAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeLoadBalancerAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoadBalancers provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancers(_parameter_0 *elbv2.DescribeLoadBalancersInput) (_result_0 *elbv2.DescribeLoadBalancersOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeLoadBalancersOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput) *elbv2.DescribeLoadBalancersOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeLoadBalancersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeLoadBalancersInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoadBalancersPages provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancersPages(_parameter_0 *elbv2.DescribeLoadBalancersInput, _parameter_1 func(*elbv2.DescribeLoadBalancersOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLoadBalancersPagesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancersPagesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancersInput, _parameter_2 func(*elbv2.DescribeLoadBalancersOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancersInput, func(*elbv2.DescribeLoadBalancersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeLoadBalancersRequest provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancersRequest(_parameter_0 *elbv2.DescribeLoadBalancersInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeLoadBalancersOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeLoadBalancersOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeLoadBalancersInput) *elbv2.DescribeLoadBalancersOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeLoadBalancersOutput)
		}
	}

	return r0, r1
}

// DescribeLoadBalancersWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeLoadBalancersWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancersInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeLoadBalancersOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeLoadBalancersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancersInput, ...request.Option) *elbv2.DescribeLoadBalancersOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeLoadBalancersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeLoadBalancersInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRules provides a mock function.
func (_m *Mockelbv2API) DescribeRules(_parameter_0 *elbv2.DescribeRulesInput) (_result_0 *elbv2.DescribeRulesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeRulesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeRulesInput) *elbv2.DescribeRulesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeRulesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRulesRequest provides a mock function.
func (_m *Mockelbv2API) DescribeRulesRequest(_parameter_0 *elbv2.DescribeRulesInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeRulesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeRulesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeRulesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeRulesInput) *elbv2.DescribeRulesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeRulesOutput)
		}
	}

	return r0, r1
}

// DescribeRulesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeRulesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeRulesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeRulesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeRulesInput, ...request.Option) *elbv2.DescribeRulesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeRulesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSSLPolicies provides a mock function.
func (_m *Mockelbv2API) DescribeSSLPolicies(_parameter_0 *elbv2.DescribeSSLPoliciesInput) (_result_0 *elbv2.DescribeSSLPoliciesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeSSLPoliciesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeSSLPoliciesInput) *elbv2.DescribeSSLPoliciesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeSSLPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeSSLPoliciesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSSLPoliciesRequest provides a mock function.
func (_m *Mockelbv2API) DescribeSSLPoliciesRequest(_parameter_0 *elbv2.DescribeSSLPoliciesInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeSSLPoliciesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeSSLPoliciesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeSSLPoliciesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeSSLPoliciesInput) *elbv2.DescribeSSLPoliciesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeSSLPoliciesOutput)
		}
	}

	return r0, r1
}

// DescribeSSLPoliciesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeSSLPoliciesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeSSLPoliciesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeSSLPoliciesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeSSLPoliciesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeSSLPoliciesInput, ...request.Option) *elbv2.DescribeSSLPoliciesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeSSLPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeSSLPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function.
func (_m *Mockelbv2API) DescribeTags(_parameter_0 *elbv2.DescribeTagsInput) (_result_0 *elbv2.DescribeTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTagsInput) *elbv2.DescribeTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTagsRequest provides a mock function.
func (_m *Mockelbv2API) DescribeTagsRequest(_parameter_0 *elbv2.DescribeTagsInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeTagsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTagsInput) *elbv2.DescribeTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeTagsOutput)
		}
	}

	return r0, r1
}

// DescribeTagsWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeTagsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTagsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTagsInput, ...request.Option) *elbv2.DescribeTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetGroupAttributes provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupAttributes(_parameter_0 *elbv2.DescribeTargetGroupAttributesInput) (_result_0 *elbv2.DescribeTargetGroupAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeTargetGroupAttributesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetGroupAttributesInput) *elbv2.DescribeTargetGroupAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetGroupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetGroupAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetGroupAttributesRequest provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupAttributesRequest(_parameter_0 *elbv2.DescribeTargetGroupAttributesInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeTargetGroupAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetGroupAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeTargetGroupAttributesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetGroupAttributesInput) *elbv2.DescribeTargetGroupAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeTargetGroupAttributesOutput)
		}
	}

	return r0, r1
}

// DescribeTargetGroupAttributesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupAttributesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetGroupAttributesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeTargetGroupAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeTargetGroupAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetGroupAttributesInput, ...request.Option) *elbv2.DescribeTargetGroupAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetGroupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeTargetGroupAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetGroups provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroups(_parameter_0 *elbv2.DescribeTargetGroupsInput) (_result_0 *elbv2.DescribeTargetGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeTargetGroupsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetGroupsInput) *elbv2.DescribeTargetGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetGroupsPages provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupsPages(_parameter_0 *elbv2.DescribeTargetGroupsInput, _parameter_1 func(*elbv2.DescribeTargetGroupsOutput, bool) bool) (_result_0 error) {
	ret := _m.Called(_parameter_0, _parameter_1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool) error); ok {
		r0 = rf(_parameter_0, _parameter_1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTargetGroupsPagesWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupsPagesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetGroupsInput, _parameter_2 func(*elbv2.DescribeTargetGroupsOutput, bool) bool, _parameter_3 ...request.Option) (_result_0 error) {
	varParams := make([]interface{}, 3+len(_parameter_3))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	varParams[2] = _parameter_2
	for varIndex, varParam := range _parameter_3 {
		varParams[3+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetGroupsInput, func(*elbv2.DescribeTargetGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2, _parameter_3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeTargetGroupsRequest provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupsRequest(_parameter_0 *elbv2.DescribeTargetGroupsInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeTargetGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeTargetGroupsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetGroupsInput) *elbv2.DescribeTargetGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeTargetGroupsOutput)
		}
	}

	return r0, r1
}

// DescribeTargetGroupsWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeTargetGroupsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetGroupsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeTargetGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeTargetGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetGroupsInput, ...request.Option) *elbv2.DescribeTargetGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeTargetGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetHealth provides a mock function.
func (_m *Mockelbv2API) DescribeTargetHealth(_parameter_0 *elbv2.DescribeTargetHealthInput) (_result_0 *elbv2.DescribeTargetHealthOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.DescribeTargetHealthOutput
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetHealthInput) *elbv2.DescribeTargetHealthOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetHealthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetHealthInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTargetHealthRequest provides a mock function.
func (_m *Mockelbv2API) DescribeTargetHealthRequest(_parameter_0 *elbv2.DescribeTargetHealthInput) (_result_0 *request.Request, _result_1 *elbv2.DescribeTargetHealthOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetHealthInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.DescribeTargetHealthOutput
	if rf, ok := ret.Get(1).(func(*elbv2.DescribeTargetHealthInput) *elbv2.DescribeTargetHealthOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.DescribeTargetHealthOutput)
		}
	}

	return r0, r1
}

// DescribeTargetHealthWithContext provides a mock function.
func (_m *Mockelbv2API) DescribeTargetHealthWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetHealthInput, _parameter_2 ...request.Option) (_result_0 *elbv2.DescribeTargetHealthOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.DescribeTargetHealthOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetHealthInput, ...request.Option) *elbv2.DescribeTargetHealthOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.DescribeTargetHealthOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.DescribeTargetHealthInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyListener provides a mock function.
func (_m *Mockelbv2API) ModifyListener(_parameter_0 *elbv2.ModifyListenerInput) (_result_0 *elbv2.ModifyListenerOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.ModifyListenerOutput
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyListenerInput) *elbv2.ModifyListenerOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyListenerInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyListenerRequest provides a mock function.
func (_m *Mockelbv2API) ModifyListenerRequest(_parameter_0 *elbv2.ModifyListenerInput) (_result_0 *request.Request, _result_1 *elbv2.ModifyListenerOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyListenerInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.ModifyListenerOutput
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyListenerInput) *elbv2.ModifyListenerOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.ModifyListenerOutput)
		}
	}

	return r0, r1
}

// ModifyListenerWithContext provides a mock function.
func (_m *Mockelbv2API) ModifyListenerWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.ModifyListenerInput, _parameter_2 ...request.Option) (_result_0 *elbv2.ModifyListenerOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.ModifyListenerOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.ModifyListenerInput, ...request.Option) *elbv2.ModifyListenerOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyListenerOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.ModifyListenerInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyLoadBalancerAttributes provides a mock function.
func (_m *Mockelbv2API) ModifyLoadBalancerAttributes(_parameter_0 *elbv2.ModifyLoadBalancerAttributesInput) (_result_0 *elbv2.ModifyLoadBalancerAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.ModifyLoadBalancerAttributesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyLoadBalancerAttributesInput) *elbv2.ModifyLoadBalancerAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyLoadBalancerAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyLoadBalancerAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyLoadBalancerAttributesRequest provides a mock function.
func (_m *Mockelbv2API) ModifyLoadBalancerAttributesRequest(_parameter_0 *elbv2.ModifyLoadBalancerAttributesInput) (_result_0 *request.Request, _result_1 *elbv2.ModifyLoadBalancerAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyLoadBalancerAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.ModifyLoadBalancerAttributesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyLoadBalancerAttributesInput) *elbv2.ModifyLoadBalancerAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.ModifyLoadBalancerAttributesOutput)
		}
	}

	return r0, r1
}

// ModifyLoadBalancerAttributesWithContext provides a mock function.
func (_m *Mockelbv2API) ModifyLoadBalancerAttributesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.ModifyLoadBalancerAttributesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.ModifyLoadBalancerAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.ModifyLoadBalancerAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.ModifyLoadBalancerAttributesInput, ...request.Option) *elbv2.ModifyLoadBalancerAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyLoadBalancerAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.ModifyLoadBalancerAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyRule provides a mock function.
func (_m *Mockelbv2API) ModifyRule(_parameter_0 *elbv2.ModifyRuleInput) (_result_0 *elbv2.ModifyRuleOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.ModifyRuleOutput
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyRuleInput) *elbv2.ModifyRuleOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyRuleInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyRuleRequest provides a mock function.
func (_m *Mockelbv2API) ModifyRuleRequest(_parameter_0 *elbv2.ModifyRuleInput) (_result_0 *request.Request, _result_1 *elbv2.ModifyRuleOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyRuleInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.ModifyRuleOutput
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyRuleInput) *elbv2.ModifyRuleOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.ModifyRuleOutput)
		}
	}

	return r0, r1
}

// ModifyRuleWithContext provides a mock function.
func (_m *Mockelbv2API) ModifyRuleWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.ModifyRuleInput, _parameter_2 ...request.Option) (_result_0 *elbv2.ModifyRuleOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.ModifyRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.ModifyRuleInput, ...request.Option) *elbv2.ModifyRuleOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.ModifyRuleInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTargetGroup provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroup(_parameter_0 *elbv2.ModifyTargetGroupInput) (_result_0 *elbv2.ModifyTargetGroupOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.ModifyTargetGroupOutput
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyTargetGroupInput) *elbv2.ModifyTargetGroupOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyTargetGroupInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTargetGroupAttributes provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroupAttributes(_parameter_0 *elbv2.ModifyTargetGroupAttributesInput) (_result_0 *elbv2.ModifyTargetGroupAttributesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.ModifyTargetGroupAttributesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyTargetGroupAttributesInput) *elbv2.ModifyTargetGroupAttributesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyTargetGroupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyTargetGroupAttributesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTargetGroupAttributesRequest provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroupAttributesRequest(_parameter_0 *elbv2.ModifyTargetGroupAttributesInput) (_result_0 *request.Request, _result_1 *elbv2.ModifyTargetGroupAttributesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyTargetGroupAttributesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.ModifyTargetGroupAttributesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyTargetGroupAttributesInput) *elbv2.ModifyTargetGroupAttributesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.ModifyTargetGroupAttributesOutput)
		}
	}

	return r0, r1
}

// ModifyTargetGroupAttributesWithContext provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroupAttributesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.ModifyTargetGroupAttributesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.ModifyTargetGroupAttributesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.ModifyTargetGroupAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.ModifyTargetGroupAttributesInput, ...request.Option) *elbv2.ModifyTargetGroupAttributesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyTargetGroupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.ModifyTargetGroupAttributesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyTargetGroupRequest provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroupRequest(_parameter_0 *elbv2.ModifyTargetGroupInput) (_result_0 *request.Request, _result_1 *elbv2.ModifyTargetGroupOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.ModifyTargetGroupInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.ModifyTargetGroupOutput
	if rf, ok := ret.Get(1).(func(*elbv2.ModifyTargetGroupInput) *elbv2.ModifyTargetGroupOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.ModifyTargetGroupOutput)
		}
	}

	return r0, r1
}

// ModifyTargetGroupWithContext provides a mock function.
func (_m *Mockelbv2API) ModifyTargetGroupWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.ModifyTargetGroupInput, _parameter_2 ...request.Option) (_result_0 *elbv2.ModifyTargetGroupOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.ModifyTargetGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.ModifyTargetGroupInput, ...request.Option) *elbv2.ModifyTargetGroupOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.ModifyTargetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.ModifyTargetGroupInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTargets provides a mock function.
func (_m *Mockelbv2API) RegisterTargets(_parameter_0 *elbv2.RegisterTargetsInput) (_result_0 *elbv2.RegisterTargetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.RegisterTargetsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.RegisterTargetsInput) *elbv2.RegisterTargetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RegisterTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.RegisterTargetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTargetsRequest provides a mock function.
func (_m *Mockelbv2API) RegisterTargetsRequest(_parameter_0 *elbv2.RegisterTargetsInput) (_result_0 *request.Request, _result_1 *elbv2.RegisterTargetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.RegisterTargetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.RegisterTargetsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.RegisterTargetsInput) *elbv2.RegisterTargetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.RegisterTargetsOutput)
		}
	}

	return r0, r1
}

// RegisterTargetsWithContext provides a mock function.
func (_m *Mockelbv2API) RegisterTargetsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.RegisterTargetsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.RegisterTargetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.RegisterTargetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.RegisterTargetsInput, ...request.Option) *elbv2.RegisterTargetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RegisterTargetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.RegisterTargetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveListenerCertificates provides a mock function.
func (_m *Mockelbv2API) RemoveListenerCertificates(_parameter_0 *elbv2.RemoveListenerCertificatesInput) (_result_0 *elbv2.RemoveListenerCertificatesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.RemoveListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.RemoveListenerCertificatesInput) *elbv2.RemoveListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RemoveListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.RemoveListenerCertificatesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveListenerCertificatesRequest provides a mock function.
func (_m *Mockelbv2API) RemoveListenerCertificatesRequest(_parameter_0 *elbv2.RemoveListenerCertificatesInput) (_result_0 *request.Request, _result_1 *elbv2.RemoveListenerCertificatesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.RemoveListenerCertificatesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.RemoveListenerCertificatesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.RemoveListenerCertificatesInput) *elbv2.RemoveListenerCertificatesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.RemoveListenerCertificatesOutput)
		}
	}

	return r0, r1
}

// RemoveListenerCertificatesWithContext provides a mock function.
func (_m *Mockelbv2API) RemoveListenerCertificatesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.RemoveListenerCertificatesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.RemoveListenerCertificatesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.RemoveListenerCertificatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.RemoveListenerCertificatesInput, ...request.Option) *elbv2.RemoveListenerCertificatesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RemoveListenerCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.RemoveListenerCertificatesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTags provides a mock function.
func (_m *Mockelbv2API) RemoveTags(_parameter_0 *elbv2.RemoveTagsInput) (_result_0 *elbv2.RemoveTagsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.RemoveTagsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.RemoveTagsInput) *elbv2.RemoveTagsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RemoveTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.RemoveTagsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsRequest provides a mock function.
func (_m *Mockelbv2API) RemoveTagsRequest(_parameter_0 *elbv2.RemoveTagsInput) (_result_0 *request.Request, _result_1 *elbv2.RemoveTagsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.RemoveTagsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.RemoveTagsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.RemoveTagsInput) *elbv2.RemoveTagsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.RemoveTagsOutput)
		}
	}

	return r0, r1
}

// RemoveTagsWithContext provides a mock function.
func (_m *Mockelbv2API) RemoveTagsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.RemoveTagsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.RemoveTagsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.RemoveTagsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.RemoveTagsInput, ...request.Option) *elbv2.RemoveTagsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.RemoveTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.RemoveTagsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIpAddressType provides a mock function.
func (_m *Mockelbv2API) SetIpAddressType(_parameter_0 *elbv2.SetIpAddressTypeInput) (_result_0 *elbv2.SetIpAddressTypeOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.SetIpAddressTypeOutput
	if rf, ok := ret.Get(0).(func(*elbv2.SetIpAddressTypeInput) *elbv2.SetIpAddressTypeOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetIpAddressTypeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.SetIpAddressTypeInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIpAddressTypeRequest provides a mock function.
func (_m *Mockelbv2API) SetIpAddressTypeRequest(_parameter_0 *elbv2.SetIpAddressTypeInput) (_result_0 *request.Request, _result_1 *elbv2.SetIpAddressTypeOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.SetIpAddressTypeInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.SetIpAddressTypeOutput
	if rf, ok := ret.Get(1).(func(*elbv2.SetIpAddressTypeInput) *elbv2.SetIpAddressTypeOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.SetIpAddressTypeOutput)
		}
	}

	return r0, r1
}

// SetIpAddressTypeWithContext provides a mock function.
func (_m *Mockelbv2API) SetIpAddressTypeWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.SetIpAddressTypeInput, _parameter_2 ...request.Option) (_result_0 *elbv2.SetIpAddressTypeOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.SetIpAddressTypeOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.SetIpAddressTypeInput, ...request.Option) *elbv2.SetIpAddressTypeOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetIpAddressTypeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.SetIpAddressTypeInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRulePriorities provides a mock function.
func (_m *Mockelbv2API) SetRulePriorities(_parameter_0 *elbv2.SetRulePrioritiesInput) (_result_0 *elbv2.SetRulePrioritiesOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.SetRulePrioritiesOutput
	if rf, ok := ret.Get(0).(func(*elbv2.SetRulePrioritiesInput) *elbv2.SetRulePrioritiesOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetRulePrioritiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.SetRulePrioritiesInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetRulePrioritiesRequest provides a mock function.
func (_m *Mockelbv2API) SetRulePrioritiesRequest(_parameter_0 *elbv2.SetRulePrioritiesInput) (_result_0 *request.Request, _result_1 *elbv2.SetRulePrioritiesOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.SetRulePrioritiesInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.SetRulePrioritiesOutput
	if rf, ok := ret.Get(1).(func(*elbv2.SetRulePrioritiesInput) *elbv2.SetRulePrioritiesOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.SetRulePrioritiesOutput)
		}
	}

	return r0, r1
}

// SetRulePrioritiesWithContext provides a mock function.
func (_m *Mockelbv2API) SetRulePrioritiesWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.SetRulePrioritiesInput, _parameter_2 ...request.Option) (_result_0 *elbv2.SetRulePrioritiesOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.SetRulePrioritiesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.SetRulePrioritiesInput, ...request.Option) *elbv2.SetRulePrioritiesOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetRulePrioritiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.SetRulePrioritiesInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSecurityGroups provides a mock function.
func (_m *Mockelbv2API) SetSecurityGroups(_parameter_0 *elbv2.SetSecurityGroupsInput) (_result_0 *elbv2.SetSecurityGroupsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.SetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.SetSecurityGroupsInput) *elbv2.SetSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.SetSecurityGroupsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSecurityGroupsRequest provides a mock function.
func (_m *Mockelbv2API) SetSecurityGroupsRequest(_parameter_0 *elbv2.SetSecurityGroupsInput) (_result_0 *request.Request, _result_1 *elbv2.SetSecurityGroupsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.SetSecurityGroupsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.SetSecurityGroupsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.SetSecurityGroupsInput) *elbv2.SetSecurityGroupsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.SetSecurityGroupsOutput)
		}
	}

	return r0, r1
}

// SetSecurityGroupsWithContext provides a mock function.
func (_m *Mockelbv2API) SetSecurityGroupsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.SetSecurityGroupsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.SetSecurityGroupsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.SetSecurityGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.SetSecurityGroupsInput, ...request.Option) *elbv2.SetSecurityGroupsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetSecurityGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.SetSecurityGroupsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSubnets provides a mock function.
func (_m *Mockelbv2API) SetSubnets(_parameter_0 *elbv2.SetSubnetsInput) (_result_0 *elbv2.SetSubnetsOutput, _result_1 error) {
	ret := _m.Called(_parameter_0)

	var r0 *elbv2.SetSubnetsOutput
	if rf, ok := ret.Get(0).(func(*elbv2.SetSubnetsInput) *elbv2.SetSubnetsOutput); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetSubnetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*elbv2.SetSubnetsInput) error); ok {
		r1 = rf(_parameter_0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSubnetsRequest provides a mock function.
func (_m *Mockelbv2API) SetSubnetsRequest(_parameter_0 *elbv2.SetSubnetsInput) (_result_0 *request.Request, _result_1 *elbv2.SetSubnetsOutput) {
	ret := _m.Called(_parameter_0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*elbv2.SetSubnetsInput) *request.Request); ok {
		r0 = rf(_parameter_0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *elbv2.SetSubnetsOutput
	if rf, ok := ret.Get(1).(func(*elbv2.SetSubnetsInput) *elbv2.SetSubnetsOutput); ok {
		r1 = rf(_parameter_0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*elbv2.SetSubnetsOutput)
		}
	}

	return r0, r1
}

// SetSubnetsWithContext provides a mock function.
func (_m *Mockelbv2API) SetSubnetsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.SetSubnetsInput, _parameter_2 ...request.Option) (_result_0 *elbv2.SetSubnetsOutput, _result_1 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 *elbv2.SetSubnetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.SetSubnetsInput, ...request.Option) *elbv2.SetSubnetsOutput); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elbv2.SetSubnetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *elbv2.SetSubnetsInput, ...request.Option) error); ok {
		r1 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilLoadBalancerAvailable provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancerAvailable(_parameter_0 *elbv2.DescribeLoadBalancersInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilLoadBalancerAvailableWithContext provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancerAvailableWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancersInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilLoadBalancerExists provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancerExists(_parameter_0 *elbv2.DescribeLoadBalancersInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilLoadBalancerExistsWithContext provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancerExistsWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancersInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilLoadBalancersDeleted provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancersDeleted(_parameter_0 *elbv2.DescribeLoadBalancersInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeLoadBalancersInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilLoadBalancersDeletedWithContext provides a mock function.
func (_m *Mockelbv2API) WaitUntilLoadBalancersDeletedWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeLoadBalancersInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeLoadBalancersInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTargetDeregistered provides a mock function.
func (_m *Mockelbv2API) WaitUntilTargetDeregistered(_parameter_0 *elbv2.DescribeTargetHealthInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetHealthInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTargetDeregisteredWithContext provides a mock function.
func (_m *Mockelbv2API) WaitUntilTargetDeregisteredWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetHealthInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTargetInService provides a mock function.
func (_m *Mockelbv2API) WaitUntilTargetInService(_parameter_0 *elbv2.DescribeTargetHealthInput) (_result_0 error) {
	ret := _m.Called(_parameter_0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*elbv2.DescribeTargetHealthInput) error); ok {
		r0 = rf(_parameter_0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTargetInServiceWithContext provides a mock function.
func (_m *Mockelbv2API) WaitUntilTargetInServiceWithContext(_parameter_0 context.Context, _parameter_1 *elbv2.DescribeTargetHealthInput, _parameter_2 ...request.WaiterOption) (_result_0 error) {
	varParams := make([]interface{}, 2+len(_parameter_2))
	varParams[0] = _parameter_0
	varParams[1] = _parameter_1
	for varIndex, varParam := range _parameter_2 {
		varParams[2+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *elbv2.DescribeTargetHealthInput, ...request.WaiterOption) error); ok {
		r0 = rf(_parameter_0, _parameter_1, _parameter_2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockELBV2APIFactory is an autogenerated mock for the ELBV2APIFactory type.
type MockELBV2APIFactory struct {
	mock.Mock
}

// New provides a mock function.
func (_m *MockELBV2APIFactory) New(configProvider client.ConfigProvider, configs ...*aws.Config) (elbv2API elbv2iface.ELBV2API) {
	varParams := make([]interface{}, 1+len(configs))
	varParams[0] = configProvider
	for varIndex, varParam := range configs {
		varParams[1+varIndex] = varParam
	}

	ret := _m.Called(varParams...)

	var r0 elbv2iface.ELBV2API
	if rf, ok := ret.Get(0).(func(client.ConfigProvider, ...*aws.Config) elbv2iface.ELBV2API); ok {
		r0 = rf(configProvider, configs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elbv2iface.ELBV2API)
		}
	}

	return r0
}
