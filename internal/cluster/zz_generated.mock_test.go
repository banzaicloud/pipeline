// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package cluster

import (
	"context"
	"github.com/stretchr/testify/mock"
)

// MockNodePoolLabelSource is an autogenerated mock for the NodePoolLabelSource type.
type MockNodePoolLabelSource struct {
	mock.Mock
}

// GetLabels provides a mock function.
func (_m *MockNodePoolLabelSource) GetLabels(ctx context.Context, cluster Cluster, nodePool NodePool) (map[string]string, error) {
	ret := _m.Called(ctx, cluster, nodePool)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, Cluster, NodePool) map[string]string); ok {
		r0 = rf(ctx, cluster, nodePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Cluster, NodePool) error); ok {
		r1 = rf(ctx, cluster, nodePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLabelValidator is an autogenerated mock for the LabelValidator type.
type MockLabelValidator struct {
	mock.Mock
}

// ValidateKey provides a mock function.
func (_m *MockLabelValidator) ValidateKey(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateValue provides a mock function.
func (_m *MockLabelValidator) ValidateValue(value string) error {
	ret := _m.Called(value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore is an autogenerated mock for the Store type.
type MockStore struct {
	mock.Mock
}

// GetCluster provides a mock function.
func (_m *MockStore) GetCluster(ctx context.Context, id uint) (Cluster, error) {
	ret := _m.Called(ctx, id)

	var r0 Cluster
	if rf, ok := ret.Get(0).(func(context.Context, uint) Cluster); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterByName provides a mock function.
func (_m *MockStore) GetClusterByName(ctx context.Context, orgID uint, clusterName string) (Cluster, error) {
	ret := _m.Called(ctx, orgID, clusterName)

	var r0 Cluster
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) Cluster); ok {
		r0 = rf(ctx, orgID, clusterName)
	} else {
		r0 = ret.Get(0).(Cluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, orgID, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function.
func (_m *MockStore) SetStatus(ctx context.Context, id uint, status string, statusMessage string) error {
	ret := _m.Called(ctx, id, status, statusMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) error); ok {
		r0 = rf(ctx, id, status, statusMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterGroupManager is an autogenerated mock for the ClusterGroupManager type.
type MockClusterGroupManager struct {
	mock.Mock
}

// ValidateClusterRemoval provides a mock function.
func (_m *MockClusterGroupManager) ValidateClusterRemoval(ctx context.Context, clusterID uint) error {
	ret := _m.Called(ctx, clusterID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, clusterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodePoolStore is an autogenerated mock for the NodePoolStore type.
type MockNodePoolStore struct {
	mock.Mock
}

// DeleteNodePool provides a mock function.
func (_m *MockNodePoolStore) DeleteNodePool(ctx context.Context, clusterID uint, name string) error {
	ret := _m.Called(ctx, clusterID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, clusterID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodePoolExists provides a mock function.
func (_m *MockNodePoolStore) NodePoolExists(ctx context.Context, clusterID uint, name string) (bool, error) {
	ret := _m.Called(ctx, clusterID, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) bool); ok {
		r0 = rf(ctx, clusterID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, clusterID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodePoolValidator is an autogenerated mock for the NodePoolValidator type.
type MockNodePoolValidator struct {
	mock.Mock
}

// ValidateNew provides a mock function.
func (_m *MockNodePoolValidator) ValidateNew(ctx context.Context, cluster Cluster, rawNodePool NewRawNodePool) error {
	ret := _m.Called(ctx, cluster, rawNodePool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, Cluster, NewRawNodePool) error); ok {
		r0 = rf(ctx, cluster, rawNodePool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNodePoolProcessor is an autogenerated mock for the NodePoolProcessor type.
type MockNodePoolProcessor struct {
	mock.Mock
}

// ProcessNew provides a mock function.
func (_m *MockNodePoolProcessor) ProcessNew(ctx context.Context, cluster Cluster, rawNodePool NewRawNodePool) (NewRawNodePool, error) {
	ret := _m.Called(ctx, cluster, rawNodePool)

	var r0 NewRawNodePool
	if rf, ok := ret.Get(0).(func(context.Context, Cluster, NewRawNodePool) NewRawNodePool); ok {
		r0 = rf(ctx, cluster, rawNodePool)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NewRawNodePool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Cluster, NewRawNodePool) error); ok {
		r1 = rf(ctx, cluster, rawNodePool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNodePoolManager is an autogenerated mock for the NodePoolManager type.
type MockNodePoolManager struct {
	mock.Mock
}

// CreateNodePool provides a mock function.
func (_m *MockNodePoolManager) CreateNodePool(ctx context.Context, clusterID uint, rawNodePool NewRawNodePool) error {
	ret := _m.Called(ctx, clusterID, rawNodePool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, NewRawNodePool) error); ok {
		r0 = rf(ctx, clusterID, rawNodePool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNodePool provides a mock function.
func (_m *MockNodePoolManager) DeleteNodePool(ctx context.Context, clusterID uint, name string) error {
	ret := _m.Called(ctx, clusterID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, clusterID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
