// Code generated by mockery v1.0.0. DO NOT EDIT.

package anchore

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockFeatureAdapter is an autogenerated mock type for the FeatureAdapter type
type MockFeatureAdapter struct {
	mock.Mock
}

// GetFeatureConfig provides a mock function with given fields: ctx, clusterID, featureName
func (_m *MockFeatureAdapter) GetFeatureConfig(ctx context.Context, clusterID uint, featureName string) (Config, error) {
	ret := _m.Called(ctx, clusterID, featureName)

	var r0 Config
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) Config); ok {
		r0 = rf(ctx, clusterID, featureName)
	} else {
		r0 = ret.Get(0).(Config)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, clusterID, featureName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsActive provides a mock function with given fields: ctx, clusterID, featureName
func (_m *MockFeatureAdapter) IsActive(ctx context.Context, clusterID uint, featureName string) (bool, error) {
	ret := _m.Called(ctx, clusterID, featureName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) bool); ok {
		r0 = rf(ctx, clusterID, featureName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, clusterID, featureName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
