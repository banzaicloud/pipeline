// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package helm

import (
	"context"
	"github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock for the Service type.
type MockService struct {
	mock.Mock
}

// AddRepository provides a mock function.
func (_m *MockService) AddRepository(ctx context.Context, organizationID uint, repository Repository) error {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) error); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRepository provides a mock function.
func (_m *MockService) DeleteRepository(ctx context.Context, organizationID uint, repoName string) error {
	ret := _m.Called(ctx, organizationID, repoName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, organizationID, repoName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepositories provides a mock function.
func (_m *MockService) ListRepositories(ctx context.Context, organizationID uint) (repos []Repository, err error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []Repository
	if rf, ok := ret.Get(0).(func(context.Context, uint) []Repository); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepository provides a mock function.
func (_m *MockService) UpdateRepository(ctx context.Context, organizationID uint, repository Repository) error {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) error); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore is an autogenerated mock for the Store type.
type MockStore struct {
	mock.Mock
}

// Create provides a mock function.
func (_m *MockStore) Create(ctx context.Context, organizationID uint, repository Repository) error {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) error); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function.
func (_m *MockStore) Delete(ctx context.Context, organizationID uint, repository Repository) error {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) error); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function.
func (_m *MockStore) Get(ctx context.Context, organizationID uint, repository Repository) (Repository, error) {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 Repository
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) Repository); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Get(0).(Repository)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, Repository) error); ok {
		r1 = rf(ctx, organizationID, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function.
func (_m *MockStore) List(ctx context.Context, organizationID uint) ([]Repository, error) {
	ret := _m.Called(ctx, organizationID)

	var r0 []Repository
	if rf, ok := ret.Get(0).(func(context.Context, uint) []Repository); ok {
		r0 = rf(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Repository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function.
func (_m *MockStore) Update(ctx context.Context, organizationID uint, repository Repository) error {
	ret := _m.Called(ctx, organizationID, repository)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, Repository) error); ok {
		r0 = rf(ctx, organizationID, repository)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSecretStore is an autogenerated mock for the SecretStore type.
type MockSecretStore struct {
	mock.Mock
}

// CheckPasswordSecret provides a mock function.
func (_m *MockSecretStore) CheckPasswordSecret(ctx context.Context, secretID string) error {
	ret := _m.Called(ctx, secretID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckTLSSecret provides a mock function.
func (_m *MockSecretStore) CheckTLSSecret(ctx context.Context, secretID string) error {
	ret := _m.Called(ctx, secretID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolvePasswordSecrets provides a mock function.
func (_m *MockSecretStore) ResolvePasswordSecrets(ctx context.Context, secretID string) (PasswordSecret, error) {
	ret := _m.Called(ctx, secretID)

	var r0 PasswordSecret
	if rf, ok := ret.Get(0).(func(context.Context, string) PasswordSecret); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Get(0).(PasswordSecret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveTlsSecrets provides a mock function.
func (_m *MockSecretStore) ResolveTlsSecrets(ctx context.Context, secretID string) (TlsSecret, error) {
	ret := _m.Called(ctx, secretID)

	var r0 TlsSecret
	if rf, ok := ret.Get(0).(func(context.Context, string) TlsSecret); ok {
		r0 = rf(ctx, secretID)
	} else {
		r0 = ret.Get(0).(TlsSecret)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
