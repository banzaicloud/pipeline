// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package helmdriver

import (
	"context"
	"errors"
	"github.com/banzaicloud/pipeline/internal/helm"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	AddRepository    endpoint.Endpoint
	DeleteRepository endpoint.Endpoint
	Install          endpoint.Endpoint
	ListRepositories endpoint.Endpoint
	PatchRepository  endpoint.Endpoint
	UpdateRepository endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service helm.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		AddRepository:    kitxendpoint.OperationNameMiddleware("helm.AddRepository")(mw(MakeAddRepositoryEndpoint(service))),
		DeleteRepository: kitxendpoint.OperationNameMiddleware("helm.DeleteRepository")(mw(MakeDeleteRepositoryEndpoint(service))),
		Install:          kitxendpoint.OperationNameMiddleware("helm.Install")(mw(MakeInstallEndpoint(service))),
		ListRepositories: kitxendpoint.OperationNameMiddleware("helm.ListRepositories")(mw(MakeListRepositoriesEndpoint(service))),
		PatchRepository:  kitxendpoint.OperationNameMiddleware("helm.PatchRepository")(mw(MakePatchRepositoryEndpoint(service))),
		UpdateRepository: kitxendpoint.OperationNameMiddleware("helm.UpdateRepository")(mw(MakeUpdateRepositoryEndpoint(service))),
	}
}

// AddRepositoryRequest is a request struct for AddRepository endpoint.
type AddRepositoryRequest struct {
	OrganizationID uint
	Repository     helm.Repository
}

// AddRepositoryResponse is a response struct for AddRepository endpoint.
type AddRepositoryResponse struct {
	Err error
}

func (r AddRepositoryResponse) Failed() error {
	return r.Err
}

// MakeAddRepositoryEndpoint returns an endpoint for the matching method of the underlying service.
func MakeAddRepositoryEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(AddRepositoryRequest)

		err := service.AddRepository(ctx, req.OrganizationID, req.Repository)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return AddRepositoryResponse{Err: err}, nil
			}

			return AddRepositoryResponse{Err: err}, err
		}

		return AddRepositoryResponse{}, nil
	}
}

// DeleteRepositoryRequest is a request struct for DeleteRepository endpoint.
type DeleteRepositoryRequest struct {
	OrganizationID uint
	RepoName       string
}

// DeleteRepositoryResponse is a response struct for DeleteRepository endpoint.
type DeleteRepositoryResponse struct {
	Err error
}

func (r DeleteRepositoryResponse) Failed() error {
	return r.Err
}

// MakeDeleteRepositoryEndpoint returns an endpoint for the matching method of the underlying service.
func MakeDeleteRepositoryEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(DeleteRepositoryRequest)

		err := service.DeleteRepository(ctx, req.OrganizationID, req.RepoName)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return DeleteRepositoryResponse{Err: err}, nil
			}

			return DeleteRepositoryResponse{Err: err}, err
		}

		return DeleteRepositoryResponse{}, nil
	}
}

// InstallRequest is a request struct for Install endpoint.
type InstallRequest struct {
	OrganizationID uint
	ClusterID      uint
	Release        helm.Release
}

// InstallResponse is a response struct for Install endpoint.
type InstallResponse struct {
	Err error
}

func (r InstallResponse) Failed() error {
	return r.Err
}

// MakeInstallEndpoint returns an endpoint for the matching method of the underlying service.
func MakeInstallEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(InstallRequest)

		err := service.Install(ctx, req.OrganizationID, req.ClusterID, req.Release)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return InstallResponse{Err: err}, nil
			}

			return InstallResponse{Err: err}, err
		}

		return InstallResponse{}, nil
	}
}

// ListRepositoriesRequest is a request struct for ListRepositories endpoint.
type ListRepositoriesRequest struct {
	OrganizationID uint
}

// ListRepositoriesResponse is a response struct for ListRepositories endpoint.
type ListRepositoriesResponse struct {
	Repos []helm.Repository
	Err   error
}

func (r ListRepositoriesResponse) Failed() error {
	return r.Err
}

// MakeListRepositoriesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeListRepositoriesEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ListRepositoriesRequest)

		repos, err := service.ListRepositories(ctx, req.OrganizationID)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListRepositoriesResponse{
					Err:   err,
					Repos: repos,
				}, nil
			}

			return ListRepositoriesResponse{
				Err:   err,
				Repos: repos,
			}, err
		}

		return ListRepositoriesResponse{Repos: repos}, nil
	}
}

// PatchRepositoryRequest is a request struct for PatchRepository endpoint.
type PatchRepositoryRequest struct {
	OrganizationID uint
	Repository     helm.Repository
}

// PatchRepositoryResponse is a response struct for PatchRepository endpoint.
type PatchRepositoryResponse struct {
	Err error
}

func (r PatchRepositoryResponse) Failed() error {
	return r.Err
}

// MakePatchRepositoryEndpoint returns an endpoint for the matching method of the underlying service.
func MakePatchRepositoryEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(PatchRepositoryRequest)

		err := service.PatchRepository(ctx, req.OrganizationID, req.Repository)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return PatchRepositoryResponse{Err: err}, nil
			}

			return PatchRepositoryResponse{Err: err}, err
		}

		return PatchRepositoryResponse{}, nil
	}
}

// UpdateRepositoryRequest is a request struct for UpdateRepository endpoint.
type UpdateRepositoryRequest struct {
	OrganizationID uint
	Repository     helm.Repository
}

// UpdateRepositoryResponse is a response struct for UpdateRepository endpoint.
type UpdateRepositoryResponse struct {
	Err error
}

func (r UpdateRepositoryResponse) Failed() error {
	return r.Err
}

// MakeUpdateRepositoryEndpoint returns an endpoint for the matching method of the underlying service.
func MakeUpdateRepositoryEndpoint(service helm.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(UpdateRepositoryRequest)

		err := service.UpdateRepository(ctx, req.OrganizationID, req.Repository)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return UpdateRepositoryResponse{Err: err}, nil
			}

			return UpdateRepositoryResponse{Err: err}, err
		}

		return UpdateRepositoryResponse{}, nil
	}
}
