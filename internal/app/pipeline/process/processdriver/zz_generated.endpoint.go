// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package processdriver

import (
	"context"
	"errors"
	pipeline "github.com/banzaicloud/pipeline/.gen/pipeline/pipeline"
	"github.com/banzaicloud/pipeline/internal/app/pipeline/process"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	CancelProcess   endpoint.Endpoint
	GetProcess      endpoint.Endpoint
	ListProcesses   endpoint.Endpoint
	LogProcess      endpoint.Endpoint
	LogProcessEvent endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service process.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		CancelProcess:   kitxendpoint.OperationNameMiddleware("process.CancelProcess")(mw(MakeCancelProcessEndpoint(service))),
		GetProcess:      kitxendpoint.OperationNameMiddleware("process.GetProcess")(mw(MakeGetProcessEndpoint(service))),
		ListProcesses:   kitxendpoint.OperationNameMiddleware("process.ListProcesses")(mw(MakeListProcessesEndpoint(service))),
		LogProcess:      kitxendpoint.OperationNameMiddleware("process.LogProcess")(mw(MakeLogProcessEndpoint(service))),
		LogProcessEvent: kitxendpoint.OperationNameMiddleware("process.LogProcessEvent")(mw(MakeLogProcessEventEndpoint(service))),
	}
}

// CancelProcessRequest is a request struct for CancelProcess endpoint.
type CancelProcessRequest struct {
	Id string
}

// CancelProcessResponse is a response struct for CancelProcess endpoint.
type CancelProcessResponse struct {
	Err error
}

func (r CancelProcessResponse) Failed() error {
	return r.Err
}

// MakeCancelProcessEndpoint returns an endpoint for the matching method of the underlying service.
func MakeCancelProcessEndpoint(service process.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CancelProcessRequest)

		err := service.CancelProcess(ctx, req.Id)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return CancelProcessResponse{Err: err}, nil
			}

			return CancelProcessResponse{Err: err}, err
		}

		return CancelProcessResponse{}, nil
	}
}

// GetProcessRequest is a request struct for GetProcess endpoint.
type GetProcessRequest struct {
	Id string
}

// GetProcessResponse is a response struct for GetProcess endpoint.
type GetProcessResponse struct {
	Process pipeline.Process
	Err     error
}

func (r GetProcessResponse) Failed() error {
	return r.Err
}

// MakeGetProcessEndpoint returns an endpoint for the matching method of the underlying service.
func MakeGetProcessEndpoint(service process.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetProcessRequest)

		process, err := service.GetProcess(ctx, req.Id)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return GetProcessResponse{
					Err:     err,
					Process: process,
				}, nil
			}

			return GetProcessResponse{
				Err:     err,
				Process: process,
			}, err
		}

		return GetProcessResponse{Process: process}, nil
	}
}

// ListProcessesRequest is a request struct for ListProcesses endpoint.
type ListProcessesRequest struct {
	Query pipeline.Process
}

// ListProcessesResponse is a response struct for ListProcesses endpoint.
type ListProcessesResponse struct {
	Processes []pipeline.Process
	Err       error
}

func (r ListProcessesResponse) Failed() error {
	return r.Err
}

// MakeListProcessesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeListProcessesEndpoint(service process.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ListProcessesRequest)

		processes, err := service.ListProcesses(ctx, req.Query)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListProcessesResponse{
					Err:       err,
					Processes: processes,
				}, nil
			}

			return ListProcessesResponse{
				Err:       err,
				Processes: processes,
			}, err
		}

		return ListProcessesResponse{Processes: processes}, nil
	}
}

// LogProcessRequest is a request struct for LogProcess endpoint.
type LogProcessRequest struct {
	Proc pipeline.Process
}

// LogProcessResponse is a response struct for LogProcess endpoint.
type LogProcessResponse struct {
	Process pipeline.Process
	Err     error
}

func (r LogProcessResponse) Failed() error {
	return r.Err
}

// MakeLogProcessEndpoint returns an endpoint for the matching method of the underlying service.
func MakeLogProcessEndpoint(service process.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(LogProcessRequest)

		process, err := service.LogProcess(ctx, req.Proc)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return LogProcessResponse{
					Err:     err,
					Process: process,
				}, nil
			}

			return LogProcessResponse{
				Err:     err,
				Process: process,
			}, err
		}

		return LogProcessResponse{Process: process}, nil
	}
}

// LogProcessEventRequest is a request struct for LogProcessEvent endpoint.
type LogProcessEventRequest struct {
	Proc pipeline.ProcessEvent
}

// LogProcessEventResponse is a response struct for LogProcessEvent endpoint.
type LogProcessEventResponse struct {
	ProcessEvent pipeline.ProcessEvent
	Err          error
}

func (r LogProcessEventResponse) Failed() error {
	return r.Err
}

// MakeLogProcessEventEndpoint returns an endpoint for the matching method of the underlying service.
func MakeLogProcessEventEndpoint(service process.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(LogProcessEventRequest)

		processEvent, err := service.LogProcessEvent(ctx, req.Proc)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return LogProcessEventResponse{
					Err:          err,
					ProcessEvent: processEvent,
				}, nil
			}

			return LogProcessEventResponse{
				Err:          err,
				ProcessEvent: processEvent,
			}, err
		}

		return LogProcessEventResponse{ProcessEvent: processEvent}, nil
	}
}
