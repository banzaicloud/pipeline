// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package token

import (
	"context"
	"github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock for the Service type.
type MockService struct {
	mock.Mock
}

// CreateToken provides a mock function.
func (_m *MockService) CreateToken(ctx context.Context, tokenRequest NewTokenRequest) (newToken NewToken, err error) {
	ret := _m.Called(ctx, tokenRequest)

	var r0 NewToken
	if rf, ok := ret.Get(0).(func(context.Context, NewTokenRequest) NewToken); ok {
		r0 = rf(ctx, tokenRequest)
	} else {
		r0 = ret.Get(0).(NewToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, NewTokenRequest) error); ok {
		r1 = rf(ctx, tokenRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function.
func (_m *MockService) DeleteToken(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetToken provides a mock function.
func (_m *MockService) GetToken(ctx context.Context, id string) (token Token, err error) {
	ret := _m.Called(ctx, id)

	var r0 Token
	if rf, ok := ret.Get(0).(func(context.Context, string) Token); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTokens provides a mock function.
func (_m *MockService) ListTokens(ctx context.Context) (tokens []Token, err error) {
	ret := _m.Called(ctx)

	var r0 []Token
	if rf, ok := ret.Get(0).(func(context.Context) []Token); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
