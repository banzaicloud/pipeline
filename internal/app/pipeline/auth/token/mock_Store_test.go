// Code generated by mockery v1.0.0. DO NOT EDIT.

package token

import context "context"
import mock "github.com/stretchr/testify/mock"
import time "time"

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx, userID
func (_m *MockStore) List(ctx context.Context, userID string) ([]Token, error) {
	ret := _m.Called(ctx, userID)

	var r0 []Token
	if rf, ok := ret.Get(0).(func(context.Context, string) []Token); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields: ctx, userID, tokenID
func (_m *MockStore) Lookup(ctx context.Context, userID string, tokenID string) (Token, error) {
	ret := _m.Called(ctx, userID, tokenID)

	var r0 Token
	if rf, ok := ret.Get(0).(func(context.Context, string, string) Token); ok {
		r0 = rf(ctx, userID, tokenID)
	} else {
		r0 = ret.Get(0).(Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, tokenID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: ctx, userID, tokenID
func (_m *MockStore) Revoke(ctx context.Context, userID string, tokenID string) error {
	ret := _m.Called(ctx, userID, tokenID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, tokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, userID, tokenID, name, expiresAt
func (_m *MockStore) Store(ctx context.Context, userID string, tokenID string, name string, expiresAt *time.Time) error {
	ret := _m.Called(ctx, userID, tokenID, name, expiresAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *time.Time) error); ok {
		r0 = rf(ctx, userID, tokenID, name, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
