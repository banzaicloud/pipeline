// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package helm3driver

import (
	"context"
	"errors"
	"github.com/banzaicloud/pipeline/internal/helm3"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	AddRepository    endpoint.Endpoint
	ListRepositories endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service helm3.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		AddRepository:    kitxendpoint.OperationNameMiddleware("helm3.AddRepository")(mw(MakeAddRepositoryEndpoint(service))),
		ListRepositories: kitxendpoint.OperationNameMiddleware("helm3.ListRepositories")(mw(MakeListRepositoriesEndpoint(service))),
	}
}

// AddRepositoryRequest is a request struct for AddRepository endpoint.
type AddRepositoryRequest struct {
	OrganizationID uint
	Repository     helm3.Repository
}

// AddRepositoryResponse is a response struct for AddRepository endpoint.
type AddRepositoryResponse struct {
	Err error
}

func (r AddRepositoryResponse) Failed() error {
	return r.Err
}

// MakeAddRepositoryEndpoint returns an endpoint for the matching method of the underlying service.
func MakeAddRepositoryEndpoint(service helm3.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(AddRepositoryRequest)

		err := service.AddRepository(ctx, req.OrganizationID, req.Repository)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return AddRepositoryResponse{Err: err}, nil
			}

			return AddRepositoryResponse{Err: err}, err
		}

		return AddRepositoryResponse{}, nil
	}
}

// ListRepositoriesRequest is a request struct for ListRepositories endpoint.
type ListRepositoriesRequest struct {
	OrganizationID uint
}

// ListRepositoriesResponse is a response struct for ListRepositories endpoint.
type ListRepositoriesResponse struct {
	Repos []helm3.Repository
	Err   error
}

func (r ListRepositoriesResponse) Failed() error {
	return r.Err
}

// MakeListRepositoriesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeListRepositoriesEndpoint(service helm3.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ListRepositoriesRequest)

		repos, err := service.ListRepositories(ctx, req.OrganizationID)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ListRepositoriesResponse{
					Err:   err,
					Repos: repos,
				}, nil
			}

			return ListRepositoriesResponse{
				Err:   err,
				Repos: repos,
			}, err
		}

		return ListRepositoriesResponse{Repos: repos}, nil
	}
}
