// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package services

import (
	"context"
	"github.com/banzaicloud/pipeline/pkg/helm"
	"github.com/stretchr/testify/mock"
)

// MockHelmService is an autogenerated mock for the HelmService type.
type MockHelmService struct {
	mock.Mock
}

// ApplyDeployment provides a mock function.
func (_m *MockHelmService) ApplyDeployment(ctx context.Context, clusterID uint, namespace string, chartName string, releaseName string, values []uint8, chartVersion string) error {
	ret := _m.Called(ctx, clusterID, namespace, chartName, releaseName, values, chartVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string, string, []uint8, string) error); ok {
		r0 = rf(ctx, clusterID, namespace, chartName, releaseName, values, chartVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDeployment provides a mock function.
func (_m *MockHelmService) DeleteDeployment(ctx context.Context, clusterID uint, releaseName string, namespace string) error {
	ret := _m.Called(ctx, clusterID, releaseName, namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) error); ok {
		r0 = rf(ctx, clusterID, releaseName, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeployment provides a mock function.
func (_m *MockHelmService) GetDeployment(ctx context.Context, clusterID uint, releaseName string, namespace string) (*helm.GetDeploymentResponse, error) {
	ret := _m.Called(ctx, clusterID, releaseName, namespace)

	var r0 *helm.GetDeploymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, string) *helm.GetDeploymentResponse); ok {
		r0 = rf(ctx, clusterID, releaseName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helm.GetDeploymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string, string) error); ok {
		r1 = rf(ctx, clusterID, releaseName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
