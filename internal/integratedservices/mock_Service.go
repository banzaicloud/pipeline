// Code generated by mockery v1.0.0. DO NOT EDIT.

package integratedservices

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, clusterID, featureName, spec
func (_m *MockService) Activate(ctx context.Context, clusterID uint, featureName string, spec map[string]interface{}) error {
	ret := _m.Called(ctx, clusterID, featureName, spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, clusterID, featureName, spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Deactivate provides a mock function with given fields: ctx, clusterID, featureName
func (_m *MockService) Deactivate(ctx context.Context, clusterID uint, featureName string) error {
	ret := _m.Called(ctx, clusterID, featureName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, clusterID, featureName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Details provides a mock function with given fields: ctx, clusterID, featureName
func (_m *MockService) Details(ctx context.Context, clusterID uint, featureName string) (Feature, error) {
	ret := _m.Called(ctx, clusterID, featureName)

	var r0 Feature
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) Feature); ok {
		r0 = rf(ctx, clusterID, featureName)
	} else {
		r0 = ret.Get(0).(Feature)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(ctx, clusterID, featureName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, clusterID
func (_m *MockService) List(ctx context.Context, clusterID uint) ([]Feature, error) {
	ret := _m.Called(ctx, clusterID)

	var r0 []Feature
	if rf, ok := ret.Get(0).(func(context.Context, uint) []Feature); ok {
		r0 = rf(ctx, clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Feature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, clusterID, featureName, spec
func (_m *MockService) Update(ctx context.Context, clusterID uint, featureName string, spec map[string]interface{}) error {
	ret := _m.Called(ctx, clusterID, featureName, spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, clusterID, featureName, spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
