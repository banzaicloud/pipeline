/*
Product Info.

The product info application uses the cloud provider APIs to asynchronously fetch and parse instance type attributes and prices, while storing the results in an in memory cache and making it available as structured data through a REST API.

API version: 0.9.5
Contact: info@banzaicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudinfo

import (
	"encoding/json"
)

// ProvidersResponse ProvidersResponse is the response used for the supported providers
type ProvidersResponse struct {
	Providers []Provider `json:"providers,omitempty"`
}

// NewProvidersResponse instantiates a new ProvidersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvidersResponse() *ProvidersResponse {
	this := ProvidersResponse{}
	return &this
}

// NewProvidersResponseWithDefaults instantiates a new ProvidersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvidersResponseWithDefaults() *ProvidersResponse {
	this := ProvidersResponse{}
	return &this
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *ProvidersResponse) GetProviders() []Provider {
	if o == nil || o.Providers == nil {
		var ret []Provider
		return ret
	}
	return o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvidersResponse) GetProvidersOk() ([]Provider, bool) {
	if o == nil || o.Providers == nil {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *ProvidersResponse) HasProviders() bool {
	if o != nil && o.Providers != nil {
		return true
	}

	return false
}

// SetProviders gets a reference to the given []Provider and assigns it to the Providers field.
func (o *ProvidersResponse) SetProviders(v []Provider) {
	o.Providers = v
}

func (o ProvidersResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Providers != nil {
		toSerialize["providers"] = o.Providers
	}
	return json.Marshal(toSerialize)
}

type NullableProvidersResponse struct {
	value *ProvidersResponse
	isSet bool
}

func (v NullableProvidersResponse) Get() *ProvidersResponse {
	return v.value
}

func (v *NullableProvidersResponse) Set(val *ProvidersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProvidersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProvidersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvidersResponse(val *ProvidersResponse) *NullableProvidersResponse {
	return &NullableProvidersResponse{value: val, isSet: true}
}

func (v NullableProvidersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvidersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


