/*
Product Info.

The product info application uses the cloud provider APIs to asynchronously fetch and parse instance type attributes and prices, while storing the results in an in memory cache and making it available as structured data through a REST API.

API version: 0.9.5
Contact: info@banzaicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudinfo

import (
	"encoding/json"
)

// Continent Continent holds continent and regions of a cloud provider
type Continent struct {
	Name *string `json:"name,omitempty"`
	Regions []Region `json:"regions,omitempty"`
}

// NewContinent instantiates a new Continent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContinent() *Continent {
	this := Continent{}
	return &this
}

// NewContinentWithDefaults instantiates a new Continent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContinentWithDefaults() *Continent {
	this := Continent{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Continent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Continent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Continent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Continent) SetName(v string) {
	o.Name = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Continent) GetRegions() []Region {
	if o == nil || o.Regions == nil {
		var ret []Region
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Continent) GetRegionsOk() ([]Region, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Continent) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []Region and assigns it to the Regions field.
func (o *Continent) SetRegions(v []Region) {
	o.Regions = v
}

func (o Continent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	return json.Marshal(toSerialize)
}

type NullableContinent struct {
	value *Continent
	isSet bool
}

func (v NullableContinent) Get() *Continent {
	return v.value
}

func (v *NullableContinent) Set(val *Continent) {
	v.value = val
	v.isSet = true
}

func (v NullableContinent) IsSet() bool {
	return v.isSet
}

func (v *NullableContinent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContinent(val *Continent) *NullableContinent {
	return &NullableContinent{value: val, isSet: true}
}

func (v NullableContinent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContinent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


