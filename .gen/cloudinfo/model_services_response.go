/*
Product Info.

The product info application uses the cloud provider APIs to asynchronously fetch and parse instance type attributes and prices, while storing the results in an in memory cache and making it available as structured data through a REST API.

API version: 0.9.5
Contact: info@banzaicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudinfo

import (
	"encoding/json"
)

// ServicesResponse ServicesResponse holds the list of available services
type ServicesResponse struct {
	Services []Service `json:"services,omitempty"`
}

// NewServicesResponse instantiates a new ServicesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesResponse() *ServicesResponse {
	this := ServicesResponse{}
	return &this
}

// NewServicesResponseWithDefaults instantiates a new ServicesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesResponseWithDefaults() *ServicesResponse {
	this := ServicesResponse{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ServicesResponse) GetServices() []Service {
	if o == nil || o.Services == nil {
		var ret []Service
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesResponse) GetServicesOk() ([]Service, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ServicesResponse) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []Service and assigns it to the Services field.
func (o *ServicesResponse) SetServices(v []Service) {
	o.Services = v
}

func (o ServicesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableServicesResponse struct {
	value *ServicesResponse
	isSet bool
}

func (v NullableServicesResponse) Get() *ServicesResponse {
	return v.value
}

func (v *NullableServicesResponse) Set(val *ServicesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesResponse(val *ServicesResponse) *NullableServicesResponse {
	return &NullableServicesResponse{value: val, isSet: true}
}

func (v NullableServicesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


