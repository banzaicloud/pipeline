/*
Product Info.

The product info application uses the cloud provider APIs to asynchronously fetch and parse instance type attributes and prices, while storing the results in an in memory cache and making it available as structured data through a REST API.

API version: 0.9.5
Contact: info@banzaicloud.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudinfo

import (
	"encoding/json"
)

// Service it's intended to implement the ServiceDescriber interface
type Service struct {
	IsStatic *bool `json:"isStatic,omitempty"`
	Service *string `json:"service,omitempty"`
}

// NewService instantiates a new Service object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewService() *Service {
	this := Service{}
	return &this
}

// NewServiceWithDefaults instantiates a new Service object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceWithDefaults() *Service {
	this := Service{}
	return &this
}

// GetIsStatic returns the IsStatic field value if set, zero value otherwise.
func (o *Service) GetIsStatic() bool {
	if o == nil || o.IsStatic == nil {
		var ret bool
		return ret
	}
	return *o.IsStatic
}

// GetIsStaticOk returns a tuple with the IsStatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetIsStaticOk() (*bool, bool) {
	if o == nil || o.IsStatic == nil {
		return nil, false
	}
	return o.IsStatic, true
}

// HasIsStatic returns a boolean if a field has been set.
func (o *Service) HasIsStatic() bool {
	if o != nil && o.IsStatic != nil {
		return true
	}

	return false
}

// SetIsStatic gets a reference to the given bool and assigns it to the IsStatic field.
func (o *Service) SetIsStatic(v bool) {
	o.IsStatic = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *Service) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Service) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *Service) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *Service) SetService(v string) {
	o.Service = &v
}

func (o Service) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsStatic != nil {
		toSerialize["isStatic"] = o.IsStatic
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableService struct {
	value *Service
	isSet bool
}

func (v NullableService) Get() *Service {
	return v.value
}

func (v *NullableService) Set(val *Service) {
	v.value = val
	v.isSet = true
}

func (v NullableService) IsSet() bool {
	return v.isSet
}

func (v *NullableService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableService(val *Service) *NullableService {
	return &NullableService{value: val, isSet: true}
}

func (v NullableService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


