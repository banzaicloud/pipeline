/*
Anchore Engine API Server

This is the Anchore Engine API. Provides the primary external API for users of the service.

API version: 0.1.20
Contact: nurmi@anchore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anchore

import (
	"encoding/json"
)

// ImportDistribution struct for ImportDistribution
type ImportDistribution struct {
	Name string `json:"name"`
	Version string `json:"version"`
	IdLike string `json:"idLike"`
}

// NewImportDistribution instantiates a new ImportDistribution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportDistribution(name string, version string, idLike string) *ImportDistribution {
	this := ImportDistribution{}
	this.Name = name
	this.Version = version
	this.IdLike = idLike
	return &this
}

// NewImportDistributionWithDefaults instantiates a new ImportDistribution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportDistributionWithDefaults() *ImportDistribution {
	this := ImportDistribution{}
	return &this
}

// GetName returns the Name field value
func (o *ImportDistribution) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImportDistribution) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImportDistribution) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *ImportDistribution) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ImportDistribution) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ImportDistribution) SetVersion(v string) {
	o.Version = v
}

// GetIdLike returns the IdLike field value
func (o *ImportDistribution) GetIdLike() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdLike
}

// GetIdLikeOk returns a tuple with the IdLike field value
// and a boolean to check if the value has been set.
func (o *ImportDistribution) GetIdLikeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdLike, true
}

// SetIdLike sets field value
func (o *ImportDistribution) SetIdLike(v string) {
	o.IdLike = v
}

func (o ImportDistribution) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["idLike"] = o.IdLike
	}
	return json.Marshal(toSerialize)
}

type NullableImportDistribution struct {
	value *ImportDistribution
	isSet bool
}

func (v NullableImportDistribution) Get() *ImportDistribution {
	return v.value
}

func (v *NullableImportDistribution) Set(val *ImportDistribution) {
	v.value = val
	v.isSet = true
}

func (v NullableImportDistribution) IsSet() bool {
	return v.isSet
}

func (v *NullableImportDistribution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportDistribution(val *ImportDistribution) *NullableImportDistribution {
	return &NullableImportDistribution{value: val, isSet: true}
}

func (v NullableImportDistribution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportDistribution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


