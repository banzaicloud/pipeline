/*
Anchore Engine API Server

This is the Anchore Engine API. Provides the primary external API for users of the service.

API version: 0.1.20
Contact: nurmi@anchore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anchore

import (
	"encoding/json"
)

// GateSpec A description of the set of gates available in this engine and the triggers and parameters supported
type GateSpec struct {
	// Gate name, as it would appear in a policy document
	Name *string `json:"name,omitempty"`
	// Description of the gate
	Description *string `json:"description,omitempty"`
	// State of the gate and transitively all triggers it contains if not 'active'
	State *string `json:"state,omitempty"`
	// The name of another trigger that supercedes this on functionally if this is deprecated
	SupercededBy NullableString `json:"superceded_by,omitempty"`
	// List of the triggers that can fire for this Gate
	Triggers []TriggerSpec `json:"triggers,omitempty"`
}

// NewGateSpec instantiates a new GateSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGateSpec() *GateSpec {
	this := GateSpec{}
	return &this
}

// NewGateSpecWithDefaults instantiates a new GateSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGateSpecWithDefaults() *GateSpec {
	this := GateSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GateSpec) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateSpec) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GateSpec) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GateSpec) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GateSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GateSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GateSpec) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GateSpec) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateSpec) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GateSpec) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GateSpec) SetState(v string) {
	o.State = &v
}

// GetSupercededBy returns the SupercededBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GateSpec) GetSupercededBy() string {
	if o == nil || o.SupercededBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.SupercededBy.Get()
}

// GetSupercededByOk returns a tuple with the SupercededBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GateSpec) GetSupercededByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupercededBy.Get(), o.SupercededBy.IsSet()
}

// HasSupercededBy returns a boolean if a field has been set.
func (o *GateSpec) HasSupercededBy() bool {
	if o != nil && o.SupercededBy.IsSet() {
		return true
	}

	return false
}

// SetSupercededBy gets a reference to the given NullableString and assigns it to the SupercededBy field.
func (o *GateSpec) SetSupercededBy(v string) {
	o.SupercededBy.Set(&v)
}
// SetSupercededByNil sets the value for SupercededBy to be an explicit nil
func (o *GateSpec) SetSupercededByNil() {
	o.SupercededBy.Set(nil)
}

// UnsetSupercededBy ensures that no value is present for SupercededBy, not even an explicit nil
func (o *GateSpec) UnsetSupercededBy() {
	o.SupercededBy.Unset()
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *GateSpec) GetTriggers() []TriggerSpec {
	if o == nil || o.Triggers == nil {
		var ret []TriggerSpec
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GateSpec) GetTriggersOk() ([]TriggerSpec, bool) {
	if o == nil || o.Triggers == nil {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *GateSpec) HasTriggers() bool {
	if o != nil && o.Triggers != nil {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []TriggerSpec and assigns it to the Triggers field.
func (o *GateSpec) SetTriggers(v []TriggerSpec) {
	o.Triggers = v
}

func (o GateSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SupercededBy.IsSet() {
		toSerialize["superceded_by"] = o.SupercededBy.Get()
	}
	if o.Triggers != nil {
		toSerialize["triggers"] = o.Triggers
	}
	return json.Marshal(toSerialize)
}

type NullableGateSpec struct {
	value *GateSpec
	isSet bool
}

func (v NullableGateSpec) Get() *GateSpec {
	return v.value
}

func (v *NullableGateSpec) Set(val *GateSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableGateSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableGateSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGateSpec(val *GateSpec) *NullableGateSpec {
	return &NullableGateSpec{value: val, isSet: true}
}

func (v NullableGateSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGateSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


