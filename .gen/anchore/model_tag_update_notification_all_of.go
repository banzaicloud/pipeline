/*
Anchore Engine API Server

This is the Anchore Engine API. Provides the primary external API for users of the service.

API version: 0.1.20
Contact: nurmi@anchore.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package anchore

import (
	"encoding/json"
)

// TagUpdateNotificationAllOf The Notification Object definition for Tag Update Notifications
type TagUpdateNotificationAllOf struct {
	Data *TagUpdateNotificationData `json:"data,omitempty"`
}

// NewTagUpdateNotificationAllOf instantiates a new TagUpdateNotificationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagUpdateNotificationAllOf() *TagUpdateNotificationAllOf {
	this := TagUpdateNotificationAllOf{}
	return &this
}

// NewTagUpdateNotificationAllOfWithDefaults instantiates a new TagUpdateNotificationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagUpdateNotificationAllOfWithDefaults() *TagUpdateNotificationAllOf {
	this := TagUpdateNotificationAllOf{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TagUpdateNotificationAllOf) GetData() TagUpdateNotificationData {
	if o == nil || o.Data == nil {
		var ret TagUpdateNotificationData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagUpdateNotificationAllOf) GetDataOk() (*TagUpdateNotificationData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TagUpdateNotificationAllOf) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given TagUpdateNotificationData and assigns it to the Data field.
func (o *TagUpdateNotificationAllOf) SetData(v TagUpdateNotificationData) {
	o.Data = &v
}

func (o TagUpdateNotificationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableTagUpdateNotificationAllOf struct {
	value *TagUpdateNotificationAllOf
	isSet bool
}

func (v NullableTagUpdateNotificationAllOf) Get() *TagUpdateNotificationAllOf {
	return v.value
}

func (v *NullableTagUpdateNotificationAllOf) Set(val *TagUpdateNotificationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTagUpdateNotificationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTagUpdateNotificationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagUpdateNotificationAllOf(val *TagUpdateNotificationAllOf) *NullableTagUpdateNotificationAllOf {
	return &NullableTagUpdateNotificationAllOf{value: val, isSet: true}
}

func (v NullableTagUpdateNotificationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagUpdateNotificationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


