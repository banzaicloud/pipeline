/*
 * Pipeline API
 *
 * Pipeline is a feature rich application platform, built for containers on top of Kubernetes to automate the DevOps experience, continuous application development and the lifecycle of deployments. 
 *
 * API version: latest
 * Contact: info@banzaicloud.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pipeline

type EksUpdateNodePoolRequestAllOf struct {

	Autoscaling NodePoolAutoScaling `json:"autoscaling,omitempty"`

	VolumeEncryption *EksNodePoolVolumeEncryption `json:"volumeEncryption,omitempty"`

	// Size of the EBS volume in GiBs of the nodes in the pool.
	VolumeSize int32 `json:"volumeSize,omitempty"`

	// Type of the EBS volume of the nodes in the pool (default gp3).
	VolumeType string `json:"volumeType,omitempty"`

	// The instance type to use for your node pool.
	InstanceType string `json:"instanceType,omitempty"`

	// The instance AMI to use for your node pool.
	Image string `json:"image,omitempty"`

	// The Kubernetes version to use for your node pool.
	Version string `json:"version,omitempty"`

	// The upper limit price for the requested spot instance. If this field is empty or 0 on-demand instances are used instead of spot instances.
	SpotPrice string `json:"spotPrice,omitempty"`

	// List of additional custom security groups for all nodes in the pool.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Setup available instance stores (NVMe disks) to use for Kubelet root if available. As a result emptyDir volumes will be provisioned on local instance storage disks. You can check out available instance storages here https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes.
	UseInstanceStore *bool `json:"useInstanceStore,omitempty"`

	Options BaseUpdateNodePoolOptions `json:"options,omitempty"`
}

// AssertEksUpdateNodePoolRequestAllOfRequired checks if the required fields are not zero-ed
func AssertEksUpdateNodePoolRequestAllOfRequired(obj EksUpdateNodePoolRequestAllOf) error {
	if err := AssertNodePoolAutoScalingRequired(obj.Autoscaling); err != nil {
		return err
	}
	if obj.VolumeEncryption != nil {
		if err := AssertEksNodePoolVolumeEncryptionRequired(*obj.VolumeEncryption); err != nil {
			return err
		}
	}
	if err := AssertBaseUpdateNodePoolOptionsRequired(obj.Options); err != nil {
		return err
	}
	return nil
}

// AssertRecurseEksUpdateNodePoolRequestAllOfRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EksUpdateNodePoolRequestAllOf (e.g. [][]EksUpdateNodePoolRequestAllOf), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEksUpdateNodePoolRequestAllOfRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEksUpdateNodePoolRequestAllOf, ok := obj.(EksUpdateNodePoolRequestAllOf)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEksUpdateNodePoolRequestAllOfRequired(aEksUpdateNodePoolRequestAllOf)
	})
}
