/*
 * Pipeline API
 *
 * Pipeline is a feature rich application platform, built for containers on top of Kubernetes to automate the DevOps experience, continuous application development and the lifecycle of deployments. 
 *
 * API version: latest
 * Contact: info@banzaicloud.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pipeline

// EksNodePoolVolumeEncryption - Encryption details of the node volumes in an EKS node pool.
type EksNodePoolVolumeEncryption struct {

	// Indicator of encrypted node pool node volumes.
	Enabled bool `json:"enabled"`

	// KMS key ARN to use for node volume encryption.
	EncryptionKeyARN string `json:"encryptionKeyARN,omitempty"`
}

// AssertEksNodePoolVolumeEncryptionRequired checks if the required fields are not zero-ed
func AssertEksNodePoolVolumeEncryptionRequired(obj EksNodePoolVolumeEncryption) error {
	elements := map[string]interface{}{
		"enabled": obj.Enabled,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEksNodePoolVolumeEncryptionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EksNodePoolVolumeEncryption (e.g. [][]EksNodePoolVolumeEncryption), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEksNodePoolVolumeEncryptionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEksNodePoolVolumeEncryption, ok := obj.(EksNodePoolVolumeEncryption)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEksNodePoolVolumeEncryptionRequired(aEksNodePoolVolumeEncryption)
	})
}
