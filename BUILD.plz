github_repo(
    name = "pleasings2",
    repo = "sagikazarmark/mypleasings",
    revision = "e4fd643c798334dd577fc8bf28d599843bb94fc1",
)

genrule(
    name = "docker-compose.override.yml",
    srcs = ["docker-compose.override.yml.dist"],
    outs = ["docker-compose.override.yml"],
    cmd = "cat docker-compose.override.yml.dist | sed -e \"s/# user: \\\"\\\\${uid}:\\\\${gid}\\\"/user: \\\"$(id -u):$(id -g)\\\"/\" > \"$OUTS\"" if CONFIG.HOSTOS == "linux" else 'cp docker-compose.override.yml.dist "$OUTS"',
)

sh_cmd(
    name = "up",
    cmd = [
        "if [ ! -f etc/config/dex.yml ]; then plz make //etc/config:dex.yml; fi",
        "if [ ! -f config/ui/feature-set.json ]; then plz make //config/ui:feature-set.json; fi",
        "if [ ! -f config/config.yaml ]; then plz make //config:config.yaml; fi",
        "$(out_location :start)",
    ],
    deps = [":start"],
)

sh_cmd(
    name = "down",
    cmd = [
        "docker-compose down -v",
        "sudo rm -rf .docker/" if CONFIG.HOSTOS == "linux" else "rm -rf .docker/",
    ],
)

sh_cmd(
    name = "start",
    cmd = [
        "if [ ! -f docker-compose.override.yml ]; then plz make :docker-compose.override.yml; fi",
        "mkdir -p .docker/volumes/{mysql,vault/file,vault/keys}",
        "docker-compose up -d",
    ],
)

sh_cmd(
    name = "stop",
    cmd = "docker-compose stop",
)

sh_cmd(
    name = "snapshot",
    shell = "/usr/bin/env bash",
    cmd = """
set -o errexit -o pipefail

# Global regex variables
NAT="0|[1-9][0-9]*"
VERSION_REGEX="^[vV]?(\\\$NAT)\.(\\\$NAT)\.(\\\$NAT)$"
PATCH_BRANCH_REGEX="^[vV]?(\\\$NAT)\.(\\\$NAT)\.x$"

PROG=snapshot

USAGE="\\
Usage:
  \\\$PROG (<tag>)
  \\\$PROG --help

Arguments:
  <tag>      A tag for the final artifact of the snapshot (ie. Docker image).

Options:
  -r, --ref              The ref to create the tag for.
  --major                Bump a major version on master instead of a minor version.
  -n, --dry-run          Print the commands to be executed.
  -h, --help             Print this help message.

Tags can automatically be determined for the master branch (next minor)
and patch branches matching the "*.*.x" pattern (next patch).

For other branches and refs, provide a tag name.

The command automatically detects the current ref,
but you can also manually choose one using the --ref option.
When the tag is automatically detected (see above),
manually provided refs are ignored and are auto-detected."

function info {
  echo -e "\\\$1" >&2
}

function warn {
  echo -e "\x1B[33m\\\$1\x1B[0m" >&2
}

function error {
  echo -e "\x1B[31m\\\$1\x1B[0m" >&2
  exit 1
}

# Default values of arguments
REF=""
MAJOR=false
DRY_RUN=false
HELP=false
ARGS=()

# Loop through arguments and process them
for arg in "\\\$@"
do
    case \\\$arg in
        -r|--ref)
        REF="\\\$2"
        shift 2 # Remove argument name and value from processing
        ;;
        --major)
        MAJOR=true
        shift # Remove --major from processing
        ;;
        -n|--dry-run)
        DRY_RUN=true
        shift # Remove --dry-run from processing
        ;;
        -h|--help)
        HELP=true
        shift # Remove --help from processing
        ;;
        *)
        ARGS+=("\\\$1")
        shift # Remove generic argument from processing
        ;;
    esac
done

if [[ \\\$HELP == true ]]; then
    echo -e "\\\$USAGE"

    exit 0
fi

# Prepare dry-run command
CMD=""
if [[ \\\$DRY_RUN == true ]]; then
    CMD="echo"
else
    CMD=""

    if [[ "\\\$GITHUB_TOKEN" == "" ]]; then
        error "missing github token"
    fi
fi

TAG="\\\${ARGS[0]}"

# Auto-detect tag (if possible)
if [[ "\\\$TAG" == "" ]]; then
    if [[ "\\\$REF" != "" ]]; then
        warn "ignoring ref \\"\\\$REF\\": auto-detecting tag"
    fi

    CURRENT_BRANCH="\\\$(git branch --show-current)"

    if [[ "\\\$CURRENT_BRANCH" =~ \\\$PATCH_BRANCH_REGEX ]]; then
        CURRENT_PATCH_VERSION_REGEX="^[vV]?\\\${BASH_REMATCH[1]}\.\\\${BASH_REMATCH[2]}\.(\\\$NAT)$"

        LATEST_VERSION="\\\$(git tag | grep -E "\\\$CURRENT_PATCH_VERSION_REGEX" | sort -r --version-sort | head -1)"
        if [[ "\\\$LATEST_VERSION" == "" ]]; then
            error "failed to determine latest version for patch branch \\"\\\$CURRENT_BRANCH\\""
        fi

        TAG="\\\$($(out_location ///pleasings2//tools/misc:semver) bump patch \\\$LATEST_VERSION)-snapshot.\\\\$(date +%s)"
    elif [[ "\\\$CURRENT_BRANCH" == "master" ]]; then
        LATEST_VERSION="\\\$(git tag | grep -E "\\\$VERSION_REGEX" | sort -r --version-sort | head -1)"
        if [[ "\\\$LATEST_VERSION" == "" ]]; then
            error "failed to determine latest version"
        fi

        VERSION_TO_BUMP="minor"
        if [[ \\\$MAJOR == true ]]; then
            VERSION_TO_BUMP="major"
        fi

        TAG="\\\$($(out_location ///pleasings2//tools/misc:semver) bump \\\$VERSION_TO_BUMP \\\$LATEST_VERSION)-snapshot.\\\\$(date +%s)"
    elif [[ "\\\$CURRENT_BRANCH" == "" ]]; then
        error "failed to automatically determine tag: not currently on a branch"
    else
        error "failed to automatically determine tag for branch \\"\\\$CURRENT_BRANCH\\""
    fi

    REF="\\\$CURRENT_BRANCH"
fi

# Validate tag
if [[ "\\\$TAG" == "" ]]; then
    error "missing tag"
fi

# Auto-detect or validate ref
if [[ "\\\$REF" == "" ]]; then
    REF="\\\$(git symbolic-ref -q --short HEAD || git rev-parse HEAD)"
else
    git rev-parse --verify "\\\$REF" > /dev/null 2>&1 || error "invalid ref \\"\\\$REF\\""
fi

info "triggering snapshot build for \\"\\\$TAG\\" at ref \\"\\\$REF\\""

GITHUB_PAYLOAD=\\\$($(out_location ///pleasings2//tools/misc:jq) -n --arg tag "\\\$TAG" --arg ref "\\\$REF" '{"ref": \\\$ref, "inputs": {"tag": \\\$tag}}')

\\\$CMD git update-ref refs/snapshots/\\\$TAG \\\$REF
\\\$CMD git push origin refs/snapshots/\\\$TAG

\\\$CMD curl -X POST \
    -H "Accept: application/vnd.github.everest-preview+json" \
    -H "Content-Type: application/json" \
    -H "Authorization: token \\\$GITHUB_TOKEN" \
    --data "\\\$GITHUB_PAYLOAD" \
    https://api.github.com/repos/banzaicloud/pipeline/actions/workflows/snapshot.yml/dispatches
""",
    deps = ["///pleasings2//tools/misc:semver", "///pleasings2//tools/misc:jq"],
)

_os = {
    "darwin": "Darwin",
    "linux": "Linux",
}

remote_file(
    name = "kube-apiserver",
    out = "bin/kube-apiserver",
    binary = True,
    url = "https://storage.googleapis.com/k8s-c10s-test-binaries/kube-apiserver-%s-x86_64" % (_os[CONFIG.HOSTOS]),
)

remote_file(
    name = "etcd",
    out = "bin/etcd",
    binary = True,
    url = "https://storage.googleapis.com/k8s-c10s-test-binaries/etcd-%s-x86_64" % (_os[CONFIG.HOSTOS]),
)
