name: CI

on:
  schedule:
    - cron: '0 5 * * *' # everyday at 5 am UTC
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Go module cache
        id: go-module-cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Go build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go', '**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Download Go modules
        if: steps.go-module-cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Check generated file integrity
        run: |
          make generate-all \
          && test "$(git diff --name-only)" == "" \
          || ( printf >&2 "\ngenerated files are not up to date with the configured dependency versions or current source code files, differences:\n\n%s\n\n" "$(git diff)" ; exit 1 ; )

      - name: Build
        run: ./pleasew -p --profile ci build //...

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: build-log
          path: plz-out/log

  test:
    name: Test
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Test
        run: ./pleasew -p --profile ci test --exclude integration //...

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: test-log
          path: plz-out/log

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest

    needs: build

    services:
      vault:
        image: vault:1.4.2
        env:
          SKIP_SETCAP: true
          VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf
        ports:
          - 8200

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Start kind cluster
        run: |
          ./pleasew -p --profile ci run ///pleasings2//tools/k8s:kind -- create cluster --kubeconfig $HOME/.kube/config
          echo "::set-env name=KUBECONFIG::$HOME/.kube/config"

      - name: Test
        run: |
          ./pleasew -p --profile ci build :kube-apiserver :etcd
          export TEST_ASSET_KUBE_APISERVER=$PWD/$(./pleasew -p --profile ci query output :kube-apiserver)
          export TEST_ASSET_ETCD=$PWD/$(./pleasew -p --profile ci query output :etcd)
          ./pleasew -p --profile ci test --include integration //...
        env:
          VAULT_ADDR: http://127.0.0.1:${{ job.services.vault.ports[8200] }}
          VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: integration-test-log
          path: plz-out/log

  lint:
    name: Lint
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Go module cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Go build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go', '**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Lint
        run: ./pleasew -p --profile ci lint

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: lint-log
          path: plz-out/log

  docker:
    name: Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data

      - name: Docker build info
        id: info
        run: |
          DOCKER_IMAGE=ghcr.io/banzaicloud/pipeline
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.info.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.vendor=Banzai Cloud
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.documentation=https://banzaicloud.com/docs/pipeline/overview/
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.info.outputs.version }}
            org.opencontainers.image.created=${{ steps.info.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
