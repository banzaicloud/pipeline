name: CI

on:
  schedule:
    - cron: '0 5 * * *' # everyday at 5 am UTC
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Go module cache
        id: go-module-cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Go build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go', '**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Download Go modules
        if: steps.go-module-cache.outputs.cache-hit != 'true'
        run: go mod download

      - name: Check generated file integrity
        run: |
          make generate-all \
          && test "$(git diff --name-only)" == "" \
          || ( printf >&2 "\ngenerated files are not up to date with the configured dependency versions or current source code files, differences:\n\n%s\n\n" "$(git diff)" ; exit 1 ; )

      - name: Build
        run: ./pleasew -p --profile ci build //...

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: build-log
          path: plz-out/log

  test:
    name: Test
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Test
        run: ./pleasew -p --profile ci test --exclude integration //...

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: test-log
          path: plz-out/log

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest

    needs: build

    services:
      vault:
        image: vault:1.4.2
        env:
          SKIP_SETCAP: true
          VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf
        ports:
          - 8200

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Start kind cluster
        run: |
          ./pleasew -p --profile ci run ///pleasings2//tools/k8s:kind -- create cluster --kubeconfig $HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Test
        run: |
          ./pleasew -p --profile ci build :kube-apiserver :etcd
          export TEST_ASSET_KUBE_APISERVER=$PWD/$(./pleasew -p --profile ci query output :kube-apiserver)
          export TEST_ASSET_ETCD=$PWD/$(./pleasew -p --profile ci query output :etcd)
          ./pleasew -p --profile ci test --include integration //...
        env:
          VAULT_ADDR: http://127.0.0.1:${{ job.services.vault.ports[8200] }}
          VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: integration-test-log
          path: plz-out/log

  lint:
    name: Lint
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Please cache
        uses: actions/cache@v2
        with:
          path: |
            .plz-cache
          key: ${{ runner.os }}-plz-v3-${{ hashFiles('**/BUILD', '**/BUILD.plz', '**/.plzconfig*', '**/go.mod', '**/go.sum', '**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-plz-v3-

      - name: Go module cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Go build cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go', '**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Lint
        run: ./pleasew -p --profile ci lint

      - name: Save Please log output
        uses: actions/upload-artifact@v1
        with:
          name: lint-log
          path: plz-out/log

  docker:
    name: Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Calculate Docker image tags
        id: tags
        env:
          DOCKER_IMAGES: "ghcr.io/banzaicloud/pipeline banzaicloud/pipeline"
        run: |
          VERSION=noop

          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            VERSION=nightly
          else
            case $GITHUB_REF in
              refs/tags/*)  VERSION=${GITHUB_REF#refs/tags/};;
              refs/heads/*) VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g');;
              refs/pull/*)  VERSION=pr-${{ github.event.number }};;
              *)            VERSION=sha-${GITHUB_SHA::8};;
            esac
          fi

          TAGS=()
          for image in $DOCKER_IMAGES; do
            TAGS+=("${image}:${VERSION}")

            if [[ "${{ github.event.repository.default_branch }}" == "$VERSION" ]]; then
              TAGS+=("${image}:latest")
            fi
          done

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::$(IFS=,; echo "${TAGS[*]}")
          echo ::set-output name=commit_hash::${GITHUB_SHA::8}
          echo ::set-output name=build_date::$(git show -s --format=%cI)

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VERSION=${{ steps.tags.outputs.version }}
            COMMIT_HASH=${{ steps.tags.outputs.commit_hash }}
            BUILD_DATE=${{ steps.tags.outputs.build_date }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.tags.outputs.version }}
            org.opencontainers.image.created=${{ steps.tags.outputs.build_date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.vendor=Banzai Cloud
            org.opencontainers.image.documentation=https://banzaicloud.com/docs/pipeline/overview/
